<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Powershell - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/powershell/</link>
        <description>Powershell - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Jun 2022 09:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/powershell/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Check Azure Devops Pr for Conventional Commit Title
    </title>
    <link>
        https://www.sheldonhull.com/check-azure-devops-pr-for-conventional-commit-title/
    </link>
    <pubDate>
        Tue, 14 Jun 2022 09:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/check-azure-devops-pr-for-conventional-commit-title/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="conventional-commit" class="headerLink">
    <a href="#conventional-commit" class="header-mark"></a>Conventional Commit</h2><ul>
<li>Is it needed&hellip; No.</li>
<li>Is it the only way&hellip; No.</li>
<li>Is consistency better than inconsistentcy, mostly yes.</li>
</ul>
<p>I&rsquo;ve used conventional commit most of my career and it&rsquo;s a fine basic standard, even if sometimes it feels strange as you get used to it.
I think it&rsquo;s far better than inconsistency and is common enough with tooling you can do some nice release, changelog, and versioning with it.</p>
<p>However, getting folks used to it can be tricky.
I&rsquo;m a big believer in don&rsquo;t ask folks to remember a bunch of &ldquo;conventions&rdquo; and just codify with linters, pre-commit, and CI checks.
This eliminates policing and changing a standard just becomes a PR with proposed changes.</p>
<p>GitHub has a lot of actions that help check and prompt for fixes on this, but Azure DevOps doesn&rsquo;t.</p>
<p>I created an Azure Pipeline task with a little adhoc powershell that works well and helps prompt for more consistency in the creation of consistent titles.</p>
<h2 id="powershell-code" class="headerLink">
    <a href="#powershell-code" class="header-mark"></a>PowerShell code</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="p">{</span> <span class="p">&amp;</span><span class="n">commitlint</span> <span class="p">-</span><span class="n">-version</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">commitlint</span> <span class="n">-g</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Write-Host</span> <span class="s2">&#34;Validating PR Title matches what&#39;s acceptable in project (should have a .commitlintrc.yml in your project to use this)...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$result</span> <span class="p">=</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$ENV:PR_TITLE</span> <span class="p">|</span> <span class="n">commitlint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$LASTEXITCODE</span> <span class="o">-eq</span> <span class="mf">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$result</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-Skip</span> <span class="mf">1</span> <span class="p">|</span>  <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;‚úñ&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Write-Host</span> <span class="s2">&#34;##vso[task.logissue type=error]</span><span class="nv">$_</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Write-Host</span> <span class="s2">&#34;##[info]</span><span class="nv">$_</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Write-Host</span> <span class="s2">&#34;##vso[task.logissue type=error]Topic should be in the form of &#39;type(scope): lower case title &lt; 120 characters&#39; (please note colon after scope has no spaces)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">exit</span> <span class="mf">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Write-Host</span> <span class="s2">&#34;‚úÖ PR Title looks good. Nice work! üëç&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Plug this into a template in an dedicated azure pipelines template repository for easy reuse in many repos.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">job</span><span class="p">:</span><span class="w"> </span><span class="l">checkconventionalcommitprtitle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">check-conventional-commit-pr-title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeoutInMinutes</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cancelTimeoutInMinutes</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">checkout</span><span class="p">:</span><span class="w"> </span><span class="l">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">fetchDepth</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c"># Shallow fetch to optimize performance if template repo gets larger</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">bash</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          PR_TITLE=&#34;$(curl --silent -u azdo:$SYSTEM_ACCESSTOKEN \
</span></span></span><span class="line"><span class="cl"><span class="sd">          $(System.CollectionUri)_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)?api-version=5.1 \
</span></span></span><span class="line"><span class="cl"><span class="sd">          | jq -r .title)&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo &#34;##vso[task.setvariable variable=Pr.Title]$PR_TITLE&#34;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">SYSTEM_ACCESSTOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">$(System.AccessToken)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">get-pull-request-title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="l">and(succeeded(), eq(variables[&#39;Build.Reason&#39;], &#39;PullRequest&#39;))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          &lt;PUT THE POWERSHELL CODE HERE&gt;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">check-conventional-commit-pr-title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">failOnStderr</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ignoreLASTEXITCODE</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>To require this on a PR, you can setup a policy on merges to your trunk.
I normally manage this with terraform, so here&rsquo;s a hint to get you started.
Managing your Azure DevOps configuration, builds, and pipelines with Terraform or Pulumi is a far nicer way to keep things maintainable and scale up as more are added.</p>
<p>This sets up your base configuration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">terraform</span> {
</span></span><span class="line"><span class="cl">  <span class="k">required_providers</span> {
</span></span><span class="line"><span class="cl"><span class="n">    azuredevops</span> <span class="o">=</span> {
</span></span><span class="line"><span class="cl"><span class="n">      source</span>  <span class="o">=</span> <span class="s2">&#34;microsoft/azuredevops&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">      version</span> <span class="o">=</span> <span class="s2">&#34;0.2.1&#34;</span>
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"><span class="k">data</span> <span class="s2">&#34;azuredevops_project&#34; &#34;projname&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  name</span> <span class="o">=</span> <span class="s2">&#34;MyProjectName&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">data</span> <span class="s2">&#34;azuredevops_git_repository&#34; &#34;myrepo&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  project_id</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_project</span><span class="p">.</span><span class="k">projname</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">  name</span>       <span class="o">=</span> <span class="s2">&#34;MyRepoName&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next, you&rsquo;ll want to register the pipeline as a valid pipeline to show up linked to the yaml.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">resource</span> <span class="s2">&#34;azuredevops_build_definition&#34; &#34;ci-projname-check-pr-title&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  project_id</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_project</span><span class="p">.</span><span class="k">projname</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">  name</span>       <span class="o">=</span> <span class="s2">&#34;ci-projname-check-pr-title&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">  path</span>       <span class="o">=</span> <span class="s2">&#34;\\pull-request-checks&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">ci_trigger</span> {
</span></span><span class="line"><span class="cl"><span class="n">    use_yaml</span> <span class="o">=</span> <span class="kt">true</span>
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">repository</span> {
</span></span><span class="line"><span class="cl"><span class="n">    repo_type</span>   <span class="o">=</span> <span class="s2">&#34;TfsGit&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">    repo_id</span>     <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">    branch_name</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">default_branch</span>
</span></span><span class="line"><span class="cl"><span class="n">    yml_path</span>    <span class="o">=</span> <span class="s2">&#34;pathto/azure-pipelines.checks.prtitle.yml&#34;</span><span class="c1"> # Match this to whatever you call your template
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, you&rsquo;ll link your pipeline to a policy that requires the run of this to be successful to merge.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">resource</span> <span class="s2">&#34;azuredevops_branch_policy_build_validation&#34; &#34;projname-check-pr-title&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  project_id</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_project</span><span class="p">.</span><span class="k">projname</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">  enabled</span>  <span class="o">=</span> <span class="kt">true</span>
</span></span><span class="line"><span class="cl"><span class="n">  blocking</span> <span class="o">=</span> <span class="kt">true</span><span class="c1"> # This means to bypass you&#39;d have to have permissions and document the override.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">settings</span> {
</span></span><span class="line"><span class="cl"><span class="n">    display_name</span>        <span class="o">=</span> <span class="s2">&#34;üß™ PR Title Adheres to Conventional commit&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">    build_definition_id</span> <span class="o">=</span> <span class="k">azuredevops_build_definition</span><span class="p">.</span><span class="k">ci</span><span class="err">-</span><span class="k">projname</span><span class="err">-</span><span class="k">check</span><span class="err">-</span><span class="k">pr</span><span class="err">-</span><span class="k">title</span><span class="p">.</span><span class="k">id</span><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">    # Set to however long before it has to be rerun. This is fine to be at a high duration as title shouldn&#39;t be changing constantly after it passes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">    valid_duration</span>      <span class="o">=</span> <span class="m">720</span>
</span></span><span class="line"><span class="cl"><span class="n">    filename_patterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">scope</span> {
</span></span><span class="line"><span class="cl"><span class="n">      repository_id</span>  <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">      repository_ref</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">default_branch</span>
</span></span><span class="line"><span class="cl"><span class="n">      match_type</span>     <span class="o">=</span> <span class="s2">&#34;Exact&#34;</span>
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Definitely a bit more work than GitHub actions, but you can still get around some of this by using this approach for any PR merge validations you want.
There&rsquo;s also PR Status policies, but they are a bit more involved, and often involve running some Azure Functions or other things to post back a status.</p>
<p>In my opinion, that is worth investing in as you scale, but initially it&rsquo;s just too much plumbing so I just stick with fast small pipelines like this.</p>
<p>Good luck! üëç</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Azure Pipelines Template Iteration
    </title>
    <link>
        https://www.sheldonhull.com/azure-pipelines-template-iteration/
    </link>
    <pubDate>
        Fri, 05 Mar 2021 06:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/azure-pipelines-template-iteration/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="templates" class="headerLink">
    <a href="#templates" class="header-mark"></a>Templates</h2><p>This isn&rsquo;t meant to be an exhaustive template overview.
I&rsquo;m just going to give an example of what I found useful as I&rsquo;ve been meaning to leverage templates for a while and finally got around to having a great use for it.</p>
<h2 id="my-use-case" class="headerLink">
    <a href="#my-use-case" class="header-mark"></a>My Use Case</h2><p>I am a heavy user of <a href="https://bit.ly/3be6EP8" target="_blank" rel="noopener noreferrer">InvokeBuild</a>.
It&rsquo;s a very robust task runner tool that I&rsquo;ve used to coordinate many project oriented actions, similar to Make, but also DevOps oriented work like AWS SSM tasks and more.</p>
<p>In this scenario, I needed to run a query across: multiple queries -&gt; across multiple servers -&gt; across hundreds of databases &ndash;&gt; and finally produce a single jsonl artifact<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Originally, I did this in a single Invoke-Build task, but what I discovered was with a long running job I wanted to have a bit more granular view of the progress and percentage complete.
This also helped me visualize a bit more what specific queries cost the most in time.</p>
<h2 id="azure-pipeline-construction" class="headerLink">
    <a href="#azure-pipeline-construction" class="header-mark"></a>Azure Pipeline Construction</h2><p>I&rsquo;ve extracted out the key essential pieces here to explain the core concepts.</p>
<h3 id="build-number" class="headerLink">
    <a href="#build-number" class="header-mark"></a>Build Number</h3><p>Build name is dynamically generated.
This is my standard format for most pipelines, but you can adjust the naming with parameters (which are a compile time, before runtime) as well to add other descriptive values.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">$(BuildDefinitionName).$(Configuration).$(Build.QueuedBy).$(DayOfYear)$(Rev:.r)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div
    class="details admonition Info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Parameters
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Parameters are evaluated at compile time, rather than during the build run phase.</p>
<p>This means you can use something like the example below to update the queued build name on run.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">$(BuildDefinitionName).$(Configuration).$(Build.QueuedBy).${{ parameters.SELECTED_VALUE }}.$(DayOfYear)$(Rev:.r)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Using a build variable might require updating the build name if the build variable isn&rsquo;t set on queue, as it won&rsquo;t pick it up without this command.</p>
</div>
    </div>
  </div>
<h3 id="trigger" class="headerLink">
    <a href="#trigger" class="header-mark"></a>Trigger</h3><p>Setting the following values ensures this is a manual pipeline.
Otherwise, once the pipeline is linked it would automatically trigger on PR and main branch commits.</p>
<p>There&rsquo;s other customization in terms of filtering triggers based on the path of the changed file, branch names, batching changes with multiple commits, and more in the docs.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">trigger: none
</span></span><span class="line"><span class="cl">pr: none
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="parameters" class="headerLink">
    <a href="#parameters" class="header-mark"></a>Parameters</h3><p>Designed for user input, the parameters provide a good experience in customizing runs easily at queue time.</p>
<p>This can be a full yaml defined object, but my examples here are the simple ones.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Configuration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">QUERY_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;no-override&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">If no-override, then run everything, else specify a specific query to run.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">SERVER_LIST</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;tcp:123.123.123.1;tcp:123.123.123.2&#39;</span><span class="w"> </span><span class="c">#split this in the task code</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Example Input that InvokeBuild would split to array</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="variables" class="headerLink">
    <a href="#variables" class="header-mark"></a>Variables</h3><p>Parameters won&rsquo;t be set in the environment variables, so if you want these exposed to the next tasks, you have to set the variable from the parameter.</p>
<p>This command will now mean the tasks run will have a <code>$ENV:CONFIGURATION</code> set automatically.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">variables</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">CONFIGURATION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.Configuration }}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="job" class="headerLink">
    <a href="#job" class="header-mark"></a>Job</h3><p>The pipelines allow you to only put the level of complexity you need in your runbook.</p>
<p>This means if you just have tasks, you can put those, but if you have a deployment job then you can include tasks in the appropriate child section.</p>
<p>For my default template here I like control of multi-stage yaml builds, so I use the following format.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">deployment</span><span class="p">:</span><span class="w"> </span><span class="l">my-query-runbook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Run Query in ${{ parameters.Configuration }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeoutInMinutes</span><span class="p">:</span><span class="w"> </span><span class="m">480</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">continueOnError</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;my-environment-${{ parameters.Configuration }}&#39;</span><span class="w">  </span><span class="c">#could setup approval requirements for environments by specifying a name like `my-environment-prod` requires manual approval or is limited to specific folks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pool</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-own-internal-agent </span><span class="w"> </span><span class="c"># OR use hosted container config if you want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">demands</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">agent.os -equals Windows_NT </span><span class="w"> </span><span class="c"># OR use Ubuntu if you have linux container. This is customizable to help you filter to desired agent if working with private subnets etc.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">env -equals ${{ parameters.Configuration }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">runOnce</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">checkout</span><span class="p">:</span><span class="w"> </span><span class="l">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">persistCredentials</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fetchDepth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">  </span><span class="c"># Unlimited in case you need more history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">clean</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">printAllVariables@1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="using-the-template" class="headerLink">
    <a href="#using-the-template" class="header-mark"></a>Using the Template</h3><p>At the same level as the task, the template can be called.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="l">templates/run-query.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">SERVER_LIST</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.QUERY_NAME}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">${{ if ne(parameters.QUERY_NAME,&#39;no-override&#39;) }}:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">querynames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;${{ parameters.QUERY_NAME }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">${{ if eq(parameters.QUERY_NAME,&#39;no-override&#39;) }}:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">querynames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;Query1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;Query2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;Query3&#39;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>A few concepts to unpack:</p>
<ul>
<li>Parameters must be passed into the template, as any build variables automatically in scope.</li>
<li>Variable reuse <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> has it&rsquo;s own set of quirks with templates.</li>
</ul>
<blockquote>
<p>Within a template expression, you have access to the parameters context that contains the values of parameters passed in. Additionally, you have access to the variables context that contains all the variables specified in the YAML file plus many of the predefined variables (noted on each variable in that topic). Importantly, it doesn&rsquo;t have runtime variables such as those stored on the pipeline or given when you start a run. Template expansion happens very early in the run, so those variables aren&rsquo;t available. <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
</blockquote>
<ul>
<li>Expressions allow some conditional evaluation and change in behavior of the pipeline.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></li>
</ul>
<h3 id="template-structure" class="headerLink">
    <a href="#template-structure" class="header-mark"></a>Template Structure</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;QUERY_NAME&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;CONFIGURATION&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;SERVER_LIST&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now that we have the parameters defined, we can use a steps block and loop on the <code>QUERY_NAME</code> parameter that could be a single or multiple entry input.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">${{ each query in parameters.QUERY_NAME }}:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">PowerShell@2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Query ${{ query }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">inputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">targetType</span><span class="p">:</span><span class="w"> </span><span class="l">inline</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">script</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            &amp;./build.ps1 -Tasks &#39;run-my-query&#39; -Configuration &#39;${{ parameters.CONFIGURATION }}&#39; -QueryName &#39;${{ query }}&#39;</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">errorActionPreference</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Stop&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failOnStderr</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">workingDirectory</span><span class="p">:</span><span class="w"> </span><span class="l">$(Build.SourcesDirectory)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">OPTIONAL_ENV_VARS</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.EXAMPLE }}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This could also be slightly altered if you don&rsquo;t want inline scripts to use the following.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">filePath</span><span class="p">:</span><span class="w"> </span><span class="l">build.ps1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">argumentList</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;-Tasks &#39;run-my-query&#39; -Configuration &#39;${{ parameters.CONFIGURATION }}&#39; -QueryName &#39;${{ query }}&#39;&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reporting-progress" class="headerLink">
    <a href="#reporting-progress" class="header-mark"></a>Reporting Progress</h2><p>As the task runs, you can output percent complete so that your task shows how far along it is.
I find this great for long running tasks, helping me check on them and know it&rsquo;s not stuck.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">Write-Host &#34;##vso[task.setprogress value=$PercentComplete;]MyTask&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="final-result" class="headerLink">
    <a href="#final-result" class="header-mark"></a>Final Result</h2><p>This allows the job to set dynamically the individual tasks to run, report progress on each, and log the timing.</p>
<p>While it could be run as a single task, I prefer this type of approach because a long running job is now much more easily tracked as it progresses.</p>
<p><figure><a class="lightgallery" href="/images/2021-03-04-13.38.45-pipelines-example.png" title="image-of-individual-tasks-in-pipeline" data-thumbnail="/images/2021-03-04-13.38.45-pipelines-example.png">
        
    </a></figure></p>
<h2 id="further-features" class="headerLink">
    <a href="#further-features" class="header-mark"></a>Further Features</h2><p>Templates allow for a wide range of usage and flexibility that I&rsquo;ve barely touched.
Selecting entire sets of tasks at runtime, variable sets, and more are all available.</p>
<p>This was a first round usage of them, as I really want to leverage the potentional for DRY with pipelines more, and templates offer a really flexible option to reusing core code across multiple pipelines without having to version each individually and try to keep them up to date.</p>
<h2 id="more-resources" class="headerLink">
    <a href="#more-resources" class="header-mark"></a>More Resources</h2><ul>
<li><a href="https://bit.ly/3ruO5vT" target="_blank" rel="noopener noreferrer">Azure DevOps Tips: ‚ÄúEach‚Äù Loops. Applying DRY principle in CI/CD‚Ää‚Äî‚ÄäUsing‚Ä¶ | by Jordan Lee | Medium</a></li>
<li>YAML schema - Azure Pipelines | Microsoft Docs <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></li>
<li>Predefined variables - Azure Pipelines | Microsoft Docs <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></li>
<li>Expressions <sup id="fnref1:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://bit.ly/3bgkTmi" target="_blank" rel="noopener noreferrer">A standard for jsonl</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://bit.ly/2OqEreJ" target="_blank" rel="noopener noreferrer">Variable reuse</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://bit.ly/2OoAXK0" target="_blank" rel="noopener noreferrer">Azure DevOps Template Context</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://bit.ly/30bDR7g" target="_blank" rel="noopener noreferrer">Expressions - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://bit.ly/3rhAgRd" target="_blank" rel="noopener noreferrer">YAML schema - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://bit.ly/30a1du6" target="_blank" rel="noopener noreferrer">Predefined variables - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Working With Powershell Objects to Create Yaml
    </title>
    <link>
        https://www.sheldonhull.com/working-with-powershell-objects-to-create-yaml/
    </link>
    <pubDate>
        Tue, 09 Feb 2021 05:30:39 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/working-with-powershell-objects-to-create-yaml/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="who-this-might-be-for" class="headerLink">
    <a href="#who-this-might-be-for" class="header-mark"></a>Who This Might Be For</h2><ul>
<li>PowerShellers wanting to know how to create json and yaml dynamically via <code>pscustomobject</code>.</li>
<li>Anyone wanting to create configs like Datadog or other tools dynamically without the benefit of a configuration management tool.</li>
<li>Anyone else wanting to fall asleep more quickly. (I can think of better material such as the Go spec docs, but hey, I can&rsquo;t argue with your good taste üòÑ)</li>
</ul>
<h2 id="yaml" class="headerLink">
    <a href="#yaml" class="header-mark"></a>YAML</h2><p>It&rsquo;s readable.</p>
<p>It&rsquo;s probably cost all of us hours when debugging yaml that&rsquo;s nested several layers and an errant whitespace got in.</p>
<p>It&rsquo;s here to stay.</p>
<p>I prefer it over JSON for readability, but I prefer JSON for programmability.</p>
<p>Sometimes though, tooling uses yaml, and we need to be able to flip between both.</p>
<p>Historically I&rsquo;ve used <code>cfn-flip</code> which is pretty great.</p>
<h2 id="enter-yq" class="headerLink">
    <a href="#enter-yq" class="header-mark"></a>Enter yq</h2><p>The problem I have with using <code>cfn-flip</code> is dependencies.
It&rsquo;s a bit crazy to setup a docker image and then need to install a bunch of python setup tools to just get this one tool when it&rsquo;s all I need.</p>
<p>I thought about building a quick <code>Go</code> app to do this and give me the benefit of a single binary, as there is a pretty useful <code>yaml</code> package already.
Instead, I found a robust package that is cross-platform called <code>yq</code> and it&rsquo;s my new go to. üéâ</p>
<h2 id="just-plain-works" class="headerLink">
    <a href="#just-plain-works" class="header-mark"></a>Just plain works</h2><p><a href="http://bit.ly/3pphpTb" target="_blank" rel="noopener noreferrer">The docs are great</a></p>
<p>Reading <code>STDIN</code> is a bit clunky, but not too bad, though I wish it would take more of a pipeline input approach natively.
Instead of passing in <code>{&quot;string&quot;:&quot;value&quot;} | yq</code> it requires you to specify <code>stringinput | yq eval - --prettyPrint</code> .
Note the single hyphen after eval. This is what signifies that the input is <code>STDIN</code>.</p>
<h2 id="dynamically-generate-some-configs" class="headerLink">
    <a href="#dynamically-generate-some-configs" class="header-mark"></a>Dynamically Generate Some Configs</h2><p>I was working on some Datadog config generation for SQL Server, and found this tooling useful, especially on older Windows instances that didn&rsquo;t have the capability to run the nice module <a href="http://bit.ly/3j4D94J" target="_blank" rel="noopener noreferrer">powershell-yaml</a>.</p>
<p>Here&rsquo;s how to use PowerShell objects to help generate a yaml configuration file on demand.</p>
<h3 id="install" class="headerLink">
    <a href="#install" class="header-mark"></a>Install</h3><p>See install directions for linux/mac, as it&rsquo;s pretty straightforward.</p>
<p>For windows, the chocolatey package was outdated as of the time of the article using the version 3.x.</p>
<p>I used a PowerShell 4.0 compatible syntax here that should work on any instances with access to the web.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">[</span><span class="no">Net.ServicePointManager</span><span class="p">]::</span><span class="n">SecurityProtocol</span> <span class="p">=</span> <span class="p">[</span><span class="no">Net.SecurityProtocolType</span><span class="p">]::</span><span class="n">Tls12</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">-not</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="s1">&#39;C:\tools\yq.exe&#39;</span> <span class="n">-PathType</span> <span class="n">Leaf</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$ProgressPreference</span> <span class="p">=</span> <span class="s1">&#39;SilentlyContinue&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">New-Item</span> <span class="s1">&#39;C:\tools&#39;</span> <span class="n">-ItemType</span> <span class="n">Directory</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Invoke-WebRequest</span> <span class="s1">&#39;https://github.com/mikefarah/yq/releases/download/v4.4.1/yq_windows_amd64.exe&#39;</span> <span class="n">-OutFile</span> <span class="s1">&#39;C:\tools\yq.exe&#39;</span> <span class="n">-UseBasicParsing</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Unblock-File</span> <span class="s1">&#39;C:\tools\yq.exe&#39;</span> <span class="n">-Confirm:</span><span class="vm">$false</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Once this was downloaded, you could either make sure <code>C:\tools</code> was in <code>PATH</code> or just use the fully qualified path for our simple use case.</p>
<h3 id="get-aws-metadata" class="headerLink">
    <a href="#get-aws-metadata" class="header-mark"></a>Get AWS Metadata</h3><p>In AWS, I parsed the metadata for the AccountID and InstanceID to generate a query to pull the Name tag dynamically.</p>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Permissions Check
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">You must have the required permissions for the instance profile for this to work.
This is not an instance level permission, so you&rsquo;ll want to add the required DescribeTags and ListInstances permissions for using a command such as <code>Get-EC2Tag</code></div>
    </div>
  </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="n">AWSPowershell</span> <span class="n">-Verbose:</span><span class="vm">$false</span> <span class="p">*&gt;</span> <span class="vm">$null</span>
</span></span><span class="line"><span class="cl"><span class="c"># AWSPowerShell is the legacy module, but is provided already on most AWS instances</span>
</span></span><span class="line"><span class="cl"><span class="nv">$response</span> <span class="p">=</span> <span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="s1">&#39;http://169.254.169.254/latest/dynamic/instance-identity/document&#39;</span> <span class="n">-TimeoutSec</span> <span class="mf">5</span>
</span></span><span class="line"><span class="cl"><span class="nv">$AccountId</span> <span class="p">=</span> <span class="nv">$response</span><span class="p">.</span><span class="py">AccountId</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pull-back-ec2-tags" class="headerLink">
    <a href="#pull-back-ec2-tags" class="header-mark"></a>Pull Back EC2 Tags</h3><p>Now we can pull back the tag using an EC2 instance filter object.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$filters</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="no">Amazon.EC2.Model.Filter</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;resource-id&#39;</span><span class="p">,</span> <span class="nv">$response</span><span class="p">.</span><span class="n">InstanceId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$tags</span> <span class="p">=</span> <span class="nb">Get-EC2Tag</span> <span class="n">-Filters</span> <span class="nv">$filters</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$tagcollection</span> <span class="p">=</span> <span class="nv">$tags</span><span class="p">.</span><span class="k">ForEach</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nv">$t</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">Name</span>  <span class="p">=</span> <span class="nv">$t</span><span class="p">.</span><span class="py">name</span>
</span></span><span class="line"><span class="cl">          <span class="n">Value</span> <span class="p">=</span> <span class="nv">$t</span><span class="p">.</span><span class="py">value</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Write-Host</span> <span class="s2">&#34;Tags For Instance: </span><span class="p">$(</span><span class="nv">$tagcollection</span> <span class="p">|</span> <span class="nb">Format-Table</span> <span class="n">-AutoSize</span> <span class="n">-Wrap</span> <span class="p">|</span> <span class="nb">Out-String</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$HostName</span> <span class="p">=</span> <span class="nv">$Tags</span><span class="p">.</span><span class="py">GetEnumerator</span><span class="p">().</span><span class="py">Where</span><span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Key</span> <span class="o">-eq</span> <span class="s1">&#39;Name&#39;</span> <span class="p">}.</span><span class="n">Value</span><span class="p">.</span><span class="py">ToLower</span><span class="p">().</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$SqlInstance</span> <span class="p">=</span> <span class="nv">$HostName</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="switch-things-up-with-a-switch" class="headerLink">
    <a href="#switch-things-up-with-a-switch" class="header-mark"></a>Switch Things Up With A Switch</h3><p>The next step was to alias the instance.</p>
<p>The better way to do this would be to use a tag that it reads, but for my quick ad-hoc use, this just let me specific an explicit alias to generate as a tag in the yaml. Again, try to use the Datadog tagging feature to do this automatically if possible.</p>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Switch Statements
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>If you aren&rsquo;t familiar with PowerShell&rsquo;s switch statement, it&rsquo;s a nice little feature for making this evaluation easy to read.</p>
<p>For the breadth of what this cool language feature can do, check this article out:</p>
<p><a href="http://bit.ly/3pwnei0" target="_blank" rel="noopener noreferrer">Everything you ever wanted to know about the switch statement</a></p>
</div>
    </div>
  </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">switch</span> <span class="p">(</span><span class="nv">$AccountId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;12345&#39;</span> <span class="p">{</span> <span class="nv">$AWSAccountAlias</span>  <span class="p">=</span> <span class="s1">&#39;mydevenv&#39;</span> <span class="p">;</span> <span class="nv">$stage</span> <span class="p">=</span> <span class="s1">&#39;qa&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;12345&#39;</span> <span class="p">{</span> <span class="nv">$AWSAccountAlias</span>  <span class="p">=</span> <span class="s1">&#39;myprodenv&#39;</span> <span class="p">;</span> <span class="nv">$stage</span> <span class="p">=</span> <span class="s1">&#39;prod&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="s2">&#34;Couldn&#39;t match a valid account number to give this an alias&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, preview the results of this Frankenstein.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Write-Host</span> <span class="n">-ForegroundColor</span> <span class="n">Green</span> <span class="p">(</span><span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2"></span><span class="se">`$</span><span class="s2">HostName        = </span><span class="nv">$HostName</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"></span><span class="se">`$</span><span class="s2">SqlInstance     = </span><span class="nv">$SqlInstance</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"></span><span class="se">`$</span><span class="s2">AWSAccountAlias = </span><span class="nv">$AWSAccountAlias</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"></span><span class="se">`$</span><span class="s2">stage           = </span><span class="nv">$stage</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"> &#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ready-to-generate-some-yaml-magic" class="headerLink">
    <a href="#ready-to-generate-some-yaml-magic" class="header-mark"></a>Ready To Generate Some Yaml Magic</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$TargetConfig</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Join-Path</span> <span class="nv">$ENV:ProgramData</span> <span class="s1">&#39;Datadog/conf.d/windows_service.d/conf.yaml&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Services</span> <span class="p">=</span> <span class="p">[</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;instances&#39;</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;services&#39;</span>                   <span class="p">=</span>  <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;SQLSERVERAGENT&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;MSSQLSERVER&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;SQLSERVERAGENT&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;disable_legacy_service_tag&#39;</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;tags&#39;</span>                       <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;aws_account_alias:</span><span class="nv">$AWSAccountAlias</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;sql_instance:</span><span class="nv">$SqlInstance</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;stage:</span><span class="nv">$stage</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Services</span> <span class="p">|</span> <span class="nb">ConvertTo-Json</span> <span class="n">-Depth</span> <span class="mf">100</span> <span class="p">|</span> <span class="p">&amp;</span><span class="s1">&#39;C:\tools\yq.exe&#39;</span> <span class="n">eval</span> <span class="p">-</span> <span class="p">-</span><span class="n">-prettyPrint</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="nv">$TargetConfig</span> <span class="n">-Encoding</span> <span class="n">UTF8</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This would produce a nice json output like this</p>
<p><figure><a class="lightgallery" href="/images/2021-02-08-yaml-config-example.png" title="Example config image" data-thumbnail="/images/2021-02-08-yaml-config-example.png">
        
    </a></figure></p>
<h3 id="one-more-complex-example" class="headerLink">
    <a href="#one-more-complex-example" class="header-mark"></a>One More Complex Example</h3><p>Start with creating an empty array and some variables to work with.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$UserName</span> <span class="p">=</span> <span class="s1">&#39;TacoBear&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Password</span> <span class="p">=</span> <span class="s1">&#39;YouReallyThinkI&#39;&#39;dPostThis?Funny&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$TargetConfig</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Join-Path</span> <span class="nv">$ENV:ProgramData</span> <span class="s1">&#39;Datadog/conf.d/sqlserver.d/conf.yaml&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Queries</span> <span class="p">=</span> <span class="vm">@</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next include the generic Datadog collector definition.</p>
<p>This is straight outta their <a href="http://bit.ly/3cisxgY" target="_blank" rel="noopener noreferrer">Github repo</a> with the benefit of some tagging.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$Queries</span> <span class="p">+=</span> <span class="p">[</span><span class="no">ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;host&#39;</span>      <span class="p">=</span><span class="s1">&#39;tcp:localhost,1433&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;username&#39;</span>  <span class="p">=</span><span class="nv">$UserName</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;password&#39;</span>  <span class="p">=</span> <span class="nv">$Password</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;connector&#39;</span> <span class="p">=</span><span class="s1">&#39;adodbapi&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;driver&#39;</span>    <span class="p">=</span> <span class="s1">&#39;SQL Server&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;database&#39;</span>  <span class="p">=</span> <span class="s1">&#39;master&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;tags&#39;</span>      <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;aws_account_alias:</span><span class="nv">$AWSAccountAlias</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;sql_instance:</span><span class="nv">$SqlInstance</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;stage:</span><span class="nv">$stage</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Using &#43;= for Collections
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Using <code>+=</code> is a bit of an anti-pattern for high performance PowerShell, but it works great for something like this that&rsquo;s ad-hoc and needs to be simple.
For high performance needs, try using something like <code>$list = [Systems.Collections.Generic.List[pscustomobject]]:new()</code> for example.
This can then allow you to use the <code>$list.Add([pscustomobject]@{}</code> to add items.</p>
<p>A bit more complex, but very powerful and performance, with the benefit of stronger data typing.</p>
</div>
    </div>
  </div>
<p>This one is a good example of the custom query format that Datadog supports, but honestly I found pretty confusing in their docs until I bumbled my way through a few iterations.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$Queries</span> <span class="p">+=</span>    <span class="p">[</span><span class="no">ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c"># description: Not Used by Datadog, but helpful to reading the yaml, be kind to those folks!</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;description&#39;</span>             <span class="p">=</span> <span class="s1">&#39;Get Count of Databases on Server&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;host&#39;</span>                    <span class="p">=</span><span class="s1">&#39;tcp:localhost,1433&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;username&#39;</span>                <span class="p">=</span> <span class="nv">$UserName</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;database&#39;</span>                <span class="p">=</span> <span class="s1">&#39;master&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;password&#39;</span>                <span class="p">=</span> <span class="nv">$Password</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;connector&#39;</span>               <span class="p">=</span><span class="s1">&#39;adodbapi&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;driver&#39;</span>                  <span class="p">=</span> <span class="s1">&#39;SQL Server&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;min_collection_interval&#39;</span> <span class="p">=</span> <span class="p">[</span><span class="no">timespan</span><span class="p">]::</span><span class="n">FromHours</span><span class="p">(</span><span class="mf">1</span><span class="p">).</span><span class="py">TotalSeconds</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;command_timeout&#39;</span>         <span class="p">=</span> <span class="mf">120</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;custom_queries&#39;</span>          <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;query&#39;</span>   <span class="p">=</span> <span class="s2">&#34;select count(name) from sys.databases as d where d.Name not in (&#39;master&#39;, &#39;msdb&#39;, &#39;model&#39;, &#39;tempdb&#39;)&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;columns&#39;</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;name&#39;</span> <span class="p">=</span> <span class="s1">&#39;instance.database_count&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;type&#39;</span> <span class="p">=</span> <span class="s1">&#39;gauge&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;tags&#39;</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="s2">&#34;aws_account_alias:</span><span class="nv">$AWSAccountAlias</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s2">&#34;sql_instance:</span><span class="nv">$SqlInstance</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s2">&#34;stage:</span><span class="nv">$stage</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let me do a quick breakdown, in case you aren&rsquo;t as familiar with this type of syntax in PowerShell.</p>
<ol>
<li><code>$Queries +=</code> takes whatever existing object we have and replaces it with the current object + the new object. This is why it&rsquo;s not performant for large scale work as it&rsquo;s basically creating a whole new copy of the collection with your new addition.</li>
<li>Next, I&rsquo;m using <code>[ordered]</code> instead of <code>[pscustomobject]</code> which in effect does the same thing, but ensures I&rsquo;m not having all my properties randomly sorted each time. Makes things a little easier to review. This is a shorthand syntax for what would be a much longer tedious process using <code>New-Object</code> and <code>Add-Member</code>.</li>
<li>Custom queries is a list, so I cast it with <code>@()</code> format, which tells PowerShell to expect a list. This helps json/yaml conversion be correct even if you have just a single entry. You can be more explicit if you want, like <code>[pscustomobject[]]@()</code> but since PowerShell ignores you mostly on trying to be type specific, it&rsquo;s not worth it. Don&rsquo;t try to make PowerShell be Go or C#. üòÅ</li>
</ol>
<h3 id="flip-to-yaml" class="headerLink">
    <a href="#flip-to-yaml" class="header-mark"></a>Flip To Yaml</h3><p>Ok, we have an object list, now we need to flip this to yaml.</p>
<p>It&rsquo;s not as easy as <code>$Queries | yq</code> because of the difference in paradigm with .NET.</p>
<p>We are working with a structured object.</p>
<p>Just look at <code>$Queries | Get-Member</code> and you&rsquo;ll probably get: <code>TypeName: System.Collections.Specialized.OrderedDictionary.</code> The difference is that Go/Linux paradigm is focused on text, not objects. With <code>powershell-yaml</code> module you can run <code>ConvertTo-Yaml $Queries</code> and it will work as it will handle the object transformation.</p>
<p>However, we can actually get there with PowerShell, just need to think of a text focused paradigm instead. This is actually pretty easy using <code>Converto-Json</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$SqlConfig</span> <span class="p">=</span> <span class="p">[</span><span class="no">ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span><span class="s1">&#39;instances&#39;</span> <span class="p">=</span> <span class="nv">$Queries</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$SqlConfig</span> <span class="p">|</span> <span class="nb">ConvertTo-Json</span> <span class="n">-Depth</span> <span class="mf">100</span> <span class="p">|</span> <span class="p">&amp;</span><span class="s1">&#39;C:\tools\yq.exe&#39;</span> <span class="n">eval</span> <span class="p">-</span> <span class="p">-</span><span class="n">-prettyPrint</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="nv">$TargetConfig</span> <span class="n">-Encoding</span> <span class="n">UTF8</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This takes the object, converts to json uses the provided cmdlet from PowerShell that knows how to properly take the object and all the nested properties and magically split to <code>JSON</code>.  Pass this into the <code>yq</code> executable, and behold, the magic is done.</p>
<p>You should have a nicely formatted yaml configuration file for Datadog.</p>
<p>If not, the dog will yip and complain with a bunch of red text in the log.</p>
<h3 id="debug-helper" class="headerLink">
    <a href="#debug-helper" class="header-mark"></a>Debug Helper</h3><p>Use this on the remote instance to simplify some debugging, or even connect via SSM directly.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">&amp;</span> <span class="s2">&#34;</span><span class="nv">$env:ProgramFiles</span><span class="s2">\Datadog\Datadog Agent\bin\agent.exe&#34;</span> <span class="n">stopservice</span>
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> <span class="s2">&#34;</span><span class="nv">$env:ProgramFiles</span><span class="s2">\Datadog\Datadog Agent\bin\agent.exe&#34;</span> <span class="nb">start-service</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#Stream Logs without gui if remote session using:</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Content</span> <span class="s1">&#39;C:\ProgramData\Datadog\logs\agent.log&#39;</span> <span class="n">-Tail</span> <span class="mf">5</span> <span class="n">-Wait</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># interactive debugging and viewing of console</span>
</span></span><span class="line"><span class="cl"><span class="c"># &amp; &#34;$env:ProgramFiles\Datadog\Datadog Agent\bin\agent.exe&#34; launch-gui</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap Up</h2><p>Ideally, use Chef, Ansible, Saltstack, DSC, or another tool to do this. However, sometimes you just need some flexible options for generating this type of content dynamically. Hopefully, you&rsquo;ll find this useful in your PowerShell magician journey and save some time.</p>
<p>I&rsquo;ve already found it useful in flipping json content for various tools back and forth. üéâ</p>
<p>A few scenarios that tooling like yq might prove useful could be:</p>
<ul>
<li>convert simple query results from json to yaml and store in git as config</li>
<li>Flip an SSM Json doc to yaml</li>
<li>Review a complex json doc by flipping to yaml for more readable syntax</li>
<li>Confusing co-workers by flipping all their cloudformation from yaml to json or yaml from json. (If you take random advice like this and apply, you probably deserve the aftermath this would bring ü§£.)</li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Create an S3 Lifecycle Policy with PowerShell
    </title>
    <link>
        https://www.sheldonhull.com/create-an-s3-lifecycle-policy-with-powershell/
    </link>
    <pubDate>
        Mon, 18 Jan 2021 18:00:00 -0600
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/create-an-s3-lifecycle-policy-with-powershell/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>First, I&rsquo;m a big believer in doing infrastructure as code.</p>
<p>Using the AWS SDK with any library is great, but for things like S3 I&rsquo;d highly recommend you use a Terraform module such as <a href="https://registry.terraform.io/modules/cloudposse/s3-bucket/aws/latest" target="_blank" rel="noopener noreferrer">Cloudposse terraform-aws-s3-bucket module</a>.
Everything Cloudposse produces has great quality, flexibility with naming conventions, and more.</p>
<p>Now that this disclaimer is out of the way, I&rsquo;ve run into scenarios where you can have a bucket with a large amount of data such as databases which would be good to do some cleanup on before you migrate to newly managed backups.</p>
<p>In my case, I&rsquo;ve run into 50TB of old backups due to tooling issues that prevented cleanup from being successful.
The backup tooling stored a sqlite database in one subdirectory and in another directory the actual backups.</p>
<p>I preferred at this point to only perform the lifecycle cleanup on the backup files, while leaving the sqlite file alone. (side note: i always feel strange typing sqlite, like I&rsquo;m skipping an l üòÅ).</p>
<p>Here&rsquo;s an example of how to do this from the AWS PowerShell docs.</p>
<p>I modified this example to support providing multiple key prefixes.
What wasn&rsquo;t quite clear when I did this the need to create the entire lifecycle policy collection as a single object and pass this to the command.</p>
<p>If you try to run a loop and create one lifecycle policy for each <code>Write-S3LifecycleConfiguration</code> command, it only kept what last ran.
Instead, ensure you create the entire object as shown in the example, and then you&rsquo;ll be able to have multiple lifecycle policies get attached to your bucket.</p>
<p>Good luck!</p>
<script src="https://gist.github.com/sheldonhull/ad168faccb06cd0387bcebfdf99da3d6.js"></script>


        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Experiments With Go Arrays and Slices
    </title>
    <link>
        https://www.sheldonhull.com/experiments-with-go-arrays-and-slices/
    </link>
    <pubDate>
        Wed, 30 Dec 2020 21:44:34 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/experiments-with-go-arrays-and-slices/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="simplicity-over-syntactic-sugar" class="headerLink">
    <a href="#simplicity-over-syntactic-sugar" class="header-mark"></a>Simplicity Over Syntactic Sugar</h2><p>As I&rsquo;ve been learning Go, I&rsquo;ve grown to learn that many decisions to simplify the language have removed many features that provide more succinct expressions in languages such as Python, PowerShell, C#, and others.
The non-orthogonal features in the languages result in many expressive ways something can be done, but at a cost, according to Go&rsquo;s paradigm.</p>
<p>My background is also heavily focused in relational databases and set based work, so I&rsquo;m realizing as I study more programming paradigms seperate from any database involvement, that it&rsquo;s a fundamental difference in the way a database developer and a normal developer writing backend code look at this.
Rather than declarative based syntax, you need to focus a lot more on iterating through collections and manipulating these.</p>
<p>As I explored my assumptions, I found that even in .NET Linq expressions are abstracting the same basic concept of loops and iterations away for simpler syntax, but not fundamentally doing true set selections.
In fact, in some cases I&rsquo;ve read that Linq performance is often worse than a simple loop (see this interesting <a href="https://stackoverflow.com/q/3156059/68698" target="_blank" rel="noopener noreferrer">stack overflow answer</a>)
The catch to this is that the Linq expression might be more maintainable in an enterprise environment at the cost of some degraded performance (excluding some scenarios like deferred execution).</p>
<p>For example, in PowerShell, you can work with arrays in a multitude of ways.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$array</span><span class="p">[</span><span class="mf">4</span><span class="p">.</span><span class="mf">.10</span><span class="p">]</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="c"># or</span>
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$item</span> <span class="k">in</span> <span class="nv">$array</span><span class="p">[</span><span class="nv">$start</span><span class="p">..</span><span class="nv">$end</span><span class="p">]){}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This syntactic sugar provides brevity, but as two ways among many I can think of this does add such a variety of ways and performance considerations.
Go strips this cognitive load away by giving only a few ways to do the same thing.</p>
<h2 id="using-for-loop" class="headerLink">
    <a href="#using-for-loop" class="header-mark"></a>Using For Loop</h2><p>This example is just int slices, but I&rsquo;m trying to understand the options as I <code>range</code> through a struct as well.</p>
<p>When working through these examples for this question, I discovered thanks to the <a href="https://rubberduckdebugging.com" target="_blank" rel="noopener noreferrer">Rubber Duck debugging</a>, that you can simplify slice selection using <code>newSlice := arr[2:5]</code>.</p>
<h3 id="simple-loop" class="headerLink">
    <a href="#simple-loop" class="header-mark"></a>Simple Loop</h3><p>As an example: <a href="https://goplay.tools/snippet/w6mGwJyz2C2" target="_blank" rel="noopener noreferrer">Goplay Link To Run</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">startIndex</span> <span class="o">:=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">	<span class="nx">itemsToSelect</span> <span class="o">:=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">	<span class="nx">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">50</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;starting: arr: %v\n&#34;</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">newCollection</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;initialized newCollection: %v\n&#34;</span><span class="p">,</span> <span class="nx">newCollection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">itemsToSelect</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newCollection</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">newCollection</span><span class="p">,</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="nx">startIndex</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\tnewCollection: %v\n&#34;</span><span class="p">,</span> <span class="nx">newCollection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;= newCollection: %v\n&#34;</span><span class="p">,</span> <span class="nx">newCollection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;expected: 20, 25, 35\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="s">```
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">This would result in:
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">```</span><span class="nx">text</span>
</span></span><span class="line"><span class="cl"><span class="nx">starting</span><span class="p">:</span> <span class="nx">arr</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span> <span class="mi">15</span> <span class="mi">20</span> <span class="mi">25</span> <span class="mi">35</span> <span class="mi">45</span> <span class="mi">50</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">initialized</span> <span class="nx">newCollection</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newCollection</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newCollection</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span> <span class="mi">25</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newCollection</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span> <span class="mi">25</span> <span class="mi">35</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">=</span> <span class="nx">newCollection</span><span class="p">:</span> <span class="p">[</span><span class="mi">20</span> <span class="mi">25</span> <span class="mi">35</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">expected</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">35</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="moving-loop-to-a-function" class="headerLink">
    <a href="#moving-loop-to-a-function" class="header-mark"></a>Moving Loop to a Function</h3><p>Assuming there are no more effective selection libraries in Go, I&rsquo;m assuming I&rsquo;d write functions for this behavior such as <a href="https://goplay.tools/snippet/BzQkSif0Vs_s" target="_blank" rel="noopener noreferrer">Goplay Link To Run</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">startIndex</span> <span class="o">:=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">	<span class="nx">itemsToSelect</span> <span class="o">:=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">	<span class="nx">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">50</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;starting: arr: %v\n&#34;</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newCollection</span> <span class="o">:=</span> <span class="nf">GetSubselection</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">itemsToSelect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;GetSubselection returned: %v\n&#34;</span><span class="p">,</span> <span class="nx">newCollection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;expected: 20, 25, 35\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">GetSubselection</span><span class="p">(</span><span class="nx">arr</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">startIndex</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">itemsToSelect</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="nx">newSlice</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;newSlice: %v\n&#34;</span><span class="p">,</span> <span class="nx">newSlice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">itemsToSelect</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newSlice</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">newSlice</span><span class="p">,</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="nx">startIndex</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\tnewSlice: %v\n&#34;</span><span class="p">,</span> <span class="nx">newSlice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;= newSlice: %v\n&#34;</span><span class="p">,</span> <span class="nx">newSlice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">newSlice</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>which results in:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">starting: arr: [10 15 20 25 35 45 50]
</span></span><span class="line"><span class="cl">newSlice: []
</span></span><span class="line"><span class="cl">	newSlice: [20]
</span></span><span class="line"><span class="cl">	newSlice: [20 25]
</span></span><span class="line"><span class="cl">	newSlice: [20 25 35]
</span></span><span class="line"><span class="cl">= newSlice: [20 25 35]
</span></span><span class="line"><span class="cl">GetSubselection returned: [20 25 35]
</span></span><span class="line"><span class="cl">expected: 20, 25, 35
</span></span></code></pre></td></tr></table>
</div>
</div><p>Trimming this down further I found I could use the slice syntax (assuming the consecutive range of values) such as:
<a href="https://goplay.tools/snippet/y2GJXcO3uLZ" target="_blank" rel="noopener noreferrer">Goplay Link To Run</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">func</span> <span class="n">GetSubselection</span><span class="p">(</span><span class="n">arr</span> <span class="p">[]</span><span class="ne">int</span><span class="p">,</span> <span class="n">startIndex</span> <span class="ne">int</span><span class="p">,</span> <span class="n">itemsToSelect</span> <span class="ne">int</span><span class="p">)</span> <span class="p">(</span><span class="n">newSlice</span> <span class="p">[]</span><span class="ne">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s2">&#34;newSlice: %v</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">newSlice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">newSlice</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">startIndex</span><span class="p">:(</span><span class="n">startIndex</span> <span class="o">+</span> <span class="n">itemsToSelect</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\t</span><span class="s2">newSlice: %v</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">newSlice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s2">&#34;= newSlice: %v</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">newSlice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">newSlice</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="range" class="headerLink">
    <a href="#range" class="header-mark"></a>Range</h3><p>The <code>range</code> expression gives you both the index and value, and it works for maps and structs as well.</p>
<p>Turns outs you can also work with a subselection of a slice in the <code>range</code> expression.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">startIndex</span> <span class="o">:=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">	<span class="nx">itemsToSelect</span> <span class="o">:=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">	<span class="nx">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">50</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;starting: arr: %v\n&#34;</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Use range to iterate through arr[%d:(%d + %d)]\n&#34;</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">itemsToSelect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">startIndex</span><span class="p">:(</span><span class="nx">startIndex</span> <span class="o">+</span> <span class="nx">itemsToSelect</span><span class="p">)]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\ti: %d v: %d\n&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="s">&#34;expected: 20, 25, 35\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="slices" class="headerLink">
    <a href="#slices" class="header-mark"></a>Slices</h2><p>While the language is simple, understanding some behaviors with slices caught me off-guard.</p>
<p>First, I needed to clarify my language.
Since I was looking to have a subset of an array, slices were the correct choice.
For a fixed set with no changes, a standard array would be used.</p>
<p><a href="https://tour.golang.org/moretypes/7" target="_blank" rel="noopener noreferrer">Tour On Go</a> says it well with:</p>
<blockquote>
<p>An array has a fixed size.
A slice, on the other hand, is a dynamically-sized, flexible view into the elements of an array.
In practice, slices are much more common than arrays.</p>
</blockquote>
<p>For instance, I tried to think of what I would do to scale performance on a larger array, so I used a pointer to my int array.
However, I was using a <code>slice</code>.</p>
<p>This means that using a pointer wasn&rsquo;t valid.
This is because whenever I pass the slice it is a pass by reference already, unlike many of the other types.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">newCollection</span> <span class="o">:=</span> <span class="nf">GetSubSelection</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">arr</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">GetSubSelection</span><span class="p">(</span><span class="nx">arr</span> <span class="o">*</span><span class="p">[]</span><span class="kt">int</span><span class="p">){</span> <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I think some of these behaviors aren&rsquo;t quite intuitive to a new Gopher, but writing them out helped clarify the behavior a little more.</p>
<h2 id="resources" class="headerLink">
    <a href="#resources" class="header-mark"></a>Resources</h2><p>This is a bit of a rambling about what I learned so I could solidify some of these discoveries by writing them down. #learninpublic</p>
<p>For some great examples, look at some examples in:</p>
<ul>
<li><a href="https://tour.golang.org/moretypes/7" target="_blank" rel="noopener noreferrer">A Tour Of Go - Slices</a></li>
<li><a href="https://gobyexample.com/slices" target="_blank" rel="noopener noreferrer">Go By Example</a></li>
<li><a href="https://github.com/inancgumus/prettyslice" target="_blank" rel="noopener noreferrer">Prettyslice GitHub Repo</a></li>
</ul>
<p>If you have any insights, feel free to drop a comment here (it&rsquo;s just a GitHub powered comment system, no new account required).</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Assume a role with AWS PowerShell Tools
    </title>
    <link>
        https://www.sheldonhull.com/assume-a-role-with-aws-powershell-tools/
    </link>
    <pubDate>
        Tue, 21 Jul 2020 20:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/assume-a-role-with-aws-powershell-tools/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="assume-a-role" class="headerLink">
    <a href="#assume-a-role" class="header-mark"></a>Assume A Role</h2><p>I&rsquo;ve had some issues in the past working with <code>AWS.Tools</code> PowerShell SDK and correctly assuming credentials.</p>
<p>By default, most of the time it was easier to use a dedicated IAM credential setup for the purpose.</p>
<p>However, as I&rsquo;ve wanted to run some scripts across multiple accounts, the need to simplify by assuming a role has been more important.</p>
<p>It&rsquo;s also a better practice than having to manage multiple key rotations in all accounts.</p>
<p>First, as I&rsquo;ve had the need to work with more tooling, I&rsquo;m not using the SDK encrypted <code>json</code> file.</p>
<p>Instead, I&rsquo;m leveraging the <code>~/.aws/credentials</code> profile in the standard <code>ini</code> format to ensure my tooling (docker included) can pull credentials correctly.</p>
<p>Configure your file in the standard format.</p>
<p>Setup a <code>[default]</code> profile in your credentials manually or through <code>Initialize-AWSDefaultConfiguration -ProfileName 'my-source-profile-name' -Region 'us-east-1' -ProfileLocation ~/.aws/credentials</code>.</p>
<p>If you don&rsquo;t set this, you&rsquo;ll need to modify the examples provided to include the source <code>profilename</code>.</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=aws-cred-example"></script>

<p>Next, ensure you provide the correct Account Number for the role you are trying to assume, while the MFA number is going to come from the &ldquo;home&rdquo; account you setup.
For the <code>Invoke-Generate</code>, I use a handy little generator from <code>Install-Module NameIt -Scope LocalUser -Confirm:$false</code>.</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=aws-sts-assume-role-example.ps1"></script>

<p>Bonus: Use Visual Studio Code Snippets and drop this in your snippet file to quickly configure your credentials in a script with minimal fuss. üéâ</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=vscode-snippet.json"></script>

<p>I think the key area I&rsquo;ve missed in the past was providing the mfa and token in my call, or setting up this correctly in the configuration file.</p>
<h2 id="temporary-credentials" class="headerLink">
    <a href="#temporary-credentials" class="header-mark"></a>Temporary Credentials</h2><p>In the case of needing to generate a temporary credential, say for an environment variable based run outside of the SDK tooling, this might also provide something useful.</p>
<p>It&rsquo;s one example of further reducing risk vectors by only providing a time-limited credential to a tool you might be using (can limit to a smaller time-frame).</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=generate-temporary-credentials.ps1"></script>

<h2 id="aws-vault" class="headerLink">
    <a href="#aws-vault" class="header-mark"></a>AWS-Vault</h2><p>Soon to come, using <a href="https://bit.ly/3eTwztU" target="_blank" rel="noopener noreferrer">aws-vault</a> to improve the security of your AWS sdk credentials further by simplifying role assumption and temporary sessions.</p>
<p>I&rsquo;ve not ironed out exactly how to deal with some issues with using this great session tool when jumping between various tools such as PowerShell, python, docker, and more, so for now, I&rsquo;m not able to provide all the insight.
Hopefully, I&rsquo;ll add more detail to leveraging this once I get things ironed out.</p>
<p>Leave a comment if this helped you out or if anything was confusing so I can make sure to improve a quick start like this for others. üåÆ</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        2020-07-13T14:00:00-05:00
    </title>
    <link>
        https://www.sheldonhull.com/2020-07-13t14-00-00/
    </link>
    <pubDate>
        Mon, 13 Jul 2020 14:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/2020-07-13t14-00-00/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>PowerShell has some functionality that can help in pre-processing data by grouping and aggregating.
If you are using <code>ImportExcel</code> this might be useful to pre-aggregate the results prior to an Excel workbook.
If you are working with PowerShell and needing to do some quick measurement of objects, maybe this will be useful.</p>
<script src="https://gist.github.com/sheldonhull/af7e3355953a2f6533c813d9ca220a7d.js"></script>


        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Azure Data Studio SQL Notebook for Diagnostic Queries
    </title>
    <link>
        https://www.sheldonhull.com/azure-data-studio-sql-notebook-for-diagnostic-queries/
    </link>
    <pubDate>
        Wed, 24 Jun 2020 11:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/azure-data-studio-sql-notebook-for-diagnostic-queries/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="diagnostic-queries" class="headerLink">
    <a href="#diagnostic-queries" class="header-mark"></a>Diagnostic Queries</h2><p>Glenn Berry has long been known for producing the definitive diagnostic query set for various SQL Server versions. Between his amazing work and my favorite Brent Ozar First Responder Kit, you are pretty much set.</p>
<p>One of the things that can be painful though about running diagnostic queries is that it&rsquo;s a lot of small individual queries that you want to run and ideally save the results for review.</p>
<p>You can do this with dbatools and running queries individually, which is actually what I did a while back for a special support tool that dynamically split those queries into files and exported to xml for later import and review.</p>
<h2 id="azure-data-studio" class="headerLink">
    <a href="#azure-data-studio" class="header-mark"></a>Azure Data Studio</h2><p>I&rsquo;m a big fan of Azure Data Studio and as I&rsquo;m not primarily focused right now on SQL Server administration, the feature-set perfectly fits my needs for running queries, doing some basic server administration, and overall just having a lighter weight solution to SSMS. Since I migrated to macOS, this provides me a nice cross-platform tool that I can use on Windows or macOS.</p>
<p>A great feature that has been continually improving is the Azure Data Studio notebooks. Not only can you run T-SQL notebooks now, but also PowerShell and python using whatever kernel you desire.</p>
<p>As part of this, you get the benefits of a nice intuitive structure to ad-hoc queries you might want to provide to someone with details on what it means and more. Additionally, the results are cached as part of the JSON so if you save the file and come back later you can review all the results that were pulled (and as a plus they render in GitHub viewer too).</p>
<h2 id="diagnostic-queries--azure-data-studio--dbatools--" class="headerLink">
    <a href="#diagnostic-queries--azure-data-studio--dbatools--" class="header-mark"></a>Diagnostic Queries + Azure Data Studio + dbatools = üéâ</h2><p>To merge the power of all 3 technologies, you can use dbatools to export the diagnostic queries for a targeted SQL server version as an Azure Data Studio Notebook. Pretty freaking cool.</p>
<p>To get started on this just make sure you have the latest dbatools: <code>Install-Module dbatools -confirm:$false</code></p>
<p>Then generate a new Azure Data Studio Notebook like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># This will create the notebook in whatever location you currently are in</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Version</span> <span class="p">=</span> <span class="mf">2017</span>
</span></span><span class="line"><span class="cl"><span class="nb">New-DbaDiagnosticAdsNotebook</span> <span class="n">-Path</span> <span class="s2">&#34;DiagnosticNotebook</span><span class="nv">${Version}</span><span class="s2">.ipynb&#34;</span> <span class="n">-TargetVersion</span> <span class="nv">$Version</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Open up this new notebook and enjoy the result! To make reading easier, you can issue the command to &ldquo;collapse all cells&rdquo; and the queries will be minimized allowing you to read through all the query options.</p>
<p>Note that even the description of the queries is provided in the notebook, providing insight on the purpose of the query.</p>
<div
    class="details admonition warning
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-exclamation-triangle fa-fw"
      ></i>
      Warning
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">As always, make sure you are careful before just running all queries by default against a production server.
Some queries take heavy resources and might not be appropriate to run in the middle of a production workflow.</div>
    </div>
  </div>
<p><figure><a class="lightgallery" href="/images/2020-06-23_13-23-07_azure_data_studio.png" title="Shows the diagnostic query view in Azure Data Studio" data-thumbnail="/images/2020-06-23_13-23-07_azure_data_studio.png" data-sub-html="<h2>Azure Data Studio Diagnostic Queries</h2><p>Shows the diagnostic query view in Azure Data Studio</p>">
        
    </a><figcaption class="image-caption">Azure Data Studio Diagnostic Queries</figcaption>
    </figure></p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        2020-06-17T22:32:32&#43;00:00
    </title>
    <link>
        https://www.sheldonhull.com/2020-06-17t223232-0000/
    </link>
    <pubDate>
        Wed, 17 Jun 2020 22:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/2020-06-17t223232-0000/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Here&rsquo;s a cool way to visualize runspaces and how they work asynchronously.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$IndentLevel</span> <span class="p">=</span> <span class="mf">2</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Random</span><span class="p">;</span> <span class="vm">@</span><span class="p">(</span><span class="mf">1</span><span class="p">.</span><span class="mf">.100</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Parallel</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$i</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Start-Sleep</span> <span class="n">-Milliseconds</span> <span class="p">(</span><span class="nb">Get-Random</span> <span class="n">-Minimum</span> <span class="mf">100</span> <span class="n">-Maximum</span> <span class="mf">1500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;{0,</span><span class="p">$(</span><span class="nv">$i</span> <span class="p">*</span> <span class="nv">$using</span><span class="err">:</span><span class="n">IndentLevel</span><span class="p">)</span><span class="s2">}&#34;</span> <span class="o">-f</span> <span class="nv">$i</span> <span class="p">|</span> <span class="nb">Write-Host</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The random delay can help show how some tasks finish out of order.
For example, running that might result in this in the console:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">       4
</span></span><span class="line"><span class="cl"> 1
</span></span><span class="line"><span class="cl">     3
</span></span><span class="line"><span class="cl">   2
</span></span><span class="line"><span class="cl">             7
</span></span><span class="line"><span class="cl">         5
</span></span><span class="line"><span class="cl">                 9
</span></span><span class="line"><span class="cl">           6
</span></span><span class="line"><span class="cl">                  10
</span></span><span class="line"><span class="cl">               8
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Improved Windows Terminal Setup
    </title>
    <link>
        https://www.sheldonhull.com/improved-windows-terminal-setup/
    </link>
    <pubDate>
        Mon, 20 Apr 2020 07:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/improved-windows-terminal-setup/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>I&rsquo;ve long been a Cmder/ConEmu user for Windows as it&rsquo;s provided a much-needed improvement of the standard Windows terminal.</p>
<p>I&rsquo;ve started trying to use the newer Windows Terminal project to benefit from the improved performance and support, and found getting it up and running with any customizations was a little time consuming and confusing. This wasn&rsquo;t something I&rsquo;d hand off to someone who wasn&rsquo;t looking for experimentation.</p>
<p>So here it goes! Rather than hunting all around to get a nice start on some default prompts, I&rsquo;ve linked to some gists that can help you get up and running quickly with a few extra perks.</p>
<h2 id="getting-started" class="headerLink">
    <a href="#getting-started" class="header-mark"></a>Getting Started</h2><p>This will help you get the terminal installed, along with downloading some settings I&rsquo;ve already pre-setup with keybindings and more.</p>
<p>To customize your own keybindings, you can go to the <a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md" target="_blank" rel="noopener noreferrer">profiles.json</a> documentation.</p>
<script src="https://gist.github.com/sheldonhull/93d8060e6f86e0c46535ef6699d6e0c8.js?file=install-settings.ps1"></script>

<h2 id="improve-your-experience" class="headerLink">
    <a href="#improve-your-experience" class="header-mark"></a>Improve Your Experience</h2><p>After install, you can run the next command to help you get a better font setup with full support for ligatures and more.</p>
<script src="https://gist.github.com/sheldonhull/93d8060e6f86e0c46535ef6699d6e0c8.js?file=install-font.ps1"></script>

<p>And after this, if you don&rsquo;t have a nice PowerShell prompt experience, this will help give you a great start. This contains a few things, including <a href="https://starship.rs" target="_blank" rel="noopener noreferrer">starship</a>. This is really useful as it has a library of prompt enhancements baked in. For example, if you are have an AWS profile active, it will display that for reference. It can display an active terraform workspace, git branch info, python virtual environment and more. Definitely a nice quick productivity booster with no real configuration needed to get going.</p>
<script src="https://gist.github.com/sheldonhull/93d8060e6f86e0c46535ef6699d6e0c8.js?file=configure-profile-prompt.ps1"></script>

<p>If you are wondering why I didn&rsquo;t leave the pretty awesome <code>&quot;useAcrylic&quot;: true</code> on for my main pwsh session, it&rsquo;s because I found the background contrast reduction made it hard to read some darker colors on the prompt.</p>
<p>Be sure to try out the retro pwsh theme for some nice eye candy.</p>
<h2 id="the-result" class="headerLink">
    <a href="#the-result" class="header-mark"></a>The result</h2><p>PowerShell Protip: Note the suggested completion based on prior commands in the pwsh prompt. This is some great prerelease work on a better PSReadline experience with Powershell.</p>
<p><figure><a class="lightgallery" href="/images/windows-terminal-01.png" title="image of windows terminal" data-thumbnail="/images/windows-terminal-01.png">
        
    </a></figure></p>
<p><figure><a class="lightgallery" href="/images/windows-terminal-02.png" title="images of windows terminal" data-thumbnail="/images/windows-terminal-02.png">
        
    </a></figure></p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

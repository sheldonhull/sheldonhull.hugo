<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Go - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/go/</link>
        <description>Go - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 11 Mar 2022 23:49:22 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/go/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Pulumi Secrets
    </title>
    <link>
        https://www.sheldonhull.com/pulumi-secrets/
    </link>
    <pubDate>
        Fri, 11 Mar 2022 23:49:22 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/pulumi-secrets/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="chicken-or-the-egg" class="headerLink">
    <a href="#chicken-or-the-egg" class="header-mark"></a>Chicken or The Egg</h2><p>Secrets with infrastructure are a problem.</p>
<ul>
<li>I want to source control my secrets, and deploy via CD.</li>
<li>I want to use infrastructure-as-code to define my configuration, including secrets.</li>
</ul>
<p>But I don&rsquo;t want to expose the values at any stage during this.
I want to keep them in a secret store, and only expose them when I need them, but I still want to manage them via code.</p>
<p>For a while I&rsquo;ve done a blend of loading local environment variables or creating manually in a vault, and then using in other ways.</p>
<p>Terraform makes this tricky IMO, as if you want to create a secret like an Azure DevOps library variable, SSM parameter, or other value, you need to go and add this into Terraform cloud as a secret value, use a third party cli that helps do this for you, or some other work around.</p>
<h2 id="other-alternatives" class="headerLink">
    <a href="#other-alternatives" class="header-mark"></a>Other alternatives</h2><p>There are tools that allow you to encrypt your files in git, but it adds another layer of complexity, and often isn&rsquo;t cross-platform compatible.</p>
<h2 id="pulumi-secret-encryption" class="headerLink">
    <a href="#pulumi-secret-encryption" class="header-mark"></a>Pulumi Secret Encryption</h2><p>Pulumi&rsquo;s solution seems like a non-brainer ingenious way to solve this.</p>
<p>When using their remote state storage, you can use the cli to easily flag a value as a secret, and the value is encrypted in your yaml configuration (you can configure one outside of the yaml too if you wish I think).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pulumi config <span class="nb">set</span> --secret --secret-key<span class="o">=</span>my-secret-key my-secret-value
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="some-practical-examples" class="headerLink">
    <a href="#some-practical-examples" class="header-mark"></a>Some Practical Examples</h2><p>I wanted to embed some encrypted kubeconfigs for designated clusters to do deployments.</p>
<p>Assuming you have a directory of some service account kubeconfigs, you could run this shell script and add encrypted configurations for each of your clusters that pulumi could then read.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">pulumicwd</span><span class="o">=</span>pulumi/myfancyproject
</span></span><span class="line"><span class="cl"><span class="nv">pulumistack</span><span class="o">=</span>myfancyproject/dev
</span></span><span class="line"><span class="cl"><span class="nv">ClusterIndex</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="k">$(</span>ls .mykubeconfigs/kubeconfig-svc-account--*.yaml<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Processing </span><span class="nv">$i</span><span class="s2">: ClusterIndex: </span><span class="nv">$ClusterIndex</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">kubecontent</span><span class="o">=</span><span class="k">$(</span>cat <span class="nv">$i</span> <span class="p">|</span> gojq --compact-output --yaml-input<span class="k">)</span>
</span></span><span class="line"><span class="cl">  <span class="nv">clustername</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$kubecontent</span> <span class="p">|</span> gojq <span class="s1">&#39;.clusters[0].name&#39;</span> --raw-output<span class="k">)</span>
</span></span><span class="line"><span class="cl">  pulumi --cwd <span class="nv">$pulumicwd</span> --stack <span class="nv">$pulumistack</span> config <span class="nb">set</span> --path <span class="s2">&#34;clusters[</span><span class="si">${</span><span class="nv">ClusterIndex</span><span class="si">}</span><span class="s2">].name&#34;</span>  <span class="nv">$clustername</span>
</span></span><span class="line"><span class="cl">  cat <span class="nv">$i</span> <span class="p">|</span> gojq --compact-output --yaml-input <span class="p">|</span> pulumi --cwd <span class="nv">$pulumicwd</span> --stack <span class="nv">$pulumistack</span> config <span class="nb">set</span> --secret --path <span class="s2">&#34;clusters[</span><span class="si">${</span><span class="nv">ClusterIndex</span><span class="si">}</span><span class="s2">].kubeconfig&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nv">ClusterIndex</span><span class="o">=</span><span class="k">$((</span>ClusterIndex+1<span class="k">))</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;All done, the magic has been done, toast your kubeconfigs and send Sheldon a coffee. ☕ (and copilot for helping write this so quickly)&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This would result in the following pulumi yaml being part of your stack:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">myfancyproject:clusters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">clustername</span><span class="p">:</span><span class="w"> </span><span class="l">clusteeeeergobrrrr01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">kubeconfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">secure</span><span class="p">:</span><span class="w"> </span><span class="l">mumbojumbencryptedtexthere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">clustername</span><span class="p">:</span><span class="w"> </span><span class="l">clusteeeeergobrrrr02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">kubeconfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">secure</span><span class="p">:</span><span class="w"> </span><span class="l">mumbojumbencryptedtexthere</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="consuming-this-in-go" class="headerLink">
    <a href="#consuming-this-in-go" class="header-mark"></a>Consuming This in Go</h2><p>What&rsquo;s cool is it&rsquo;s so freaking easy to work with it still in Pulumi.
Since the encryption is per stack, as long as you are in the right stack, and as long as you specify explicitly that the value you want to load is a secret, you can just work with it almost as usual.</p>
<p>In fact, all it takes is flipping <code>RequireObject</code> to <code>RequiredSecretObject</code>.</p>
<p>Not everything is easy in Pulumi&hellip; for sure, but they freaking nailed this.</p>
<h3 id="create-a-config-object" class="headerLink">
    <a href="#create-a-config-object" class="header-mark"></a>Create A Config Object</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Clusters</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Name</span>       <span class="kt">string</span> <span class="s">`json:&#34;name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Kubeconfig</span> <span class="kt">string</span> <span class="s">`json:&#34;kubeconfig,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="use-structured-secret-configuration-in-pulumi-plan" class="headerLink">
    <a href="#use-structured-secret-configuration-in-pulumi-plan" class="header-mark"></a>Use Structured Secret Configuration In Pulumi Plan</h3><p>Now that we have a config object, use Pulumi&rsquo;s configuration package to load the config directly into a pointer to a struct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> 	<span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kubernetes</span> <span class="s">&#34;github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pulumi</span> <span class="s">&#34;github.com/pulumi/pulumi/sdk/v3/go/pulumi&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">config</span> <span class="s">&#34;github.com/pulumi/pulumi/sdk/v3/go/pulumi/config&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pulumi</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">pulumi</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">configClusters</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">Clusters</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// config.RequireObject(&#34;clusters&#34;, &amp;configClusters) // wouldn&#39;t give encrypted values, so we do the next line
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">config</span><span class="p">.</span><span class="nf">RequireSecretObject</span><span class="p">(</span><span class="s">&#34;clusters&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">configClusters</span><span class="p">)</span> <span class="c1">// wouldn&#39;t give encrypted values, so we do the next line
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cluster</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">configClusters</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_</span> <span class="p">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">Log</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;starting up on cluster: %s... it go brrrr&#34;</span><span class="p">,</span> <span class="nx">cluster</span><span class="p">.</span><span class="nx">Name</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">pulumi</span><span class="p">.</span><span class="nx">LogArgs</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">      <span class="nx">pargs</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">kubernetes</span><span class="p">.</span><span class="nx">ProviderArgs</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">pargs</span><span class="p">.</span><span class="nx">Kubeconfig</span> <span class="p">=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nx">Kubeconfig</span>
</span></span><span class="line"><span class="cl">      <span class="nx">myProvider</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewProvider</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;k8&#34;</span><span class="p">,</span> <span class="nx">pargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// now pass this myProvider to resources as the provider to use.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Passing the provider is done per resources like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">appsv1</span><span class="p">.</span><span class="nf">NewDeployment</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;my-deployment-name&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">DeploymentArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pulumi</span><span class="p">.</span><span class="nf">Provider</span><span class="p">(</span><span class="nx">prov</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="security-is-per-stack" class="headerLink">
    <a href="#security-is-per-stack" class="header-mark"></a>Security Is Per Stack</h2><p>Now&hellip; let&rsquo;s say you get worried about someone cloning this file and doing some devious with it.</p>
<p>They go along and generate a new yaml file, grab your encrypted values, use pulumi to decrypt and then go and drop your cluster.</p>
<p>Ain&rsquo;t gonna happen.
The paranoid part of my DevOpsy brain thinks like this.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">error: failed to decrypt encrypted configuration value &#39;cluster:kubeconfig&#39;: [400] Message authentication failed
</span></span><span class="line"><span class="cl">This can occur when a secret is copied from one stack to another. Encryption of secrets is done per-stack and
</span></span><span class="line"><span class="cl">it is not possible to share an encrypted configuration value across stacks.
</span></span></code></pre></td></tr></table>
</div>
</div><p>To me this felt like a failure I really was happy to see. Thank you Pulumi!</p>
<p>Best part is no freaking <code>echo $val | base64 -d</code>&hellip; <code>&lt;looking at you kubernetes secret values&gt;</code>.</p>
<h2 id="side-note-on-configuration" class="headerLink">
    <a href="#side-note-on-configuration" class="header-mark"></a>Side Note On Configuration</h2><p>I used a more complex config struct for the main naming convention enforcement and it worked great to simplify naming consistency.
Might do an article on this sometime if anyone finds it useful.</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// ServiceDeployName returns a string formatted like `myapi-dev-myapp-{SUFFIX}` where suffix is provided on call.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">SvcConfig</span><span class="p">)</span> <span class="nf">ServiceDeployName</span><span class="p">(</span><span class="nx">sharedConfig</span> <span class="o">*</span><span class="nx">SharedConfig</span><span class="p">,</span> <span class="nx">suffix</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">Rolename</span><span class="p">,</span> <span class="nx">sharedConfig</span><span class="p">.</span><span class="nx">Environment</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">,</span> <span class="nx">suffix</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This provided solid intellisense all the way through it and made it really easy to refactor naming all by updating my config package.</p>
<h2 id="disclaimer" class="headerLink">
    <a href="#disclaimer" class="header-mark"></a>Disclaimer</h2><p>I&rsquo;m a fan of role based access like AWS Role assumption, using limited generated access tokens, etc (see <a href="/simplify-aws-developer-security-with-leapp/" title="simplify-aws-developer-security-with-leapp" rel="">article on Leapp for a great example for local dev workflows</a>)</p>
<p>However, practically, you might have services or apps that you need to manage that the cost of setting all that up is very high, for example you do the majority of your work in AWS, but you have a development Kubernetes cluster and want to setup a limited service account to do some Gitpod stuff.
You use this service account for limited scope permissions for deployments only, and this might be a great case of just embedding the kubeconfig directly into a Pulumi plan.</p>
<p>Maybe you need your PAT embedded for a provider, now just add as an encrypted value to your stack and get work shipped.</p>
<p>Improve later with more robust handling, but this will cut down the overhead of getting infra-as-code for a lot of the smaller projects!</p>
<h2 id="futher-reading" class="headerLink">
    <a href="#futher-reading" class="header-mark"></a>Futher Reading</h2><ul>
<li><a href="https://www.pulumi.com/docs/intro/concepts/secrets/" target="_blank" rel="noopener noreferrer">Pulumi &amp; Secrets</a></li>
</ul>
<h2 id="tools-used-or-mentioned" class="headerLink">
    <a href="#tools-used-or-mentioned" class="header-mark"></a>Tools Used Or Mentioned</h2><ul>
<li><a href="https://www.pulumi.com/" target="_blank" rel="noopener noreferrer">Pulumi</a></li>
<li><a href="https://github.com/itchyny/gojq" target="_blank" rel="noopener noreferrer">Gojq</a></li>
<li><a href="https://copilot.github.com/" target="_blank" rel="noopener noreferrer">Copilot - It actually wrote 50% of the shell script example. I ❤️ Copilot</a></li>
<li><a href="https://linux.die.net/man/1/base64" target="_blank" rel="noopener noreferrer">base64 cli</a></li>
<li><a href="https://kubernetes.io/" target="_blank" rel="noopener noreferrer">Kubernetes</a></li>
<li><a href="https://www.pulumi.com/docs/intro/concepts/config/#structured-configuration" target="_blank" rel="noopener noreferrer">Pulumi Structured Configuration</a> &amp; associated Go Package: <a href="https://github.com/pulumi/pulumi/tree/master/sdk/go/pulumi/config" target="_blank" rel="noopener noreferrer">Config</a></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go Templates With Kubectl
    </title>
    <link>
        https://www.sheldonhull.com/go-templates-with-kubectl/
    </link>
    <pubDate>
        Thu, 10 Mar 2022 19:13:52 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-templates-with-kubectl/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>An alternative to using jsonpath with kubectl is go templates!</p>
<p>Try switching this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl get serviceaccount myserviceaccount --context supercoolcontext --namespace themagicalcloud -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.secrets[0].name}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="sb">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">To this and it should work just the same.
</span></span><span class="line"><span class="cl">Since I know go templates pretty well, this is a good alternative <span class="k">for</span> jsonpath syntax.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sb">````</span>shell
</span></span><span class="line"><span class="cl">kubectl get serviceaccount myserviceaccount --context supercoolcontext --namespace themagicalcloud -o go-template<span class="o">=</span><span class="s1">&#39;{{range .secrets }}{{.name}}{{end}}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="sb">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Further reading:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- <span class="o">[</span>List Container images using a go-template instead of jsonpath<span class="o">](</span>https://kubernetes.io/docs/tasks/access-application-cluster/list-all-running-container-images/#list-container-images-using-a-go-template-instead-of-jsonpath<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Pulumi Round 2
    </title>
    <link>
        https://www.sheldonhull.com/pulumi-round-2/
    </link>
    <pubDate>
        Fri, 28 Jan 2022 19:40:41 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/pulumi-round-2/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>This is not a comprehensive article, but more a log of the issues and wins as I work through Pulumi adoption.</p>
<h2 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>tl;dr</h2><ul>
<li>Pulumi is pretty powerful.</li>
<li>Once you get beyond the basics, it requires a lot of effort since the tooling doesn&rsquo;t have as many examples as I&rsquo;d hope.
This is especially true for Kubernetes.
It&rsquo;s a lot easier to get moving on other providers.</li>
<li>It&rsquo;s more intensive of a pilot to do complex things IMO than Terraform, because you aren&rsquo;t getting pre-built modules that just have all the stack done automatically (at least in Go).<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Certain things that were painful in Terraform just work in Pulumi.
For example, renaming the underlying org was super easy, removing stuck items from state, and other actions that with Terraform are much trickier.</li>
</ul>
<h2 id="where-i-started" class="headerLink">
    <a href="#where-i-started" class="header-mark"></a>Where I Started</h2><ul>
<li>I have replicated basically what Helm gives you for an external api template out of the box and am doing this in Pulumi.</li>
<li>This uses the Pulumi config and loads into a config struct.</li>
<li>I&rsquo;m running CICD with this to build and deploy a container, and finally run a task to run Pulumi against a Kubernetes cluster to apply an updated deployment based on that new semver tag.</li>
</ul>
<h2 id="challenge-1-authenticating-via-k8-namespace-scoped-service-account" class="headerLink">
    <a href="#challenge-1-authenticating-via-k8-namespace-scoped-service-account" class="header-mark"></a>Challenge 1: Authenticating Via K8 Namespace Scoped Service Account</h2><p>Figuring out the balance between default provider that inherits your Kubeconfig and being more explicit by configuring this myself has been a challenge.</p>
<p>I took two days to work through the proper Service account level authorization, but finally with the help of a little <a href="https://github.com/magefile/mage" target="_blank" rel="noopener noreferrer">Mage</a> I have a running login task that wraps up a sequence of steps for me to authenticate purely based on K8 Service account credentials.</p>
<ul>
<li>TODO: Also plan on checking out the Azure Key Vault integration, as this is pretty neat. You can set it as the backend provider for your secret rather than Pulumi.</li>
</ul>
<h3 id="attempting-to-embed-service-account-credentials-in-stack" class="headerLink">
    <a href="#attempting-to-embed-service-account-credentials-in-stack" class="header-mark"></a>Attempting to Embed Service Account Credentials in Stack</h3><p>Pulumi does per stack level encryption of secrets, so I thought this might be really nice to setup and try.
This would mean any of my team could run the plan with the specific service account credentials already embedded to quickly apply a development fix or test against a development enviornment.</p>
<p>This is in constrast this to building a kubeconfig locally and pointing to that.
That works, but does feel more brittle.</p>
<p>I tried this:</p>
<pre><code>pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev config set --secret --path 'kubernetes:kubeconfig' &quot;$(cat /workspaces/myproject/.cached/.kube/tmp.kube.config)&quot;
</code></pre>
<blockquote>
<p>NOTE: Optionally use without <code>--path</code>.</p>
</blockquote>
<p>This temporary configuration I generated via the kubectl commands for setup.</p>
<p>Now I see:</p>
<pre><code>config:
    kubernetes:cluster: mycluster
    kubernetes:context: mycontext
    kubernetes:kubeconfig:
        secure: mysupersecretencryptedvaluebyPulumipus
</code></pre>
<p>Next I made some changes to the Pulumi plan that checked for <code>KUBECONFIG</code> and allowed the override as usual, however if not provided it defaulted to the value stored in the configuration.
Will think on that and probably remove the extra code later.</p>
<p>Didn&rsquo;t get this to work, so I reverted back to passing in the generated kubeconfig file instead.
This was set by a command like this:</p>
<pre><code>pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev config set --path 'kubernetes:kubeconfig' /workspaces/myproject/.cached/.kube/tmp.kube.config
</code></pre>
<p>Failure.</p>
<p>I still kept getting the dreaded:</p>
<pre><code>configured Kubernetes cluster is unreachable: failed to parse kubeconfig data in kubernetes:config:kubeconfig
</code></pre>
<p>I tried <code>KUBECONFIG=/workspaces/myproject/.cached/.kube/tmp.kube.config pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev up --diff</code> and it detected the new <code>kubernetes:kubeconfig</code> and put in the state.</p>
<p>✅ BOOM! Once I did this refresh of the state, it seemed to properly allow me to connect.</p>
<p>I found that ensuring <code>KUBECONFIG=path pulumi ...</code> helped a lot, but I think the KUBECONFIG path in the state file also mattered and had to be refreshed.</p>
<p>Ok&hellip; to ensure this was the issue I did this test:</p>
<ol>
<li>Stop using my credential and point to the service account generated kubeconfig.</li>
<li>Run <code>KUBECONFIG={newkubeconfig} pulumi destroy</code>.
<ol>
<li>It detected the change when running up, I just didn&rsquo;t apply.</li>
</ol>
</li>
<li>Deletion worked.</li>
</ol>
<p>To me this points towards the <code>KUBECONFIG</code> correctly being used when passed into the provider, so I can run without refreshing the state even though a refresh/up will indicated it detected the change.</p>
<p>I probably need to trim this code, but to support KUBECONFIG explicitly being provided I did something like this:</p>
<script src="https://gist.github.com/sheldonhull/764d2702bf9e783fca0263bbabd598a7.js"></script>

<h2 id="challenge-handle-config-values-that-change" class="headerLink">
    <a href="#challenge-handle-config-values-that-change" class="header-mark"></a>Challenge: Handle config values that change</h2><p>I thought maybe I could dynamically set the kubeconfig at runtime using the <code>--config</code> flag.
I looked in the GitHub repo and couldn&rsquo;t find any examples, and the cli doesn&rsquo;t provide any I could see.</p>
<p>Here&rsquo;s a little taste of what I ran:</p>
<pre><code>    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig /workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig' '/workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig: /workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig','/workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig,/workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig' /workspaces/myproject/.cached/.kube/tmp.kube.config
    Pulumi up --diff --refresh --config '{ &quot;kubernetes:kubeconfig&quot;: /workspaces/myproject/.cached/.kube/tmp.kube.config
    Pulumi up --diff --refresh --config '{ &quot;kubernetes:kubeconfig&quot;: &quot;/workspaces/myproject/.cached/.kube/tmp.kube.config&quot; }'
    Pulumi up --diff --refresh --config '&quot;kubernetes:kubeconfig&quot;: &quot;/workspaces/myproject/.cached/.kube/tmp.kube.config&quot;'
    Pulumi up --diff --refresh --config kubernetes:kubeconfig /workspaces/myproject/.cached/.kube/tmp.kube.config
</code></pre>
<p>The variety of changes this made the kubeconfig were entertaining at least.
I moved on, as this didn&rsquo;t seem to be a valid way to work.</p>
<p>Pretty sure the cli was laughing at me.</p>
<pre><code>    config:
        kubernetes:cluster: mycluster
        kubernetes:context: mycluster
        kubernetes:kubeconfig,/workspaces/myproject/.cached/.kube/tmp.kube.config: &quot;&quot;
        kubernetes:namespace: mynamespace
</code></pre>
<h2 id="challenge-how-do-i-use-replace" class="headerLink">
    <a href="#challenge-how-do-i-use-replace" class="header-mark"></a>Challenge: How Do I Use Replace?</h2><p>While mostly intuitive, the darn cli docs are missing some jump start examples.
I&rsquo;m pretty sure most of us want examples, and I&rsquo;d like to see exhaustive examples on the docs page.</p>
<p>I tried to force a replacement of a deployment:</p>
<pre><code>    pulumi up --diff --replace 'myproject-dev-deployment'    ❌ NOT FOUND
    pulumi up --diff --replace 'kubernetes:apps:Deployment'  ❌ NOT FOUND
</code></pre>
<blockquote>
<p><code>--replace stringArray</code> Specify resources to replace. Multiple resources can be specified using &ndash;replace urn1 &ndash;replace urn2 <a href="https://www.pulumi.com/docs/reference/cli/pulumi_up/" target="_blank" rel="noopener noreferrer">pulumi up docs</a></p>
</blockquote>
<p>Not sure of the urn, as I couldn&rsquo;t find in the state file.
Decided to go with destroy 🔥 and redeploy to be (not)safe.
Hey it&rsquo;s a dev environment after all!</p>
<h2 id="mapping-from-yaml" class="headerLink">
    <a href="#mapping-from-yaml" class="header-mark"></a>Mapping from Yaml</h2><p>Ran into an edge case. I set config values that had a slash.</p>
<pre><code>myconfig:
    subsection:
        io/foo: 123
</code></pre>
<p>This seemed to read all the zero values and couldn&rsquo;t obtain them.
I went and replaced all of these with a command like: <code>pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev config set --path 'data.podannotations.myservice.myport' 80</code>.</p>
<p>No luck.
Figured it might be something to do with maps, but I couldn&rsquo;t find anything with Go having issues with the key value having a slash or such.</p>
<p>Gave this a shot and 🎉 it worked.</p>
<pre><code>type MyConfig struct {
    Onlyyaml          bool   `yaml:&quot;onlyyaml&quot;`
    SpecialNested     struct {
        Enabled              bool   `yaml:&quot;enabled&quot;`
    } `yaml:&quot;specialnested,inline&quot;` // 👈 inline is needed
}
</code></pre>
<p>This parsed the value:</p>
<pre><code>config:
    specialnested:
        enabled: true
</code></pre>
<p>Now I know. I didn&rsquo;t see anything about using this when reading the docs, so that&rsquo;s another one that shows it requires expertise in both Pulumi + the native language to figure out what&rsquo;s wrong.</p>
<blockquote>
<p>Embedded structs are not treated as embedded in YAML by default. To do that add the &ldquo;,inline&rdquo; annotation below. <a href="https://pkg.go.dev/gopkg.in/yaml.v2#Unmarshal" target="_blank" rel="noopener noreferrer">Unmarshal for yaml.v2</a></p>
</blockquote>
<p>I couldn&rsquo;t find the exact package being used due to time, but it&rsquo;s possible that this was forked off the original package here: <a href="https://pkg.go.dev/github.com/pulumi/go-yaml" target="_blank" rel="noopener noreferrer">pulumi-go-yaml</a>.</p>
<h2 id="task-runner" class="headerLink">
    <a href="#task-runner" class="header-mark"></a>Task Runner</h2><p>I standardize all my projects, personal and work with Mage.</p>
<p>Was pretty easy to integrate with pulumi, even though their CLI is pretty awesome and easy to use..
However, I prefer all tools that aren&rsquo;t one off&rsquo;s have a simple standardized way to execute.</p>
<p>For me this entailed: <code>mage pulumi:diff myproject dev</code> and it ensured all the command line flags and such were setup.</p>
<p>I put some sample tasks on my magetools repo: <a href="https://github.com/sheldonhull/magetools/tree/main/examples/pulumi" target="_blank" rel="noopener noreferrer">Magetools - Examples - Pulumi</a>.</p>
<p>Some examples from that:</p>
<pre><code>// Pulumi namespace contains task to help with running Pulumi tools.
type Pulumi mg.Namespace

// Get returns the fully qualified Pulumi stack name, including the org, project, and stage.
// This looks like `myorg/project/stage`.
func GetPulumiStackName(project, stage string) string {
    mtu.CheckPtermDebug()
    return strings.Join([]string{PulumiOrg, project, stage}, &quot;/&quot;)
}


// 🚀 Up 👉 Parameters(project, stack string): Eg: `mage pulumi:up myproject dev`.
// Runs pulumi up/apply to target.
//
// Example: `mage pulumi:up myproject dev`.
func (Pulumi) Up(project, stage string) error {
    mtu.CheckPtermDebug()
    return sh.RunV(
        &quot;pulumi&quot;,
        &quot;--cwd&quot;,
        filepath.Join(PulumiProjectDir, project),
        &quot;--stack=&quot;+GetPulumiStackName(project, stage),
        &quot;up&quot;,
        &quot;--yes&quot;,
        &quot;--emoji&quot;,
    )
}
</code></pre>
<h2 id="my-feedback" class="headerLink">
    <a href="#my-feedback" class="header-mark"></a>My Feedback</h2><ul>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> Provide several examples for using the flags, such as <code>--config</code> as I couldn&rsquo;t figure out how to pass the string array in a way that made sense.</li>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> I&rsquo;ve seen others post on issues as well about confusion with the provider. Much of the examples rely on the default provider.
For me that was problematic when I wanted to try and work locally but then use a service account credential only for pulumi to test.
Make some more examples on how to easily do that.</li>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> Provide help on Stack Overflow, Github Discussions, or a dedicated discourse to promote visibility and knowledge resharing on solutions. Preference would be Github discussions as it&rsquo;s easy to find help inline with issues.
Slack is a terrible place to find info in comparison and responses can be erratic and slow (which I get considering how stretched everyone must be!)</li>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> Maybe the logger makes sense for automation api or something else, but I&rsquo;d love to see the default logger support structured logging (say through zerolog) or something a bit less clunky.
Having to replace the string values like this made from some clunky logging code. <code>_ = ctx.Log.Error(fmt.Sprintf(&quot;Unable to read Kubeconfig override: %q, %v&quot;, kubeConfigOverride, err), nil)</code>.
I&rsquo;d like to just call: <code>pulumi.Log.Info().Str(&quot;myval&quot;,strval).Msg(&quot;this is important&quot;)</code>.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>They are making progress on this with Crosswalk, but Go isn&rsquo;t in there at this time.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Dagger
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/go/dagger/
    </link>
    <pubDate>
        Mon, 01 Jan 0001 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/go/dagger/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p><a href="https://dagger.io?ref=sheldonhull.com" target="_blank" rel="noopener noreferrer">Containerized magic with Go and BuildKit</a></p>
<p>I will soon put some experience notes here, as I&rsquo;ve successfully built Angular and Nginx containers with it, which was a great experience.
With the upcoming service support, I can foresee even more use cases.</p>
<div
    class="details admonition example"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-list-ol fa-fw"
      ></i>
      Example of Building an Angular Project
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Using mage, here&rsquo;s a demonstration of invoking Mage to build an Angular project without any Angular tooling installed locally.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">AngularVersion</span> <span class="p">=</span> <span class="s">&#34;15&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build runs the Angular build via Dagger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">Dagger</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">WithLogOutput</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pterm</span><span class="p">.</span><span class="nx">Error</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;unable to connect to dagger: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">homedir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">UserHomeDir</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Container</span><span class="p">().</span><span class="nf">From</span><span class="p">(</span><span class="s">&#34;node:lts-alpine&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithMountedDirectory</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">,</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Host</span><span class="p">().</span><span class="nf">Directory</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithWorkdir</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">path</span> <span class="o">:=</span> <span class="s">&#34;dist/&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;npm&#34;</span><span class="p">,</span> <span class="s">&#34;install&#34;</span><span class="p">,</span> <span class="s">&#34;-g&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;@angular/cli@%s&#34;</span><span class="p">,</span> <span class="nx">AngularVersion</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;ng&#34;</span><span class="p">,</span> <span class="s">&#34;config&#34;</span><span class="p">,</span> <span class="s">&#34;-g&#34;</span><span class="p">,</span> <span class="s">&#34;cli.warnings.versionMismatch&#34;</span><span class="p">,</span> <span class="s">&#34;false&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;ng&#34;</span><span class="p">,</span> <span class="s">&#34;v&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;npm&#34;</span><span class="p">,</span> <span class="s">&#34;ci&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;ng&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;--configuration&#34;</span><span class="p">,</span> <span class="s">&#34;production&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Copy &#34;dist/&#34; from container to host.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">Directory</span><span class="p">(</span><span class="nx">path</span><span class="p">).</span><span class="nf">Export</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<div
    class="details admonition example"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-list-ol fa-fw"
      ></i>
      Example of handling both local and CI private npm auth
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>This demonstrates how to handle both running in a CI context and a remote context by evaluating for a CI variable. If provided, this will return a CI system-generated <code>.npmrc</code>.
If not provided, the file from the home directory will be mounted into the build container.</p>
<p>Please note that this container is not for publishing; it&rsquo;s a build container which copies the <code>dist/</code> contents back to the project directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">npmrcFile</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">dagger</span><span class="p">.</span><span class="nx">Secret</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Bypass any mounting of npmrc, as CI tooling should update any private inline with current file here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;NPM_CONFIG_USERCONFIG&#34;</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pterm</span><span class="p">.</span><span class="nx">Info</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;[OVERRIDE] NPM_CONFIG_USERCONFIG: %s&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;NPM_CONFIG_USERCONFIG&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npmrcDir</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Dir</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;NPM_CONFIG_USERCONFIG&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// [DEFAULT] NPM config set from home/.npmrc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">npmrcFile</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Host</span><span class="p">().</span><span class="nf">Directory</span><span class="p">(</span><span class="nx">homedir</span><span class="p">,</span> <span class="nx">dagger</span><span class="p">.</span><span class="nx">HostDirectoryOpts</span><span class="p">{</span><span class="nx">Include</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;.npmrc&#34;</span><span class="p">}}).</span><span class="nf">File</span><span class="p">(</span><span class="s">&#34;.npmrc&#34;</span><span class="p">).</span><span class="nf">Secret</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Output error if npmrcFile doesn&#39;t exist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">homedir</span><span class="p">,</span> <span class="s">&#34;.npmrc&#34;</span><span class="p">));</span> <span class="nx">os</span><span class="p">.</span><span class="nf">IsNotExist</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;missing npmrc file&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithMountedSecret</span><span class="p">(</span><span class="s">&#34;/root/.npmrc&#34;</span><span class="p">,</span> <span class="nx">npmrcFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<div
    class="details admonition example"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-list-ol fa-fw"
      ></i>
      Building a Go App with Caching
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Using Mage and the excellent Chainguard Go builder image, this example shows how to build a binary for the current platform and architecture, while wrapping up the entire build process inside the Dagger engine.
The output goes to the standard <code>.artifacts</code> directory, which is typically included in all projects, and should be ignored by Git.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;path/filepath&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;runtime&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;dagger.io/dagger&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;github.com/magefile/mage/mg&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;github.com/pterm/pterm&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Build</span> <span class="nx">mg</span><span class="p">.</span><span class="nx">Namespace</span>  <span class="c1">// Build contains all the build-related Mage targets.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ArtifactDirectory</span> <span class="p">=</span> <span class="s">&#34;.artifacts&#34;</span>  <span class="c1">// ArtifactDirectory is a directory for project artifacts, and shouldn&#39;t be committed to source.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">PermissionUserReadWriteExecute</span> <span class="p">=</span> <span class="mi">0</span><span class="nx">o0700</span>  <span class="c1">// PermissionUserReadWriteExecute is the permissions for the artifact directory.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">TargetBuildDirectory</span> <span class="p">=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">ArtifactDirectory</span><span class="p">,</span> <span class="s">&#34;builds&#34;</span><span class="p">)</span>  <span class="c1">// TargetBuildDirectory is the directory where the build artifacts will be placed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 🔨 MyAppName builds the service using Dagger for the current system architecture.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Development notes: This is a fully containerized build, using Dagger. Requires Docker.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">Build</span><span class="p">)</span> <span class="nf">MyAppName</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pterm</span><span class="p">.</span><span class="nx">DefaultHeader</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Building with Dagger&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">buildThis</span> <span class="o">:=</span> <span class="s">&#34;./myApp/main.go&#34;</span> <span class="c1">// This is the specific file to build, could be an input variable/slice though
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">appName</span> <span class="o">:=</span> <span class="s">&#34;myApp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// create the target directory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">MkdirAll</span><span class="p">(</span><span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">TargetBuildDirectory</span><span class="p">,</span> <span class="nx">appName</span><span class="p">),</span> <span class="nx">PermissionUserReadWriteExecute</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// initialize Dagger client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">WithLogOutput</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// get reference to the local project
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">src</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Host</span><span class="p">().</span><span class="nf">Directory</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">cachedBuild</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CacheVolume</span><span class="p">(</span><span class="s">&#34;go-build-cache&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">cachedMod</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CacheVolume</span><span class="p">(</span><span class="s">&#34;go-mod-cache&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">modcache</span> <span class="o">:=</span> <span class="s">&#34;/nonroot/.cache/go-mod-cache&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">buildcache</span> <span class="o">:=</span> <span class="s">&#34;/nonroot/.cache/go-build-cache&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// get `golang` image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">golang</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Container</span><span class="p">().</span><span class="nf">From</span><span class="p">(</span><span class="s">&#34;cgr.dev/chainguard/go:latest&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;CGO_ENABLED&#34;</span><span class="p">,</span> <span class="s">&#34;0&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOOS&#34;</span><span class="p">,</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOARCH&#34;</span><span class="p">,</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOARCH</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOMODCACHE&#34;</span><span class="p">,</span> <span class="nx">modcache</span><span class="p">).</span> <span class="c1">// Attempt to optimize mod and build caching
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOCACHE&#34;</span><span class="p">,</span> <span class="nx">buildcache</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// mount cloned repository into `golang` image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">golang</span> <span class="p">=</span> <span class="nx">golang</span><span class="p">.</span><span class="nf">WithMountedDirectory</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">,</span> <span class="nx">src</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithWorkdir</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithMountedCache</span><span class="p">(</span><span class="nx">modcache</span><span class="p">,</span> <span class="nx">cachedMod</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithMountedCache</span><span class="p">(</span><span class="nx">buildcache</span><span class="p">,</span> <span class="nx">cachedBuild</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// define the application build command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">outputDirectory</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">TargetBuildDirectory</span><span class="p">,</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">outputFile</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">outputDirectory</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s-service&#34;</span><span class="p">,</span><span class="nx">appName</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="nx">golang</span> <span class="p">=</span> <span class="nx">golang</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">outputFile</span><span class="p">,</span> <span class="s">&#34;-ldflags&#34;</span><span class="p">,</span> <span class="s">&#34;-s -w&#34;</span><span class="p">,</span> <span class="s">&#34;-trimpath&#34;</span><span class="p">,</span> <span class="nx">buildThis</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// get reference to build output directory in container
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">output</span> <span class="o">:=</span> <span class="nx">golang</span><span class="p">.</span><span class="nf">Directory</span><span class="p">(</span><span class="nx">outputDirectory</span><span class="p">).</span><span class="nf">File</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s-service&#34;</span><span class="p">,</span><span class="nx">appName</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// write contents of container build/ directory to the host
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">Export</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">outputFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        goroutines
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/go/goroutines/
    </link>
    <pubDate>
        Mon, 01 Jan 0001 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/go/goroutines/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="resources" class="headerLink">
    <a href="#resources" class="header-mark"></a>Resources</h2><table>
<thead>
<tr>
<th>Resource</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://go.dev/doc/faq#closures_and_goroutines" target="_blank" rel="noopener noreferrer">Goroutines &amp; Closures</a></td>
<td>Important caveat on shadowing variable in loops included</td>
</tr>
<tr>
<td><a href="https://www.sheldonhull.com/go-r1-day-70/" target="_blank" rel="noopener noreferrer">Using uiprogress</a></td>
<td>Notes I wrote about trying threadsafe progress bar package</td>
</tr>
</tbody>
</table>
<h2 id="using-goroutines-with-cli-tools" class="headerLink">
    <a href="#using-goroutines-with-cli-tools" class="header-mark"></a>Using Goroutines with CLI Tools</h2><p>Running CLI tools via goroutines can speed up slow actions like code generation.
I prefer to run these types of actions with a buffered channel to throttle the requests and avoid overloading my laptop. 🔥</p>
<p>Here&rsquo;s an example using Pterm output for reporting progress (no progress bar)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p><a href="https://go.dev/play/p/1-XLUoLpBy4" target="_blank" rel="noopener noreferrer">Playground - Go :fontawesome-solid-link:</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="s">&#34;github.com/bitfield/script&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="s">&#34;github.com/pterm/pterm&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nx">pterm</span><span class="p">.</span><span class="nf">DisableColor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"> <span class="nx">concurrentLimit</span> <span class="o">:=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="kd">type</span> <span class="nx">runMe</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">title</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">  <span class="nx">command</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="nx">runCommands</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">runMe</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span><span class="nx">title</span><span class="p">:</span> <span class="s">&#34;commandtitle&#34;</span><span class="p">,</span> <span class="nx">command</span><span class="p">:</span> <span class="s">&#34;echo &#39;foo&#39;&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl"> <span class="nx">buffChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">concurrentLimit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">runCommands</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> <span class="nx">pterm</span><span class="p">.</span><span class="nx">Info</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;running cli [%d]&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">runCommands</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">runCommands</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">r</span> <span class="o">:=</span> <span class="nx">r</span>
</span></span><span class="line"><span class="cl">  <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">r</span> <span class="nx">runMe</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">buffChan</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">   <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">script</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">command</span><span class="p">).</span><span class="nf">Stdout</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pterm</span><span class="p">.</span><span class="nx">Error</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;[%s] unable to run: %s, err: %s&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">command</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pterm</span><span class="p">.</span><span class="nx">Success</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;[%s]&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="o">&lt;-</span><span class="nx">buffChan</span>
</span></span><span class="line"><span class="cl">  <span class="p">}(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Since things are running concurrently, a single bar isn&rsquo;t quite accurate. There are libraries that report correctly with goroutines, but as of 2023-03, pterm isn&rsquo;t one of them. However, it&rsquo;s under development.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Pre-Commit
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/go/pre-commit/
    </link>
    <pubDate>
        Mon, 01 Jan 0001 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/go/pre-commit/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="using-pre-commit-tooling" class="headerLink">
    <a href="#using-pre-commit-tooling" class="header-mark"></a>Using Pre-Commit Tooling</h2><p>Here&rsquo;s how to set up <a href="https://bit.ly/3szdwNf" target="_blank" rel="noopener noreferrer">pre-commit</a> for Go projects.</p>
<ol>
<li>Install <a href="https://bit.ly/2O9urag" target="_blank" rel="noopener noreferrer">pre-commit</a> for macOS: <code>brew install pre-commit</code> or see directions for curl/other options for WSL, Windows, Linux, etc.</li>
<li>Use the template from <a href="https://bit.ly/31w3gtk" target="_blank" rel="noopener noreferrer">TekWizely/pre-commit-golang: Pre-Commit hooks for Golang with support for Modules</a>
<ol>
<li>Several options are provided for <code>fmt</code> oriented commands.
Comment out any duplicates that do not apply.</li>
</ol>
</li>
<li>Finally, initialize the pre-commit hooks in your repo by running: <code>pre-commit install</code></li>
</ol>
<p>Validate that everything is working by running: <code>pre-commit run --all-files</code></p>
<p>Periodically, you can run <code>pre-commit autoupdate</code> to ensure that the latest version of the pre-commit hooks is upgraded.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Deep-Dive - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/deep-dive/</link>
        <description>Deep-Dive - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 11 Mar 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/deep-dive/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Debugging Type Binding in PowerShell
    </title>
    <link>
        https://www.sheldonhull.com/debugging-type-binding-in-powershell/
    </link>
    <pubDate>
        Mon, 11 Mar 2019 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/debugging-type-binding-in-powershell/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Some effort I spent in researching Type Binding in Stack Overflow to help answer a question by <a href="https://stackoverflow.com/users/106119/chris-oldwood" target="_blank" rel="noopener noreferrer">Chris Oldwood</a> helped me solidify my understanding of the best way to debug more  complicated scenarios such as this in PowerShell.</p>
<blockquote>
<p><a href="https://stackoverflow.com/q/53860403/68698" target="_blank" rel="noopener noreferrer">Why does this PowerShell function&rsquo;s default argument change value based on the use of . or &amp; to invoke a command within it? </a></p>
</blockquote>
<p>Spent some digging into this and this is what I&rsquo;ve observed.</p>
<p>First for clarity I do not believe that you should consider the NullString value the same as null in a basic comparison. Not sure why you need this either, as this is normally something I&rsquo;d expect from c# development. You should be able to just use <code>$null</code> for most work in PowerShell.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="vm">$null</span> <span class="o">-eq</span> <span class="p">[</span><span class="no">System.Management.Automation.Language.NullString</span><span class="p">]::</span><span class="n">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">write-host</span> <span class="s2">&#34;</span><span class="se">`$</span><span class="s2">null -eq [System.Management.Automation.Language.NullString]::Value&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">write-host</span> <span class="s2">&#34;</span><span class="se">`$</span><span class="s2">null -ne [System.Management.Automation.Language.NullString]::Value&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Secondly, the issue is not necessarily because of the call operator, ie <code>&amp;</code>. I believe instead you are dealing with underlying parameter binding coercion. Strong data typing is definitely a weak area for PowerShell, as even explicitly declared <code>[int]$val</code> could end up being set to a string type by PowerShell automatically in the next line when writing <code>Write-Host $Val</code>.</p>
<p>To identify the underlying behavior, I used the <code>Trace-Command</code> function (<a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/trace-command?view=powershell-6" target="_blank" rel="noopener noreferrer">Trace Command</a>) .</p>
<p>I changed the Use-Dot to just call the function as no write-host was needed to output the string.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Use-Ampersand</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="vm">$Null</span><span class="n">String</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Management.Automation.Language.NullString</span><span class="p">]::</span><span class="n">Value</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Format-Type</span> <span class="vm">$Null</span><span class="n">String</span>
</span></span><span class="line"><span class="cl">    <span class="p">&amp;</span><span class="n">cmd</span><span class="p">.</span><span class="py">exe</span> <span class="p">/</span><span class="n">c</span> <span class="n">exit</span> <span class="mf">0</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The Format-Type I modified to also use what is considered a better practice of <code>$null</code> on the left, again due to type inference.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Format-Type($v</span><span class="p">=</span> <span class="p">[</span><span class="no">System.Management.Automation.Language.NullString</span><span class="p">]::</span><span class="n">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="vm">$null</span>  <span class="o">-eq</span> <span class="nv">$v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="s1">&#39;(null)&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$v</span><span class="p">.</span><span class="py">GetType</span><span class="p">().</span><span class="py">FullName</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To narrow down the issue with the data types, I used the following commands, though this is not where I found insight into the issue. Theyh  when called directly worked the same.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Trace-Command</span> <span class="n">-Name</span> <span class="n">TypeConversion</span> <span class="n">-Expression</span> <span class="p">{</span> <span class="nb">Format-Type</span> <span class="vm">$Null</span><span class="n">String</span><span class="p">}</span> <span class="n">-PSHost</span>
</span></span><span class="line"><span class="cl"><span class="nb">Trace-Command</span> <span class="n">-Name</span> <span class="n">TypeConversion</span> <span class="n">-Expression</span> <span class="p">{</span> <span class="nb">Format-Type</span> <span class="p">([</span><span class="no">System.Management.Automation.Language.NullString</span><span class="p">]</span><span class="vm">$Null</span><span class="n">String</span><span class="p">)</span> <span class="p">}</span> <span class="n">-PSHost</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>However, when I ran the functions using TypeConversion tracing, it showed a difference in the conversions that likely explains some of your observed behavior.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Trace-Command</span> <span class="n">-Name</span> <span class="n">TypeConversion</span>  <span class="n">-Expression</span> <span class="p">{</span> <span class="nb">Use-Dot</span><span class="p">}</span> <span class="n">-PSHost</span>
</span></span><span class="line"><span class="cl"><span class="nb">Trace-Command</span> <span class="n">-Name</span> <span class="n">TypeConversion</span>  <span class="n">-Expression</span> <span class="p">{</span> <span class="nb">Use-Ampersand</span><span class="p">}</span> <span class="n">-PSHost</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># USE DOT</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>  <span class="n">Converting</span> <span class="s2">&#34;&#34;</span> <span class="n">to</span> <span class="s2">&#34;System.String&#34;</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>      <span class="n">Converting</span> <span class="n">object</span> <span class="n">to</span> <span class="n">string</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>  <span class="n">Converting</span> <span class="s2">&#34;&#34;</span> <span class="n">to</span> <span class="s2">&#34;System.Object&#34;</span><span class="p">.</span> <span class="p">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>  <span class="n">Converting</span> <span class="s2">&#34;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL&#34;</span> <span class="n">to</span> <span class="s2">&#34;System.String&#34;</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>      <span class="n">Result</span> <span class="nb">type </span><span class="n">is</span> <span class="n">assignable</span> <span class="n">from</span> <span class="n">value</span> <span class="n">to</span> <span class="n">convert</span><span class="err">&#39;</span><span class="n">s</span> <span class="nb">type
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>OUTPUT: (null)</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># Use-Ampersand</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span> <span class="n">Converting</span> <span class="s2">&#34;&#34;</span> <span class="n">to</span> <span class="s2">&#34;System.String&#34;</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>     <span class="n">Converting</span> <span class="n">object</span> <span class="n">to</span> <span class="n">string</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span> <span class="n">Converting</span> <span class="s2">&#34;&#34;</span> <span class="n">to</span> <span class="s2">&#34;System.String&#34;</span><span class="p">.</span> <span class="p">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>     <span class="n">Converting</span> <span class="n">null</span> <span class="n">to</span> <span class="s2">&#34;&#34;</span><span class="p">.</span>        <span class="p">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span> <span class="n">Converting</span> <span class="s2">&#34;.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.CPL&#34;</span> <span class="n">to</span> <span class="s2">&#34;System.String&#34;</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">DEBUG</span><span class="err">:</span> <span class="n">TypeConversion</span> <span class="n">Information</span><span class="err">:</span> <span class="mf">0</span> <span class="err">:</span>     <span class="n">Result</span> <span class="nb">type </span><span class="n">is</span> <span class="n">assignable</span> <span class="n">from</span> <span class="n">value</span> <span class="n">to</span> <span class="n">convert</span><span class="err">&#39;</span><span class="n">s</span> <span class="nb">type
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>OUTPUT: System.String</code></p>
<p>The noticeable difference is in <code>Use-Ampersand</code> it shows a statement of <code>Converting null to &quot;&quot;</code> vs <code>Converting &quot;&quot; to &quot;System.Object&quot;</code>.</p>
<p>In PowerShell, <code>$null &lt;&gt; [string]''</code>. An empty string comparison will pass the null check, resulting in the success of outputting <code>GetType()</code>.</p>
<h1 id="a-few-thoughts-on-approach-with-powershell" class="headerLink">
    <a href="#a-few-thoughts-on-approach-with-powershell" class="header-mark"></a>A Few Thoughts On Approach With PowerShell</h1><p>Why it&rsquo;s doing this, I&rsquo;m not certain, but before you invest more time researching, let me provide one piece of advice based on learning the hard way.</p>
<p><em>If start dealing with issues due to trying to coerce data types in PowerShell, first consider if PowerShell is the right tool for the job</em></p>
<p>Yes, you can use type extensions. Yes, you can use .NET data types like <code>$List = [System.Collections.Generic.List[string]]::new()</code> and some .NET typed rules can be enforced. However, PowerShell is not designed to be a strongly typed language like C#. Trying to approach it like this will result in a many difficulties. While I&rsquo;m a huge fan of PowerShell, I&rsquo;ve learned to recognize that it&rsquo;s flexibility should be appreciated, and it&rsquo;s limits respected.</p>
<p>If I really had issues that required mapping <code>[System.Management.Automation.Language.NullString]::Value</code> so strongly, I&rsquo;d consider my approach.</p>
<p>That said, this was a challenging investigation that I had to take a swing at, while providing my 10 cents afterwards.</p>
<h1 id="other-resources" class="headerLink">
    <a href="#other-resources" class="header-mark"></a>Other Resources</h1><p>After posting my answer, I found another <a href="https://stackoverflow.com/a/51354791/68698" target="_blank" rel="noopener noreferrer">answer</a> that seemed relevant, and also backs up the mentioning of not using <code>[NullString]</code> normally, as its usage in PowerShell is not really what it was designed for.</p>
<p><em>Stackoverflow specific content republished under CC-BY-SA</em></p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Utilizing the power of table parameters to reduce IO, improve performance, decrease pollution, and achieve world peace...
    </title>
    <link>
        https://www.sheldonhull.com/utilizing-the-power-of-table-parameters-to-reduce-io-improve-performance-decrease-pollution-and-achieve-world-peace/
    </link>
    <pubDate>
        Thu, 30 Apr 2015 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/utilizing-the-power-of-table-parameters-to-reduce-io-improve-performance-decrease-pollution-and-achieve-world-peace/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>I was dealing with a challenging dynamic sql procedure that allowed a .NET app to pass in a list of columns and a view name, and it would generate a select statement from this view. Due to requirements at the time, I needed the flexibility of the &ldquo;MAIN&rdquo; proc which generated a dynamic select statement, while overriding certain requested views by executing a stored proc instead of the dynamic sql.</p>
<p>During this, I started looking into the string parsing being completed for a comma delimited list of numbers to lookup (the primary key). I figured I&rsquo;d explore the benefits of the user defined table and pass through the list of ids from the .NET application with a table parameter instead of using comma delimited list. <a href="http://www.sommarskog.se/arrays-in-sql-2008.html#Performance_Considerations" target="_blank" rel="noopener noreferrer">Some great material</a></p>
<p>I came across indicated the overhead might be a little more client side, but that the benefits to cardinality estimation and providing SQL Server a table to work with can far outweigh the initial startup cost when dealing with lots of results to join against. The main area I wanted to address first, that I couldn&rsquo;t find any clear documentation on was the memory footprint. I saw mention on various sources that a TVP can have a lower memory footprint in SQL Server&rsquo;s execution due to the fact as intermediate storage it can be pointed at by reference, rather than creating a new copy each time, like when working with parsing into another variable using comma delimited lists.</p>
<p>I get that passing the stored proc a table variable means it&rsquo;s working with provided object, but what about the portability of this object? In my case, there are at least 2 levels being worked. The MAIN proc and the CHILD proc. The child proc needs access to the same list of ids. The dynamic statement in the MAIN proc also needs the list of ids. Currently it was creating the list of ids by inserting into a table parameter the delimited list of values.</p>
<p>Could I instead consider passing the actual table parameter around since it&rsquo;s by a readonly object and hopefully keep referring to it, instead of having separate copies being created each time. This could reduce the IO requirements and tempdb activity by having a single TVP being used by the MAIN and CHILD procs.
<figure><a class="lightgallery" href="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_56_17_xkvtbz.png" title="TVP Testing 2" data-thumbnail="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_56_17_xkvtbz.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_52_10_bxzrlg.png" title="TVP Testing 3" data-thumbnail="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_52_10_bxzrlg.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_58_30_j7k6u3.png" title="TVP Testing 4" data-thumbnail="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_58_30_j7k6u3.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_52_10_bxzrlg.png" title="TVP Testing 5" data-thumbnail="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-30_09_52_10_bxzrlg.png">
        
    </a></figure>
Summarized IO:
<figure><a class="lightgallery" href="/images/-2015-04-30_09_06_36_s37z0t.png" title="TVP Testing 1" data-thumbnail="/images/-2015-04-30_09_06_36_s37z0t.png">
        
    </a></figure>
The footprint is reduced when dealing with IO from the child statement, because it keeps pointing to the same in memory object. I also validated this further by examining a more complex version of the same query that compares the comma delimited list against executing a nested stored procedure, which in turn has dynamic sql that needs the table parameter passed to it. The results of the review show successfully that it keeps pointing to the same temp object!
<figure><a class="lightgallery" href="/images/Miscellaneous_Files_-_Testing_New_Stored_Proc_with_Debug.sql_--2015-04-30_10_06_40_ojiues.png" title="TVP Test 6" data-thumbnail="/images/Miscellaneous_Files_-_Testing_New_Stored_Proc_with_Debug.sql_--2015-04-30_10_06_40_ojiues.png">
        
    </a></figure></p>
<p>In summary, the table valued parameter can end up being pretty powerful when dealing with passing a list of values that may need to be referenced by several actions or passed to nested procs (not that this is the best practice anyway). Disclaimer: this is working with the constraints of what I have to release soon, so not saying that nested procs with dynamic sql in both MAIN and CHILD are a great practice, but sometimes you gotta do what you gotta do!</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

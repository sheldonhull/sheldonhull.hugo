<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Api - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/api/</link>
        <description>Api - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 20 Aug 2020 14:00:00 -0500</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/api/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Go R1 Day 4
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-d004/
    </link>
    <pubDate>
        Thu, 20 Aug 2020 14:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-d004/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="day-4-of-100" class="headerLink">
    <a href="#day-4-of-100" class="header-mark"></a>Day 4 of 100</h2><h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><ul>
<li>In the last week some more Pluralsight Go (Nigel&rsquo;s courses are always stellar)</li>
<li>I&rsquo;ve done some odd work as had time in between last update, but nothing structured. Might continue with <code>learn-go-with-tests</code> but also came across <a href="https://exercism.io/tracks/go" target="_blank" rel="noopener noreferrer">exercism</a> and might tackle that soon as well.</li>
<li>Setup new project in Visual Studio Codespaces</li>
<li>Used Serverless Framework to generate <code>aws-go</code> template project</li>
<li>Imported <code>aws-go-sdk</code> resources for AWS SSM Secrets Manager</li>
<li>Grabbed SSM Secrets manager output and used to create a POST request for authorization token</li>
<li>Used DumpRequest to pretty print output for debugging purpose</li>
<li>Hung my head in shame at my copy pasta project üòÄ</li>
<li>Realized half of the battle is just getting my lambda debugging effort running locally. Not exactly the easiest starter project.</li>
<li>Need to master different request types. PowerShell makes this easy with Invoke-RestMethod and object construction. I found that the <code>Post</code> method wasn&rsquo;t appropriate as I wanted to control custom headers. This required me to use a different approach, which I ended up doing with <code>http.Client{}</code>.</li>
<li>Not sure in a Go Playground sample to test and echo a post request. Thinking if no service that does this might try creating a Go routine to accept the request locally and echo for the purpose of a demo. Any suggestions welcome.</li>
<li>Identified i really need better understanding of the godoc libraries as would help a lot. Vscode intellisense even in codespaces isn&rsquo;t performing great, so I&rsquo;m not getting that help that would really expedite discovery as a beginner. I might give my EAP Goland install a try and see if it helps.</li>
<li>Successfully included <code>zap</code> logging library</li>
<li>Successfully submitted request for authorization token and got response back into a struct, something that as a newbie I found a major win üéâ using <code>json.Unmarshal([]byte(body), ar)</code> with <code>ar</code> referring to a pointer another win for me as new to pointers) being passed in like below:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// AuthResponse the authorization object returned by taco service when doing fancy things
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">AuthResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MagicalToken</span> <span class="kt">string</span> <span class="s">`json:&#34;magical_token&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ExpiresIn</span>    <span class="kt">int</span>    <span class="s">`json:&#34;expires_in&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">ar</span> <span class="nx">AuthResponse</span>
</span></span><span class="line"><span class="cl">	<span class="nf">getToken</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ar</span><span class="p">)</span> <span class="c1">// pointer for the win ‚ö°Ô∏è
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getToken</span><span class="p">(</span><span class="nx">ar</span> <span class="o">*</span><span class="nx">AuthResponse</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">body</span><span class="p">),</span> <span class="nx">ar</span><span class="p">)</span> <span class="c1">// ‚ùì using bytes for json is new to me. gotta learn more
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sugar</span><span class="p">.</span><span class="nf">Infow</span><span class="p">(</span><span class="s">&#34;Logging library with zap used to generate structured logs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;authResponse&#34;</span><span class="p">,</span> <span class="nx">ar</span><span class="p">,</span>  <span class="c1">// trailing quotes is the norm, also a new pattern for me
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="links" class="headerLink">
    <a href="#links" class="header-mark"></a>links</h2><ul>
<li><a href="https://golang.org/pkg/net/http/#Client.Do" target="_blank" rel="noopener noreferrer">http client.do</a></li>
<li><a href="https://golang.org/pkg/net/http/httputil/#DumpRequest" target="_blank" rel="noopener noreferrer">DumpRequest</a></li>
<li><a href="https://www.serverless.com/framework/docs/getting-started" target="_blank" rel="noopener noreferrer">serverless-framework</a></li>
<li><a href="https://httpbin.org" target="_blank" rel="noopener noreferrer">httpbin.org</a></li>
<li><a href="https://github.com/uber-go/zap" target="_blank" rel="noopener noreferrer">zap</a></li>
<li><a href="https://mholt.github.io/json-to-go/" target="_blank" rel="noopener noreferrer">json-to-go</a></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        HTTP
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/go/http/
    </link>
    <pubDate>
        Mon, 01 Jan 0001 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/go/http/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="anonymous-server" class="headerLink">
    <a href="#anonymous-server" class="header-mark"></a>Anonymous Server</h2><p>MacOS will throw firewall alerts to allow connectivity every time a binary is run that doesn&rsquo;t provide the server address.</p>
<ul>
<li>‚ùå What throws the error: <code>http.ListenAndServe(&quot;:&quot;+port, nil)</code></li>
<li>‚úîÔ∏è What doesn&rsquo;t throw an error: <code>http.ListenAndServe(&quot;127.0.0.1:&quot;+port, nil)</code></li>
</ul>
<p>While this might be problematic to iron out as a variable if running inside a Docker container needing to talk to the host, it works well for running the binary locally without much change.
If you are running inside Docker and need 127.0.0.1 to resolve to the host directly, then you&rsquo;ll need to handle that differently.
See <a href="https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host" target="_blank" rel="noopener noreferrer">I want to connect from a container to a service on the host</a>.</p>
<p>I ran this problem through chatGPT and it provided a nice explanation.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<div
    class="details admonition note"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      chatgpt answers: macOS and anonymous server for local testing
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>The reason why you are seeing a pop-up alert on macOS when using http.ListenAndServe(&quot;:&quot;+port, nil) is that when you use a port number without specifying an IP address, the Go HTTP server listens on all available network interfaces on the local machine, including the loopback address (127.0.0.1), which is used for communication within the same machine.</p>
<p>When a process listens on a network interface, it is bound to that interface and can receive incoming connections from other machines on the network. In the case of the loopback interface, however, it can only receive connections originating from the same machine, and macOS security policies require user approval before allowing incoming connections to loopback addresses.</p>
<p>When you specify an IP address like 127.0.0.1 explicitly, you are telling the server to only listen on that specific network interface, which macOS recognizes as a safe and expected behavior and does not generate an alert.</p>
<p>To avoid the pop-up alert when using http.ListenAndServe(&quot;:&quot;+port, nil), you can add your application to the list of trusted applications in the macOS Firewall settings, or use http.ListenAndServe(&ldquo;127.0.0.1:&quot;+port, nil) to explicitly listen on the loopback interface.</p>
</div>
    </div>
  </div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This is an incredible example of it jump-starting debugging efforts. The level of effort to get a quick answer was much faster than Google. While it may &ldquo;hallucinate&rdquo;, this is a good example of quick information that can help and let you move on.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Azure-Devops - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/azure-devops/</link>
        <description>Azure-Devops - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 14 Jun 2022 09:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/azure-devops/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Check Azure Devops Pr for Conventional Commit Title
    </title>
    <link>
        https://www.sheldonhull.com/check-azure-devops-pr-for-conventional-commit-title/
    </link>
    <pubDate>
        Tue, 14 Jun 2022 09:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/check-azure-devops-pr-for-conventional-commit-title/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="conventional-commit" class="headerLink">
    <a href="#conventional-commit" class="header-mark"></a>Conventional Commit</h2><ul>
<li>Is it needed&hellip; No.</li>
<li>Is it the only way&hellip; No.</li>
<li>Is consistency better than inconsistentcy, mostly yes.</li>
</ul>
<p>I&rsquo;ve used conventional commit most of my career and it&rsquo;s a fine basic standard, even if sometimes it feels strange as you get used to it.
I think it&rsquo;s far better than inconsistency and is common enough with tooling you can do some nice release, changelog, and versioning with it.</p>
<p>However, getting folks used to it can be tricky.
I&rsquo;m a big believer in don&rsquo;t ask folks to remember a bunch of &ldquo;conventions&rdquo; and just codify with linters, pre-commit, and CI checks.
This eliminates policing and changing a standard just becomes a PR with proposed changes.</p>
<p>GitHub has a lot of actions that help check and prompt for fixes on this, but Azure DevOps doesn&rsquo;t.</p>
<p>I created an Azure Pipeline task with a little adhoc powershell that works well and helps prompt for more consistency in the creation of consistent titles.</p>
<h2 id="powershell-code" class="headerLink">
    <a href="#powershell-code" class="header-mark"></a>PowerShell code</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="p">{</span> <span class="p">&amp;</span><span class="n">commitlint</span> <span class="p">-</span><span class="n">-version</span> <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">commitlint</span> <span class="n">-g</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Write-Host</span> <span class="s2">&#34;Validating PR Title matches what&#39;s acceptable in project (should have a .commitlintrc.yml in your project to use this)...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$result</span> <span class="p">=</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$ENV:PR_TITLE</span> <span class="p">|</span> <span class="n">commitlint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nv">$LASTEXITCODE</span> <span class="o">-eq</span> <span class="mf">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nv">$result</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-Skip</span> <span class="mf">1</span> <span class="p">|</span>  <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;‚úñ&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Write-Host</span> <span class="s2">&#34;##vso[task.logissue type=error]</span><span class="nv">$_</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nb">Write-Host</span> <span class="s2">&#34;##[info]</span><span class="nv">$_</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Write-Host</span> <span class="s2">&#34;##vso[task.logissue type=error]Topic should be in the form of &#39;type(scope): lower case title &lt; 120 characters&#39; (please note colon after scope has no spaces)&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">exit</span> <span class="mf">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">Write-Host</span> <span class="s2">&#34;‚úÖ PR Title looks good. Nice work! üëç&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Plug this into a template in an dedicated azure pipelines template repository for easy reuse in many repos.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">job</span><span class="p">:</span><span class="w"> </span><span class="l">checkconventionalcommitprtitle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">check-conventional-commit-pr-title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeoutInMinutes</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cancelTimeoutInMinutes</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">checkout</span><span class="p">:</span><span class="w"> </span><span class="l">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">fetchDepth</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="c"># Shallow fetch to optimize performance if template repo gets larger</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">bash</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          PR_TITLE=&#34;$(curl --silent -u azdo:$SYSTEM_ACCESSTOKEN \
</span></span></span><span class="line"><span class="cl"><span class="sd">          $(System.CollectionUri)_apis/git/repositories/$(Build.Repository.ID)/pullRequests/$(System.PullRequest.PullRequestId)?api-version=5.1 \
</span></span></span><span class="line"><span class="cl"><span class="sd">          | jq -r .title)&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo &#34;##vso[task.setvariable variable=Pr.Title]$PR_TITLE&#34;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">SYSTEM_ACCESSTOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">$(System.AccessToken)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">get-pull-request-title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="l">and(succeeded(), eq(variables[&#39;Build.Reason&#39;], &#39;PullRequest&#39;))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          &lt;PUT THE POWERSHELL CODE HERE&gt;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">check-conventional-commit-pr-title</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">failOnStderr</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ignoreLASTEXITCODE</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>To require this on a PR, you can setup a policy on merges to your trunk.
I normally manage this with terraform, so here&rsquo;s a hint to get you started.
Managing your Azure DevOps configuration, builds, and pipelines with Terraform or Pulumi is a far nicer way to keep things maintainable and scale up as more are added.</p>
<p>This sets up your base configuration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">terraform</span> {
</span></span><span class="line"><span class="cl">  <span class="k">required_providers</span> {
</span></span><span class="line"><span class="cl"><span class="n">    azuredevops</span> <span class="o">=</span> {
</span></span><span class="line"><span class="cl"><span class="n">      source</span>  <span class="o">=</span> <span class="s2">&#34;microsoft/azuredevops&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">      version</span> <span class="o">=</span> <span class="s2">&#34;0.2.1&#34;</span>
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"><span class="k">data</span> <span class="s2">&#34;azuredevops_project&#34; &#34;projname&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  name</span> <span class="o">=</span> <span class="s2">&#34;MyProjectName&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">data</span> <span class="s2">&#34;azuredevops_git_repository&#34; &#34;myrepo&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  project_id</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_project</span><span class="p">.</span><span class="k">projname</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">  name</span>       <span class="o">=</span> <span class="s2">&#34;MyRepoName&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next, you&rsquo;ll want to register the pipeline as a valid pipeline to show up linked to the yaml.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">resource</span> <span class="s2">&#34;azuredevops_build_definition&#34; &#34;ci-projname-check-pr-title&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  project_id</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_project</span><span class="p">.</span><span class="k">projname</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">  name</span>       <span class="o">=</span> <span class="s2">&#34;ci-projname-check-pr-title&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">  path</span>       <span class="o">=</span> <span class="s2">&#34;\\pull-request-checks&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">ci_trigger</span> {
</span></span><span class="line"><span class="cl"><span class="n">    use_yaml</span> <span class="o">=</span> <span class="kt">true</span>
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">repository</span> {
</span></span><span class="line"><span class="cl"><span class="n">    repo_type</span>   <span class="o">=</span> <span class="s2">&#34;TfsGit&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">    repo_id</span>     <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">    branch_name</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">default_branch</span>
</span></span><span class="line"><span class="cl"><span class="n">    yml_path</span>    <span class="o">=</span> <span class="s2">&#34;pathto/azure-pipelines.checks.prtitle.yml&#34;</span><span class="c1"> # Match this to whatever you call your template
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, you&rsquo;ll link your pipeline to a policy that requires the run of this to be successful to merge.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">resource</span> <span class="s2">&#34;azuredevops_branch_policy_build_validation&#34; &#34;projname-check-pr-title&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  project_id</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_project</span><span class="p">.</span><span class="k">projname</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">  enabled</span>  <span class="o">=</span> <span class="kt">true</span>
</span></span><span class="line"><span class="cl"><span class="n">  blocking</span> <span class="o">=</span> <span class="kt">true</span><span class="c1"> # This means to bypass you&#39;d have to have permissions and document the override.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">settings</span> {
</span></span><span class="line"><span class="cl"><span class="n">    display_name</span>        <span class="o">=</span> <span class="s2">&#34;üß™ PR Title Adheres to Conventional commit&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">    build_definition_id</span> <span class="o">=</span> <span class="k">azuredevops_build_definition</span><span class="p">.</span><span class="k">ci</span><span class="err">-</span><span class="k">projname</span><span class="err">-</span><span class="k">check</span><span class="err">-</span><span class="k">pr</span><span class="err">-</span><span class="k">title</span><span class="p">.</span><span class="k">id</span><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">    # Set to however long before it has to be rerun. This is fine to be at a high duration as title shouldn&#39;t be changing constantly after it passes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">    valid_duration</span>      <span class="o">=</span> <span class="m">720</span>
</span></span><span class="line"><span class="cl"><span class="n">    filename_patterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">scope</span> {
</span></span><span class="line"><span class="cl"><span class="n">      repository_id</span>  <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">id</span>
</span></span><span class="line"><span class="cl"><span class="n">      repository_ref</span> <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="k">azuredevops_git_repository</span><span class="p">.</span><span class="k">myrepo</span><span class="p">.</span><span class="k">default_branch</span>
</span></span><span class="line"><span class="cl"><span class="n">      match_type</span>     <span class="o">=</span> <span class="s2">&#34;Exact&#34;</span>
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Definitely a bit more work than GitHub actions, but you can still get around some of this by using this approach for any PR merge validations you want.
There&rsquo;s also PR Status policies, but they are a bit more involved, and often involve running some Azure Functions or other things to post back a status.</p>
<p>In my opinion, that is worth investing in as you scale, but initially it&rsquo;s just too much plumbing so I just stick with fast small pipelines like this.</p>
<p>Good luck! üëç</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Using Azure DevOps for Private Go Modules
    </title>
    <link>
        https://www.sheldonhull.com/using-azure-devops-for-private-go-modules/
    </link>
    <pubDate>
        Fri, 11 Jun 2021 16:35:44 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/using-azure-devops-for-private-go-modules/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition Note
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      2022-12-14
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">Provided an example of how to handle private go modules in Azure Pipeline compatible method.</div>
    </div>
  </div>
<h2 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>TL;DR</h2><p>This took a few hours of work to iron out, so figured maybe I&rsquo;d save someone time.</p>
<p>&#x26a1; Just keep it simple and use SSH</p>
<p>&#x26a1; Use <code>dev.azure.com</code> even if using older <code>project.visualstudio.com</code> to keep things simple.</p>
<h2 id="modules-support" class="headerLink">
    <a href="#modules-support" class="header-mark"></a>Modules Support</h2><p>Unlike GitHub, Azure DevOps has some quirks to deal with, specifically in the odd path handling.</p>
<p>My original goal was to set the default handling to be <code>https</code> support, with the SSH override in git config allowing me to use SSH.</p>
<p>This didn&rsquo;t work.</p>
<ul>
<li>HTTPS requires <code>_git</code>  in the path.</li>
<li>SSH will not work with that, and also trims out the org name in the url when git config set based on instructions from Microsoft<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</li>
</ul>
<blockquote>
<p>There is a long-running issue with go get imports of Azure DevOps repositories due to the fact that the HTTPS URL contains a <code>_git</code> segment:
<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
</blockquote>
<p>Compare the path.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Path</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTTPS</td>
<td><code>go get dev.azure.com/&lt;organization&gt;/&lt;project&gt;/_git/&lt;repo&gt;</code></td>
</tr>
<tr>
<td>&#x26a1; What I used with SSH</td>
<td><code>go get dev.azure.com/&lt;project&gt;/_git/&lt;repo&gt;</code></td>
</tr>
<tr>
<td>SSH</td>
<td><code>go get dev.azure.com/&lt;organization&gt;/&lt;project&gt;/&lt;repo&gt;.git</code></td>
</tr>
</tbody>
</table>
<h2 id="git-config" class="headerLink">
    <a href="#git-config" class="header-mark"></a>Git Config</h2><p>Set this in your <code>.profile, .bashrc, or $PROFILE</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GOPRIVATE</span><span class="o">=</span>dev.azure.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>There are two approaches you can take.</p>
<p>One seems focused on allowing other <code>dev.azure.com</code> public projects to be used.
I&rsquo;ve never had that need, so I&rsquo;m ok with my <code>dev.azure.com</code> references being resolved only to my own organization.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Command</th>
<th>GitConfig</th>
</tr>
</thead>
<tbody>
<tr>
<td>Support All Azure DevOps (Public)</td>
<td><code>git config --global url.&quot;git@ssh.dev.azure.com:v3/&lt;organization&gt;/&quot;.insteadOf &quot;https://dev.azure.com/&lt;organization&gt;&quot;</code></td>
<td><code>[url &quot;git@ssh.dev.azure.com:v3&quot;]&lt;br/&gt;</code><br><br><code>insteadOf = https://dev.azure.com</code></td>
</tr>
<tr>
<td>&#x26a1; What I Used for  Private Org</td>
<td><code>git config --global url.&quot;git@ssh.dev.azure.com:v3/&lt;organization&gt;/&quot;.insteadOf &quot;https://dev.azure.com/</code></td>
<td><code>[url &quot;git@ssh.dev.azure.com:v3/&lt;organization&gt;/&quot;]</code><br><br><code>insteadOf = https://dev.azure.com/</code></td>
</tr>
</tbody>
</table>
<div
    class="details admonition Info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Organization in Dependency Path
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">This changes the path for dependencies to not require the organization in the dependency path.
Instead, the import path will look like this: <code>import &quot;dev.azure.com/&lt;project&gt;/repo.git/subdirectory&quot;</code></div>
    </div>
  </div>
<h2 id="https" class="headerLink">
    <a href="#https" class="header-mark"></a>HTTPS</h2><p>If you don&rsquo;t have restrictions on this, then you can do https with the following command to add the token in or use a more complex credential manager based process.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git config --global url.<span class="s2">&#34;https://anythinggoeshere:</span><span class="nv">$AZURE_DEVOPS_TOKEN</span><span class="s2">@dev.azure.com&#34;</span>.insteadOf <span class="s2">&#34;https://dev.azure.com&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="azure-pipelines" class="headerLink">
    <a href="#azure-pipelines" class="header-mark"></a>Azure Pipelines</h2><p>If you run into timeout issues with <code>go get</code>, I found this solution worked well.</p>
<p>I provided <code>ORGANIZATION</code> as a value if you are on the legacy url scheme, it&rsquo;s easier to just set this as variable and not worry about parsing out the org name itself from the url to place it in there.
I got stuck on this recently and was pointed to the answer in this great article <a href="https://seb-nyberg.medium.com/using-go-modules-with-private-azure-devops-repositories-4664b621f782" target="_blank" rel="noopener noreferrer">Using Go Modules With Private Azure Devops Repositories</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">workingDirectory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">$(Pipeline.Workspace)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">variables</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ORGANIZATION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">myorg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">checkout</span><span class="p">:</span><span class="w"> </span><span class="l">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fetchDepth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">path: $(Build.Repository.Name) # Note</span><span class="p">:</span><span class="w"> </span><span class="l">you&#39;ll want to provide workingdirectory inputs for tasks if you have multi-repo checkout going on.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    git clone &#34;https://$(ORGANIZATION):$(System.AccessToken)@dev.azure.com/$(ORGANIZATION)/$(System.TeamProject)/_git/$(Build.Repository.Name)&#34;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">git-checkout-with-pat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># internal modules with go-get might fail without this.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    git config --global url.&#34;https://$(ORGANIZATION):$(System.AccessToken)@dev.azure.com&#34;.insteadOf &#34;https://dev.azure.com&#34;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">ensure-system-token-used-for-other-internal-repos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    Write-Host &#34;example, with working directory set&#34;</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">exampleTask</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workingDirectory</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.workingDirectory }}/$(Build.Repository.Name)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="other-references" class="headerLink">
    <a href="#other-references" class="header-mark"></a>Other References</h2><ul>
<li>SSH key usage in Azure Pipelines<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</li>
<li>Using with docker<sup id="fnref1:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/go-get" target="_blank" rel="noopener noreferrer">Go get command support in Azure Repos Git</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://seb-nyberg.medium.com/using-go-modules-with-private-azure-devops-repositories-4664b621f782" target="_blank" rel="noopener noreferrer">Private Go Modules on Azure DevOps</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/install-ssh-key" target="_blank" rel="noopener noreferrer">Install SSH Key task - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>


<item>
    <title>
        Azure Devops PR Automation Requires Generic Contribute
    </title>
    <link>
        https://www.sheldonhull.com/azure-devops-pr-automation-requires-generic-contribute/
    </link>
    <pubDate>
        Wed, 12 May 2021 13:10:02 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/azure-devops-pr-automation-requires-generic-contribute/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Big fan of renovate for terraform dependency management.</p>
<p>Ran into some complications with restarting an onboarding with Whitesource Renovate in Azure DevOps Repos and the Azure Pipeline automation.
I&rsquo;ve run into this before, so logging this for my sanity.</p>
<ul>
<li>If you failed to onboard with Azure DevOps, you can&rsquo;t rename the PR like in GitHub to simplify restarting the onboarding process.</li>
<li>Instead, delete the <code>renovate.json</code> file and commit to your default branch.</li>
<li>Then re-add and get the <code>renovate.json</code> committed back to your default branch.</li>
<li>Run your Azure DevOps Pipeline to trigger the dependency assessment.</li>
<li>If you didn&rsquo;t add the project build service account to your repo with <code>Contribute</code>, <code>Contribute to Pull Requests</code>, <code>Force Push</code> (to allow force update of branches it creates), and <code>Create Tag</code>.</li>
</ul>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Where do you add the permissions for build?
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Go to your repository security settings (in this case I&rsquo;m adding to all to simplify, but you can do on a repo by repo basis if you enjoy tedium):</p>
<p><code>https://dev.azure.com/MYORG/MYPROJECT/_settings/repositories?_a=permissions</code></p>
<p>Then in the search type your project name and you should see a <code>PROJECTNAME\Build Service (PROJECTNAME)</code> show up.</p>
<p>If you are using a custom service account with on-premise agents instead of hosted, then adjust your approach accordingly.</p>
</div>
    </div>
  </div>

        ]]>
    </description>
</item>


<item>
    <title>
        Azure Pipelines Template Iteration
    </title>
    <link>
        https://www.sheldonhull.com/azure-pipelines-template-iteration/
    </link>
    <pubDate>
        Fri, 05 Mar 2021 06:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/azure-pipelines-template-iteration/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="templates" class="headerLink">
    <a href="#templates" class="header-mark"></a>Templates</h2><p>This isn&rsquo;t meant to be an exhaustive template overview.
I&rsquo;m just going to give an example of what I found useful as I&rsquo;ve been meaning to leverage templates for a while and finally got around to having a great use for it.</p>
<h2 id="my-use-case" class="headerLink">
    <a href="#my-use-case" class="header-mark"></a>My Use Case</h2><p>I am a heavy user of <a href="https://bit.ly/3be6EP8" target="_blank" rel="noopener noreferrer">InvokeBuild</a>.
It&rsquo;s a very robust task runner tool that I&rsquo;ve used to coordinate many project oriented actions, similar to Make, but also DevOps oriented work like AWS SSM tasks and more.</p>
<p>In this scenario, I needed to run a query across: multiple queries -&gt; across multiple servers -&gt; across hundreds of databases &ndash;&gt; and finally produce a single jsonl artifact<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>Originally, I did this in a single Invoke-Build task, but what I discovered was with a long running job I wanted to have a bit more granular view of the progress and percentage complete.
This also helped me visualize a bit more what specific queries cost the most in time.</p>
<h2 id="azure-pipeline-construction" class="headerLink">
    <a href="#azure-pipeline-construction" class="header-mark"></a>Azure Pipeline Construction</h2><p>I&rsquo;ve extracted out the key essential pieces here to explain the core concepts.</p>
<h3 id="build-number" class="headerLink">
    <a href="#build-number" class="header-mark"></a>Build Number</h3><p>Build name is dynamically generated.
This is my standard format for most pipelines, but you can adjust the naming with parameters (which are a compile time, before runtime) as well to add other descriptive values.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">$(BuildDefinitionName).$(Configuration).$(Build.QueuedBy).$(DayOfYear)$(Rev:.r)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div
    class="details admonition Info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Parameters
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Parameters are evaluated at compile time, rather than during the build run phase.</p>
<p>This means you can use something like the example below to update the queued build name on run.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">$(BuildDefinitionName).$(Configuration).$(Build.QueuedBy).${{ parameters.SELECTED_VALUE }}.$(DayOfYear)$(Rev:.r)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Using a build variable might require updating the build name if the build variable isn&rsquo;t set on queue, as it won&rsquo;t pick it up without this command.</p>
</div>
    </div>
  </div>
<h3 id="trigger" class="headerLink">
    <a href="#trigger" class="header-mark"></a>Trigger</h3><p>Setting the following values ensures this is a manual pipeline.
Otherwise, once the pipeline is linked it would automatically trigger on PR and main branch commits.</p>
<p>There&rsquo;s other customization in terms of filtering triggers based on the path of the changed file, branch names, batching changes with multiple commits, and more in the docs.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">trigger: none
</span></span><span class="line"><span class="cl">pr: none
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="parameters" class="headerLink">
    <a href="#parameters" class="header-mark"></a>Parameters</h3><p>Designed for user input, the parameters provide a good experience in customizing runs easily at queue time.</p>
<p>This can be a full yaml defined object, but my examples here are the simple ones.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Configuration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">qa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">QUERY_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;no-override&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">If no-override, then run everything, else specify a specific query to run.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">SERVER_LIST</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;tcp:123.123.123.1;tcp:123.123.123.2&#39;</span><span class="w"> </span><span class="c">#split this in the task code</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Example Input that InvokeBuild would split to array</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="variables" class="headerLink">
    <a href="#variables" class="header-mark"></a>Variables</h3><p>Parameters won&rsquo;t be set in the environment variables, so if you want these exposed to the next tasks, you have to set the variable from the parameter.</p>
<p>This command will now mean the tasks run will have a <code>$ENV:CONFIGURATION</code> set automatically.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">variables</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">CONFIGURATION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.Configuration }}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="job" class="headerLink">
    <a href="#job" class="header-mark"></a>Job</h3><p>The pipelines allow you to only put the level of complexity you need in your runbook.</p>
<p>This means if you just have tasks, you can put those, but if you have a deployment job then you can include tasks in the appropriate child section.</p>
<p>For my default template here I like control of multi-stage yaml builds, so I use the following format.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">deployment</span><span class="p">:</span><span class="w"> </span><span class="l">my-query-runbook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Run Query in ${{ parameters.Configuration }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeoutInMinutes</span><span class="p">:</span><span class="w"> </span><span class="m">480</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">continueOnError</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;my-environment-${{ parameters.Configuration }}&#39;</span><span class="w">  </span><span class="c">#could setup approval requirements for environments by specifying a name like `my-environment-prod` requires manual approval or is limited to specific folks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pool</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-own-internal-agent </span><span class="w"> </span><span class="c"># OR use hosted container config if you want</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">demands</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">agent.os -equals Windows_NT </span><span class="w"> </span><span class="c"># OR use Ubuntu if you have linux container. This is customizable to help you filter to desired agent if working with private subnets etc.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">env -equals ${{ parameters.Configuration }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">runOnce</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">checkout</span><span class="p">:</span><span class="w"> </span><span class="l">self</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">persistCredentials</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fetchDepth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">  </span><span class="c"># Unlimited in case you need more history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">clean</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">printAllVariables@1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="using-the-template" class="headerLink">
    <a href="#using-the-template" class="header-mark"></a>Using the Template</h3><p>At the same level as the task, the template can be called.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">template</span><span class="p">:</span><span class="w"> </span><span class="l">templates/run-query.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">SERVER_LIST</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.QUERY_NAME}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">${{ if ne(parameters.QUERY_NAME,&#39;no-override&#39;) }}:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">querynames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;${{ parameters.QUERY_NAME }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">${{ if eq(parameters.QUERY_NAME,&#39;no-override&#39;) }}:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">querynames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;Query1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;Query2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span>- <span class="s1">&#39;Query3&#39;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>A few concepts to unpack:</p>
<ul>
<li>Parameters must be passed into the template, as any build variables automatically in scope.</li>
<li>Variable reuse <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> has it&rsquo;s own set of quirks with templates.</li>
</ul>
<blockquote>
<p>Within a template expression, you have access to the parameters context that contains the values of parameters passed in. Additionally, you have access to the variables context that contains all the variables specified in the YAML file plus many of the predefined variables (noted on each variable in that topic). Importantly, it doesn&rsquo;t have runtime variables such as those stored on the pipeline or given when you start a run. Template expansion happens very early in the run, so those variables aren&rsquo;t available. <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
</blockquote>
<ul>
<li>Expressions allow some conditional evaluation and change in behavior of the pipeline.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></li>
</ul>
<h3 id="template-structure" class="headerLink">
    <a href="#template-structure" class="header-mark"></a>Template Structure</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;QUERY_NAME&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;CONFIGURATION&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;SERVER_LIST&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Now that we have the parameters defined, we can use a steps block and loop on the <code>QUERY_NAME</code> parameter that could be a single or multiple entry input.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">${{ each query in parameters.QUERY_NAME }}:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">PowerShell@2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">displayName</span><span class="p">:</span><span class="w"> </span><span class="l">Query ${{ query }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">inputs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">targetType</span><span class="p">:</span><span class="w"> </span><span class="l">inline</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">script</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            &amp;./build.ps1 -Tasks &#39;run-my-query&#39; -Configuration &#39;${{ parameters.CONFIGURATION }}&#39; -QueryName &#39;${{ query }}&#39;</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">errorActionPreference</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Stop&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">pwsh</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failOnStderr</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">workingDirectory</span><span class="p">:</span><span class="w"> </span><span class="l">$(Build.SourcesDirectory)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">OPTIONAL_ENV_VARS</span><span class="p">:</span><span class="w"> </span><span class="l">${{ parameters.EXAMPLE }}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This could also be slightly altered if you don&rsquo;t want inline scripts to use the following.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">filePath</span><span class="p">:</span><span class="w"> </span><span class="l">build.ps1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">argumentList</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;-Tasks &#39;run-my-query&#39; -Configuration &#39;${{ parameters.CONFIGURATION }}&#39; -QueryName &#39;${{ query }}&#39;&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reporting-progress" class="headerLink">
    <a href="#reporting-progress" class="header-mark"></a>Reporting Progress</h2><p>As the task runs, you can output percent complete so that your task shows how far along it is.
I find this great for long running tasks, helping me check on them and know it&rsquo;s not stuck.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">Write-Host &#34;##vso[task.setprogress value=$PercentComplete;]MyTask&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="final-result" class="headerLink">
    <a href="#final-result" class="header-mark"></a>Final Result</h2><p>This allows the job to set dynamically the individual tasks to run, report progress on each, and log the timing.</p>
<p>While it could be run as a single task, I prefer this type of approach because a long running job is now much more easily tracked as it progresses.</p>
<p><figure><a class="lightgallery" href="/images/2021-03-04-13.38.45-pipelines-example.png" title="image-of-individual-tasks-in-pipeline" data-thumbnail="/images/2021-03-04-13.38.45-pipelines-example.png">
        
    </a></figure></p>
<h2 id="further-features" class="headerLink">
    <a href="#further-features" class="header-mark"></a>Further Features</h2><p>Templates allow for a wide range of usage and flexibility that I&rsquo;ve barely touched.
Selecting entire sets of tasks at runtime, variable sets, and more are all available.</p>
<p>This was a first round usage of them, as I really want to leverage the potentional for DRY with pipelines more, and templates offer a really flexible option to reusing core code across multiple pipelines without having to version each individually and try to keep them up to date.</p>
<h2 id="more-resources" class="headerLink">
    <a href="#more-resources" class="header-mark"></a>More Resources</h2><ul>
<li><a href="https://bit.ly/3ruO5vT" target="_blank" rel="noopener noreferrer">Azure DevOps Tips: ‚ÄúEach‚Äù Loops. Applying DRY principle in CI/CD‚Ää‚Äî‚ÄäUsing‚Ä¶ | by Jordan Lee | Medium</a></li>
<li>YAML schema - Azure Pipelines | Microsoft Docs <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></li>
<li>Predefined variables - Azure Pipelines | Microsoft Docs <sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></li>
<li>Expressions <sup id="fnref1:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://bit.ly/3bgkTmi" target="_blank" rel="noopener noreferrer">A standard for jsonl</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://bit.ly/2OqEreJ" target="_blank" rel="noopener noreferrer">Variable reuse</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://bit.ly/2OoAXK0" target="_blank" rel="noopener noreferrer">Azure DevOps Template Context</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p><a href="https://bit.ly/30bDR7g" target="_blank" rel="noopener noreferrer">Expressions - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p><a href="https://bit.ly/3rhAgRd" target="_blank" rel="noopener noreferrer">YAML schema - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p><a href="https://bit.ly/30a1du6" target="_blank" rel="noopener noreferrer">Predefined variables - Azure Pipelines | Microsoft Docs</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Build-Release-Engineering - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/build-release-engineering/</link>
        <description>Build-Release-Engineering - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://www.sheldonhull.com/tags/build-release-engineering/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Dagger
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/go/dagger/
    </link>
    <pubDate>
        Mon, 01 Jan 0001 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/go/dagger/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p><a href="https://dagger.io?ref=sheldonhull.com" target="_blank" rel="noopener noreferrer">Containerized magic with Go and BuildKit</a></p>
<p>I will soon put some experience notes here, as I&rsquo;ve successfully built Angular and Nginx containers with it, which was a great experience.
With the upcoming service support, I can foresee even more use cases.</p>
<div
    class="details admonition example"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-list-ol fa-fw"
      ></i>
      Example of Building an Angular Project
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Using mage, here&rsquo;s a demonstration of invoking Mage to build an Angular project without any Angular tooling installed locally.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">AngularVersion</span> <span class="p">=</span> <span class="s">&#34;15&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build runs the Angular build via Dagger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">Dagger</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">WithLogOutput</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pterm</span><span class="p">.</span><span class="nx">Error</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;unable to connect to dagger: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">homedir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">UserHomeDir</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Container</span><span class="p">().</span><span class="nf">From</span><span class="p">(</span><span class="s">&#34;node:lts-alpine&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithMountedDirectory</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">,</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Host</span><span class="p">().</span><span class="nf">Directory</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithWorkdir</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">path</span> <span class="o">:=</span> <span class="s">&#34;dist/&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;npm&#34;</span><span class="p">,</span> <span class="s">&#34;install&#34;</span><span class="p">,</span> <span class="s">&#34;-g&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;@angular/cli@%s&#34;</span><span class="p">,</span> <span class="nx">AngularVersion</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;ng&#34;</span><span class="p">,</span> <span class="s">&#34;config&#34;</span><span class="p">,</span> <span class="s">&#34;-g&#34;</span><span class="p">,</span> <span class="s">&#34;cli.warnings.versionMismatch&#34;</span><span class="p">,</span> <span class="s">&#34;false&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;ng&#34;</span><span class="p">,</span> <span class="s">&#34;v&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;npm&#34;</span><span class="p">,</span> <span class="s">&#34;ci&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;ng&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;--configuration&#34;</span><span class="p">,</span> <span class="s">&#34;production&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Copy &#34;dist/&#34; from container to host.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">Directory</span><span class="p">(</span><span class="nx">path</span><span class="p">).</span><span class="nf">Export</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<div
    class="details admonition example"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-list-ol fa-fw"
      ></i>
      Example of handling both local and CI private npm auth
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>This demonstrates how to handle both running in a CI context and a remote context by evaluating for a CI variable. If provided, this will return a CI system-generated <code>.npmrc</code>.
If not provided, the file from the home directory will be mounted into the build container.</p>
<p>Please note that this container is not for publishing; it&rsquo;s a build container which copies the <code>dist/</code> contents back to the project directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">npmrcFile</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">dagger</span><span class="p">.</span><span class="nx">Secret</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Bypass any mounting of npmrc, as CI tooling should update any private inline with current file here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;NPM_CONFIG_USERCONFIG&#34;</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pterm</span><span class="p">.</span><span class="nx">Info</span><span class="p">.</span><span class="nf">Printfln</span><span class="p">(</span><span class="s">&#34;[OVERRIDE] NPM_CONFIG_USERCONFIG: %s&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;NPM_CONFIG_USERCONFIG&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npmrcDir</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Dir</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;NPM_CONFIG_USERCONFIG&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// [DEFAULT] NPM config set from home/.npmrc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">npmrcFile</span> <span class="p">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Host</span><span class="p">().</span><span class="nf">Directory</span><span class="p">(</span><span class="nx">homedir</span><span class="p">,</span> <span class="nx">dagger</span><span class="p">.</span><span class="nx">HostDirectoryOpts</span><span class="p">{</span><span class="nx">Include</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;.npmrc&#34;</span><span class="p">}}).</span><span class="nf">File</span><span class="p">(</span><span class="s">&#34;.npmrc&#34;</span><span class="p">).</span><span class="nf">Secret</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Output error if npmrcFile doesn&#39;t exist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">homedir</span><span class="p">,</span> <span class="s">&#34;.npmrc&#34;</span><span class="p">));</span> <span class="nx">os</span><span class="p">.</span><span class="nf">IsNotExist</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;missing npmrc file&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">npm</span> <span class="p">=</span> <span class="nx">npm</span><span class="p">.</span><span class="nf">WithMountedSecret</span><span class="p">(</span><span class="s">&#34;/root/.npmrc&#34;</span><span class="p">,</span> <span class="nx">npmrcFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<div
    class="details admonition example"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-list-ol fa-fw"
      ></i>
      Building a Go App with Caching
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Using Mage and the excellent Chainguard Go builder image, this example shows how to build a binary for the current platform and architecture, while wrapping up the entire build process inside the Dagger engine.
The output goes to the standard <code>.artifacts</code> directory, which is typically included in all projects, and should be ignored by Git.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;path/filepath&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;runtime&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="s">&#34;dagger.io/dagger&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;github.com/magefile/mage/mg&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;github.com/pterm/pterm&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Build</span> <span class="nx">mg</span><span class="p">.</span><span class="nx">Namespace</span>  <span class="c1">// Build contains all the build-related Mage targets.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">ArtifactDirectory</span> <span class="p">=</span> <span class="s">&#34;.artifacts&#34;</span>  <span class="c1">// ArtifactDirectory is a directory for project artifacts, and shouldn&#39;t be committed to source.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">PermissionUserReadWriteExecute</span> <span class="p">=</span> <span class="mi">0</span><span class="nx">o0700</span>  <span class="c1">// PermissionUserReadWriteExecute is the permissions for the artifact directory.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">TargetBuildDirectory</span> <span class="p">=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">ArtifactDirectory</span><span class="p">,</span> <span class="s">&#34;builds&#34;</span><span class="p">)</span>  <span class="c1">// TargetBuildDirectory is the directory where the build artifacts will be placed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 🔨 MyAppName builds the service using Dagger for the current system architecture.
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Development notes: This is a fully containerized build, using Dagger. Requires Docker.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">Build</span><span class="p">)</span> <span class="nf">MyAppName</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nx">pterm</span><span class="p">.</span><span class="nx">DefaultHeader</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Building with Dagger&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">buildThis</span> <span class="o">:=</span> <span class="s">&#34;./myApp/main.go&#34;</span> <span class="c1">// This is the specific file to build, could be an input variable/slice though
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">appName</span> <span class="o">:=</span> <span class="s">&#34;myApp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// create the target directory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">MkdirAll</span><span class="p">(</span><span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">TargetBuildDirectory</span><span class="p">,</span> <span class="nx">appName</span><span class="p">),</span> <span class="nx">PermissionUserReadWriteExecute</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// initialize Dagger client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">Connect</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">dagger</span><span class="p">.</span><span class="nf">WithLogOutput</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">defer</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// get reference to the local project
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">src</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Host</span><span class="p">().</span><span class="nf">Directory</span><span class="p">(</span><span class="s">&#34;.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">cachedBuild</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CacheVolume</span><span class="p">(</span><span class="s">&#34;go-build-cache&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">cachedMod</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CacheVolume</span><span class="p">(</span><span class="s">&#34;go-mod-cache&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">modcache</span> <span class="o">:=</span> <span class="s">&#34;/nonroot/.cache/go-mod-cache&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">buildcache</span> <span class="o">:=</span> <span class="s">&#34;/nonroot/.cache/go-build-cache&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// get `golang` image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">golang</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Container</span><span class="p">().</span><span class="nf">From</span><span class="p">(</span><span class="s">&#34;cgr.dev/chainguard/go:latest&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;CGO_ENABLED&#34;</span><span class="p">,</span> <span class="s">&#34;0&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOOS&#34;</span><span class="p">,</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOARCH&#34;</span><span class="p">,</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOARCH</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOMODCACHE&#34;</span><span class="p">,</span> <span class="nx">modcache</span><span class="p">).</span> <span class="c1">// Attempt to optimize mod and build caching
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">WithEnvVariable</span><span class="p">(</span><span class="s">&#34;GOCACHE&#34;</span><span class="p">,</span> <span class="nx">buildcache</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// mount cloned repository into `golang` image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">golang</span> <span class="p">=</span> <span class="nx">golang</span><span class="p">.</span><span class="nf">WithMountedDirectory</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">,</span> <span class="nx">src</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithWorkdir</span><span class="p">(</span><span class="s">&#34;/src&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithMountedCache</span><span class="p">(</span><span class="nx">modcache</span><span class="p">,</span> <span class="nx">cachedMod</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">WithMountedCache</span><span class="p">(</span><span class="nx">buildcache</span><span class="p">,</span> <span class="nx">cachedBuild</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// define the application build command
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">outputDirectory</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">TargetBuildDirectory</span><span class="p">,</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">outputFile</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">outputDirectory</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s-service&#34;</span><span class="p">,</span><span class="nx">appName</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="nx">golang</span> <span class="p">=</span> <span class="nx">golang</span><span class="p">.</span><span class="nf">WithExec</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">outputFile</span><span class="p">,</span> <span class="s">&#34;-ldflags&#34;</span><span class="p">,</span> <span class="s">&#34;-s -w&#34;</span><span class="p">,</span> <span class="s">&#34;-trimpath&#34;</span><span class="p">,</span> <span class="nx">buildThis</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// get reference to build output directory in container
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">output</span> <span class="o">:=</span> <span class="nx">golang</span><span class="p">.</span><span class="nf">Directory</span><span class="p">(</span><span class="nx">outputDirectory</span><span class="p">).</span><span class="nf">File</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s-service&#34;</span><span class="p">,</span><span class="nx">appName</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// write contents of container build/ directory to the host
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">Export</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">outputFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

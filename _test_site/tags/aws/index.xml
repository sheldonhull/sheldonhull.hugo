<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Aws - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/aws/</link>
        <description>Aws - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 10 Aug 2021 20:43:06 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/aws/" rel="self" type="application/rss+xml" />

<item>
    <title>
        First Pass With Pulumi
    </title>
    <link>
        https://www.sheldonhull.com/first-pass-with-pulumi/
    </link>
    <pubDate>
        Tue, 10 Aug 2021 20:43:06 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/first-pass-with-pulumi/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="why" class="headerLink">
    <a href="#why" class="header-mark"></a>Why</h2><p>Instead of learning a new domain specific language that wraps up cloud provider API&rsquo;s, this let&rsquo;s the developer use their preferred programming language, while solving several problems that using the API&rsquo;s directly don&rsquo;t solve.</p>
<ul>
<li>Ensure the deployment captures a state file of the changes made.</li>
<li>Workflow around the previews and deployments.</li>
<li>Easily automated policy checks and tests.</li>
</ul>
<p>This can be a really useful tool to bring infrastructure code maintainability directly into the the lifecycle of the application.</p>
<p>It&rsquo;s subjective to those in DevOps whether this would also apply for &ldquo;Day 0-2&rdquo; type operations, which are typically less frequently changed resources such as account settings, VPC, and other more static resources.</p>
<p>However, with a team experienced with Go or other tooling, I could see that this would provide a way to have much more programmatic control, loops, and other external libraries used, without resorting to the HCL DSL way of doing resource looping and inputs.</p>
<h2 id="first-pass" class="headerLink">
    <a href="#first-pass" class="header-mark"></a>First Pass</h2><p>First impression was very positive!</p>
<p>Basic steps:</p>
<ul>
<li><code>brew install pulumi</code></li>
<li><code>pulumi new aws-go</code></li>
<li>Entered name of test stack such as <code>aws-vpc</code>.</li>
<li>Copied the VPC snippet from their docs and then plugged in my own tag for naming, which by default wasn&rsquo;t included.</li>
<li>Reproduced the example for <code>pulumi.String()</code>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">petname</span> <span class="s">&#34;github.com/dustinkirkland/golang-petname&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;github.com/pulumi/pulumi/sdk/v3/go/pulumi/config&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">words</span>     <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">Int</span><span class="p">(</span><span class="s">&#34;words&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;The number of words in the pet name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">separator</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;separator&#34;</span><span class="p">,</span> <span class="s">&#34;-&#34;</span><span class="p">,</span> <span class="s">&#34;The separator between words in the pet name&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pulumi</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">pulumi</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conf</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stage</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Require</span><span class="p">(</span><span class="s">&#34;stage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">petname</span> <span class="o">:=</span> <span class="nx">petname</span><span class="p">.</span><span class="nf">Generate</span><span class="p">(</span><span class="o">*</span><span class="nx">words</span><span class="p">,</span> <span class="o">*</span><span class="nx">separator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ec2</span><span class="p">.</span><span class="nf">NewVpc</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">stage</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">VpcArgs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">CidrBlock</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;10.0.0.0/16&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Tags</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nx">StringMap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;Name&#34;</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">stage</span><span class="p">,</span> <span class="nx">petname</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="positive-observations" class="headerLink">
    <a href="#positive-observations" class="header-mark"></a>Positive Observations</h2><ul>
<li>Running <code>pulumi destroy</code> left the stack in the console for full plan history and auditing.
To remove the stack from the web you&rsquo;d run: <code>pulumi stack rm dev</code>.
This is similar to how terraform cloud workspaces work and gives confidence of easier auditing by default.</li>
<li>The console experience and browser integration was beautifully done.</li>
<li><code>pulumi preview --emoji</code> provided a very clean and succint summary of changes.</li>
<li><code>pulumi up</code> also was very clean, and allowed a selection to expand the details as well.</li>
<li>Browser for stack provides full metadata detail, resource breakdown, audit history, and more.</li>
</ul>
<p><figure><a class="lightgallery" href="/images/2021-08-10-15.47.41-pulumi-preview.png" title="Great Console Preview &amp;amp; Interaction Experience" data-thumbnail="/images/2021-08-10-15.47.41-pulumi-preview.png" data-sub-html="<h2>Great Console Preview &amp; Interaction Experience</h2><p>Great Console Preview &amp;amp; Interaction Experience</p>">
        
    </a><figcaption class="image-caption">Great Console Preview & Interaction Experience</figcaption>
    </figure></p>
<ul>
<li>
<p>The Pulumi docs for Azure DevOps were pretty solid!
Full detail and walk through.
As an experienced PowerShell developer, I was pleasantly suprised by quality PowerShell code that overall was structured well.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
</li>
<li>
<p>Set some values via yaml easily by: <code>'pulumi config set --path 'stage' 'dev'</code> which results in:</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mystack:stage</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">aws:region</span><span class="p">:</span><span class="w"> </span><span class="l">myregion</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This is then read via:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">conf</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">stage</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Require</span><span class="p">(</span><span class="s">&#34;stage&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="things-to-improve" class="headerLink">
    <a href="#things-to-improve" class="header-mark"></a>Things To Improve</h2><ul>
<li>Missing the benefit of Terraform module registry.</li>
<li>Pulumi Crosswalk sounds pretty awesome to help with this.
However, I wasn&rsquo;t able to find the equivalent of a &ldquo;crosswalk module library&rdquo; to browse so that part might be a future improvement.</li>
</ul>
<p>This document link: <a href="https://www.pulumi.com/docs/guides/crosswalk/aws/vpc/" target="_blank" rel="noopener noreferrer">AWS Virtual Private Cloud (VPC) | Pulumi</a> seemed great as a tutorial, but wasn&rsquo;t clear immediately on how I could use with Go.</p>
<p>I looked at the <a href="https://pkg.go.dev/github.com/pulumi/pulumi-aws/sdk/v4@v4.15.0/go/aws" target="_blank" rel="noopener noreferrer">aws · pkg.go.dev</a> but didn&rsquo;t see any equivalent to the documented <code>awsx</code> package shown from nodejs library.</p>
<p>Finally, found my answer.</p>
<blockquote>
<p>Pulumi Crosswalk for AWS is currently supported only in Node.js (JavaScript or TypeScript) languages. Support for other languages, including Python, is on the future roadmap. <a href="https://www.pulumi.com/docs/guides/crosswalk/aws/#what-languages-are-supported" target="_blank" rel="noopener noreferrer">Pulumi Crosswalk for AWS | Pulumi</a></p>
</blockquote>
<p>I wish this was put as a big disclaimer right up at the top of the crosswalk section to ensure it was very clear.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This feels very similar in style to the AWS SDK which doesn&rsquo;t allow just string values, but requires pointers to strings and thus wraps up the strings with expressions such as <code>aws.String(</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Subjective, but I noticed boolean values instead of switches, which would slightly simplify the build scripts, but is more of a &ldquo;nit&rdquo; than a critical issue. Using if blocks instead of switch might also clean things up, but overall the script was pretty well written, which seems rare in vendor provided PowerShell examples. 👏&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>


<item>
    <title>
        Steampipe Is Sql Magic
    </title>
    <link>
        https://www.sheldonhull.com/steampipe-is-sql-magic/
    </link>
    <pubDate>
        Fri, 16 Jul 2021 16:11:52 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/steampipe-is-sql-magic/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="up-and-running-in-minutes" class="headerLink">
    <a href="#up-and-running-in-minutes" class="header-mark"></a>Up And Running In Minutes</h2><p>I tried <a href="https://steampipe.io/" target="_blank" rel="noopener noreferrer">Steampipe</a> out for the first time today.</p>
<blockquote>
<p><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"/></svg> <a href="https://twitter.com/steampipeio" target="_blank" rel="noopener noreferrer">Follow Steampipe On Twitter</a></p>
</blockquote>
<p>I&rsquo;m seriously impressed.</p>
<p>I built a project <a href="https://github.com/sheldonhull/go-aws-ami-metrics" target="_blank" rel="noopener noreferrer">go-aws-ami-metrics</a> last year to test out some Go that would iterate through instances and AMIs to build out aging information on the instances.</p>
<p>I used it to help me work through how to use the AWS SDK to iterate through regions, instances, images, and more.</p>
<p>In 15 mins I just solved the equivalent issue in a way that would benefit anyone on a team.
My inner skeptic was cynical, thinking this abstraction would be problematic and I&rsquo;d be better served by just sticking with the raw power of the SDK.</p>
<p>It turns out this tool already is built on the SDK using the same underlying API calls I&rsquo;d be writing from scratch.</p>
<p>First example: <a href="https://github.com/turbot/steampipe-plugin-aws/blob/ce50c2141cd24ed37552afd976482c55961e7725/aws/table_aws_ec2_ami.go#L204" target="_blank" rel="noopener noreferrer">DescribeImage</a></p>
<p>This is the magic happening in the code.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"> <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">svc</span><span class="p">.</span><span class="nf">DescribeImages</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">DescribeImagesInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Owners</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="kt">string</span><span class="p">{</span><span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;self&#34;</span><span class="p">)},</span>
</span></span><span class="line"><span class="cl"> <span class="p">})</span>
</span></span><span class="line"><span class="cl"> <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">image</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Images</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">d</span><span class="p">.</span><span class="nf">StreamListItem</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This is the same SDK I used, but instead of having to build out all the calls, there is a huge library of data already returned.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"> <span class="nx">req</span><span class="p">,</span> <span class="nx">publicImages</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">DescribeImagesRequest</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">DescribeImagesInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Filters</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">Filter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span><span class="p">:</span>   <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;is-public&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Values</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="kt">string</span><span class="p">{</span><span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;true&#34;</span><span class="p">)},</span>
</span></span><span class="line"><span class="cl">   <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">},</span>
</span></span><span class="line"><span class="cl"> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>There is no need to reinvent the wheel.
Instead of iterating through regions, accounts, and more, Steampipe allows this in plain old SQL.</p>
<p><figure><a class="lightgallery" href="/images/2021-07-16-postgres-and-aws.png" title="Query The Cloud" data-thumbnail="/images/2021-07-16-postgres-and-aws.png" data-sub-html="<h2>Query The Cloud</h2><p>Query The Cloud</p>">
        
    </a><figcaption class="image-caption">Query The Cloud</figcaption>
    </figure>
For example, to gather:</p>
<ul>
<li>EC2 Instances</li>
<li>that use AWS Owned Images</li>
<li>and use an image that created greater than <code>n</code> period</li>
<li>and want the aging in days</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ec2</span><span class="p">.</span><span class="n">instance_id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">image_id</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="k">state</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">image_location</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">creation_date</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">extract</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">now</span><span class="p">())</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="k">extract</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">creation_date</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">creation_age</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="k">public</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">root_device_name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">aws_ec2_ami_shared</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">ami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">aws_ec2_instance</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">ec2</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">image_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ec2</span><span class="p">.</span><span class="n">image_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">owner_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;137112412989&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">AND</span><span class="w"> </span><span class="n">ami</span><span class="p">.</span><span class="n">creation_date</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">now</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="nb">INTERVAL</span><span class="w"> </span><span class="s1">&#39;4 week&#39;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>There are plugins for GitHub, Azure, AWS, and many more.</p>
<p>You can even do cross-provider calls.</p>
<p>Imagine wanting to query a tagged instance and pulling the tag of the work item that approved this release.
Join this data with Jira, find all associated users involved with the original request, and you now have an idea of the possibility of cross-provider data Steampipe could simplify.</p>
<p>Stiching this together is complicated.
It would involve at least 2 SDK&rsquo;s and their unique implementation.</p>
<p>I feel this is like Terraform for Cloud metadata, a way to provide a consistent experience with syntax that is comfortable to many, without the need to deal with provider specific quirks.</p>
<h2 id="query-in-editor" class="headerLink">
    <a href="#query-in-editor" class="header-mark"></a>Query In Editor</h2><ul>
<li>I downloaded the recommended <a href="https://tableplus.com/" target="_blank" rel="noopener noreferrer">TablePlus</a> with <code>brew install tableplus</code>.</li>
<li>Ran <code>steampipe service start</code> in my terminal.</li>
<li>Copied the Postgres connection string from the terminal output and pasted into TablePlus.</li>
<li>Pasted my query, ran, and results were right there as if I was connected to a database.</li>
</ul>
<p><figure><a class="lightgallery" href="/images/2021-07-16-16.24.53-TablePlus-query-editor.png" title="TablePlus" data-thumbnail="/images/2021-07-16-16.24.53-TablePlus-query-editor.png" data-sub-html="<h2>TablePlus</h2><p>TablePlus</p>">
        
    </a><figcaption class="image-caption">TablePlus</figcaption>
    </figure></p>
<h2 id="aws-already-has-this" class="headerLink">
    <a href="#aws-already-has-this" class="header-mark"></a>AWS Already Has This</h2><p>AWS has lots of ways to get data.
AWS Config can aggregate across multiple accounts, SSM can do inventory, and other tools can do much of this.</p>
<p>AWS isn&rsquo;t easy.
Doing it right is hard.
Security is hard.</p>
<p>Expertise in building all of this and consuming can be challenging.</p>
<p>🎉 Mission accomplished!</p>
<h2 id="experience" class="headerLink">
    <a href="#experience" class="header-mark"></a>Experience</h2><p>I think Steampipe is offering a fantastic way to get valuable information out of AWS, Azure, GitHub, and more with a common language that&rsquo;s probably the single most universal development language in existenance: <em>SQL</em>.</p>
<blockquote>
<p>One of the goals of Steampipe since we first started envisioning it is that it should be simple to install and use - you should not need to spend hours downloading pre-requisites, fiddling with config files, setting up credentials, or pouring over documentation.
We&rsquo;ve tried very hard to bring that vision to reality, and hope that it is reflected in Steampipe as well as our plugins.</p>
</blockquote>
<p>Providing a cli with features like this is incredible.</p>
<ul>
<li>execute</li>
<li>turn into an interactive terminal</li>
<li>provide prompt completion to commands</li>
<li>a background service to allow connection via IDE</li>
</ul>
<h2 id="the-future" class="headerLink">
    <a href="#the-future" class="header-mark"></a>The Future</h2><p>The future is bright as long as <code>truncate ec2_instance</code> doesn&rsquo;t become a thing. 😀</p>
<h2 id="further-resources" class="headerLink">
    <a href="#further-resources" class="header-mark"></a>Further Resources</h2><p>If you want to explore the available schema, check out the thorough docs.</p>
<ul>
<li><a href="https://hub.steampipe.io/plugins/turbot/aws/tables" target="_blank" rel="noopener noreferrer">AWS Tables List</a> shows <code>212</code> tables of metadata currently available.</li>
<li>Use <a href="https://steampipe.io/docs/using-steampipe/writing-queries" target="_blank" rel="noopener noreferrer">Named queries</a> to build a library of easy queries to call on demand such as <code>ami.aging_instances</code>.</li>
<li>Use <a href="https://hub.steampipe.io/mods/turbot/aws_thrifty/controls" target="_blank" rel="noopener noreferrer">Mods</a> to download a set of named queries and controls to validate things like security and compliance.</li>
<li><a href="https://steampipe.io/docs/using-steampipe/managing-connections" target="_blank" rel="noopener noreferrer">Query multiple connections at once</a></li>
<li><a href="https://steampipe.io/docs/develop/architecture" target="_blank" rel="noopener noreferrer">Design Principles</a></li>
</ul>

        ]]>
    </description>
</item>


<item>
    <title>
        Simplify Aws Developer Security With Leapp
    </title>
    <link>
        https://www.sheldonhull.com/simplify-aws-developer-security-with-leapp/
    </link>
    <pubDate>
        Mon, 28 Jun 2021 14:57:32 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/simplify-aws-developer-security-with-leapp/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="security-is-necessary-work" class="headerLink">
    <a href="#security-is-necessary-work" class="header-mark"></a>Security Is Necessary Work</h2><p>Security can add overhead, get in the way, complicate development, generally can cause challenges to development efforts.
The balance of security and usability is one that all development organizations have to deal with.</p>
<p>I could be ultra-secure by requiring carrier pigeon multi-factor authentication for my team, but I&rsquo;m not sure that would be well received.</p>
<p><figure><a class="lightgallery" href="/images/2021-06-28-1615-diagram-security-steps.png" title="security steps" data-thumbnail="/images/2021-06-28-1615-diagram-security-steps.png" data-sub-html="<h2>security steps can be painful</h2><p>security steps</p>">
        
    </a><figcaption class="image-caption">security steps can be painful</figcaption>
    </figure></p>
<p>It&rsquo;s also critical and the responsibility of each developer, not just the security team.</p>
<p>Let&rsquo;s take a few simple examples where a local developer can compromise security in AWS by simply taking an easy path.</p>
<ul>
<li>Builds a docker container and uploads to Docker Hub, for a generic tool, but includes embedded AWS credentials for a linter in it.</li>
<li>Uses IAM long-lived keys to use a tool to generate infrastructure as code and commits these to the repository due to not excluding the <code>.env</code> file in the <code>.gitignore</code>.</li>
<li>Uses IAM access keys that are highly privileged as the easy path (over narrowing permission scope), puts these in a vendor site that integrates with AWS, and forgets about it.
Vendor has data compromised and the AWS keys are exposed.</li>
</ul>
<p>There are so many ways that using long-lived IAM credentials can be abused.</p>
<h2 id="assume-roles" class="headerLink">
    <a href="#assume-roles" class="header-mark"></a>Assume Roles</h2><p>It&rsquo;s recommended to use Role Assumption instead of IAM Access keys when possible.</p>
<p>This means all the tooling will leverage AWS Security Token Service and use short-lived ephemeral scoped credentials.</p>
<p>This limits both the blast radius and time of any compromise.</p>
<h2 id="security-as-the-path-of-least-resistance" class="headerLink">
    <a href="#security-as-the-path-of-least-resistance" class="header-mark"></a>Security As The Path Of Least Resistance</h2><p>The problem with this path, is one of effort.</p>
<ul>
<li>If using AWS SSO: You&rsquo;d have to
<ul>
<li>login to your portal</li>
<li>open target account section</li>
<li>get programmatic credentials for the account</li>
<li>paste them into your <code>~/.aws/credentials</code> file</li>
</ul>
</li>
<li>If not using SSO, you&rsquo;d have to use the CLI or appropriate sdk to generate your credentials on demand and then set.</li>
</ul>
<p>The key is that all of these approaches aren&rsquo;t easy as the default.</p>
<p>It&rsquo;s easier to just use an IAM key and move on rather than battle with cli, sdks, and other options.</p>
<p>Tools like <a href="https://github.com/99designs/aws-vault" target="_blank" rel="noopener noreferrer">aws-vault</a> are fantastic in helping with this, but aren&rsquo;t intuitive, work the same way in different platforms, and overall still provide a barrier to making it the easiest path.</p>
<h2 id="leapp" class="headerLink">
    <a href="#leapp" class="header-mark"></a>Leapp</h2><blockquote>
<p>🚀 <a href="https://bit.ly/3A8hosQ" target="_blank" rel="noopener noreferrer">Leapp - One step away from your Cloud</a></p>
</blockquote>
<p><figure><a class="lightgallery" href="/images/2021-06-28-14.50.53-Leapp.png" title="leapp ui" data-thumbnail="/images/2021-06-28-14.50.53-Leapp.png" data-sub-html="<h2>leapp ui</h2><p>leapp ui</p>">
        
    </a><figcaption class="image-caption">leapp ui</figcaption>
    </figure></p>
<p>I came across this app by chance back in March when I was just starting at my new job at <code>$Work</code> and was looking for a tool to help simplify things over <code>aws-vault</code>.
Since I was benefiting from AWS SSO, I was looking for a way to simplify switching roles with SSO, while still maintaining compatibility with the lowest common denominator of the lowly <code>~/.aws/credentials</code> file that I knew worked with Terraform, PowerShell, and other tools equally.</p>
<p>The result? Shipped code on day 3!</p>
<h2 id="what-it-provides" class="headerLink">
    <a href="#what-it-provides" class="header-mark"></a>What It Provides</h2><p>Leapp allows the path of least resistance to best practices with AWS Credentials (as well as Azure).
With AWS SSO, you get the benefit of the portal accounts automatically populated as well. Role assumption becomes the easy path.</p>
<h2 id="how-it-works" class="headerLink">
    <a href="#how-it-works" class="header-mark"></a>How It Works</h2><p>In my scenario, using AWS SSO provides a more complicated route that demonstrates the ease of use.</p>
<ul>
<li>Open App</li>
<li>Click on Account &amp; Role I want to assume, say &ldquo;Dev Account - AWS Admininstrator&rdquo;</li>
<li>Pop-up for SSO process using whatever SSO process is setup</li>
<li>Enter name and password</li>
<li>Enter MFA</li>
<li>Auth dialogue proceeds to confirmation screen of signing in CLI</li>
</ul>
<p><figure><a class="lightgallery" href="/images/2021-06-28-15.42.50-Leapp-sso-cli.png" title="aws ccli sso confirmation" data-thumbnail="/images/2021-06-28-15.42.50-Leapp-sso-cli.png" data-sub-html="<h2>aws-cli-sso-confirmation</h2><p>aws ccli sso confirmation</p>">
        
    </a><figcaption class="image-caption">aws-cli-sso-confirmation</figcaption>
    </figure></p>
<ul>
<li>Done!</li>
</ul>
<p>The result:</p>
<p><code>~/.aws/credentials</code> has the <code>[default]</code> profile containing my STS credentials. This token rotates every <code>n</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> minutes producing ephemeral credentials.</p>
<p><figure><a class="lightgallery" href="/images/2021-06-28-15.44.09-Code.png" title="credentials file changed" data-thumbnail="/images/2021-06-28-15.44.09-Code.png" data-sub-html="<h2>credentials file changed</h2><p>credentials file changed</p>">
        
    </a><figcaption class="image-caption">credentials file changed</figcaption>
    </figure></p>
<h2 id="enhancements" class="headerLink">
    <a href="#enhancements" class="header-mark"></a>Enhancements</h2><h3 id="named-profiles" class="headerLink">
    <a href="#named-profiles" class="header-mark"></a>Named Profiles</h3><p>The <code>0.6.0</code> release that should be out by Jun 30th (I&rsquo;m using pre-release preview) contained some nice enhancements to this.</p>
<p>In prior versions, <code>[default]</code> profile was just replaced with whatever account you selected.</p>
<p>Now, named profiles are supported as well, so you could have multiple assumed roles open at the same time for calling with named profiles.</p>
<h3 id="ssm-sesssion-launcher" class="headerLink">
    <a href="#ssm-sesssion-launcher" class="header-mark"></a>SSM Sesssion Launcher</h3><p>There&rsquo;s a built-in session launcher, allowing searching of EC2 instances and the instance terminal launch of an <code>aws ssm start-session</code> command against the target.</p>
<p><figure><a class="lightgallery" href="/images/2021-06-28-15.49.14-Leapp-ssm-launcher.png" title="leapp AWS ssm launcher" data-thumbnail="/images/2021-06-28-15.49.14-Leapp-ssm-launcher.png" data-sub-html="<h2>leapp aws ssm launcher</h2><p>leapp AWS ssm launcher</p>">
        
    </a><figcaption class="image-caption">leapp aws ssm launcher</figcaption>
    </figure></p>
<h2 id="future" class="headerLink">
    <a href="#future" class="header-mark"></a>Future</h2><p>The future for Leapp is an interesting question.</p>
<p>They are active in engaging for feedback, so this is built with actual user feedback, not in a bubble.
I had an hour call with one of the developers talking about authentication approaches that helped me appreciate how much they want to engage their uses in a true Agile development pattern.
Not only did I learn a bunch, but ended up being able to provide a few ideas for future consideration.
Great discussion with @andreacavagna01.
Give Andrea a follow on <svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"/></svg> <a href="https://twitter.com/a_cava94" target="_blank" rel="noopener noreferrer">twitter</a> and <svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"/></svg> <a href="https://github.com/andreacavagna01" target="_blank" rel="noopener noreferrer">GitHub</a>!</p>
<p>I can see a larger market than developers if a company rolled it out to users, as it would simplify access by analysts, developers, security team members, and others.</p>
<p>It&rsquo;s not:</p>
<ul>
<li>An &ldquo;essential&rdquo; service</li>
<li>&ldquo;Necessary&rdquo; in a strict sense, because things work fine without this tool.</li>
</ul>
<p>Instead it offers:</p>
<ul>
<li>A usability improvement to developers authentication workflow.</li>
<li>The easy path is a secure path</li>
</ul>
<p>For this reason, I&rsquo;m interested to see how adoption by enterprises and organizations will occur.
I&rsquo;ve observed that solving painpoints can both incentive a company if painful enough to adopt new approaches, but also bypass improvements as they aren&rsquo;t &ldquo;essential&rdquo; and things already work, albeit unoptimally.</p>
<p>For me, I&rsquo;m adding it to my AWS essentials, since now I can just focus on work without and improve my credentials handling without it intruding.
I&rsquo;ll continue recommending this to folks, and keep up with what improvements continue to be released from this team.</p>
<p>Keep up with the Leapp roadmap here: <a href="https://github.com/Noovolari/leapp/projects" target="_blank" rel="noopener noreferrer">GitHub Leapp Roadmap</a></p>
<h2 id="resources" class="headerLink">
    <a href="#resources" class="header-mark"></a>Resources</h2><table>
<thead>
<tr>
<th>Resource</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html" target="_blank" rel="noopener noreferrer">Access management for AWS resources - AWS Identity and Access Management</a></td>
</tr>
<tr>
<td><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/resources.html#resources-general-security" target="_blank" rel="noopener noreferrer">Resources to learn more about IAM - AWS Identity and Access Managemen</a></td>
</tr>
<tr>
<td><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html" target="_blank" rel="noopener noreferrer">Using IAM roles - AWS Identity and Access Management</a></td>
</tr>
</tbody>
</table>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I believe 10-20 right now&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>


<item>
    <title>
        The Open Guide to Amazon Web Services
    </title>
    <link>
        https://www.sheldonhull.com/the-open-guide-to-amazon-web-services/
    </link>
    <pubDate>
        Fri, 21 May 2021 11:21:42 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/the-open-guide-to-amazon-web-services/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>The guide you didn&rsquo;t know you needed for AWS.
Came across this when Corey Quinn <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> mentioned this on a podcast.</p>
<p>This is a resource I wish I&rsquo;d known about earlier. It covers the core essentials on services, and cuts through the confusion of the AWS Docs pretty well.</p>
<p>For example, I noticed the ELB references for ALB docs and this caused me some confusion.</p>
<p>Right front and center on Load Balancer Basics <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<blockquote>
<p>Before the introduction of ALBs, &ldquo;Classic Load Balancers&rdquo; were known as &ldquo;Elastic Load Balancers&rdquo; (ELBs), so older documentation, tooling, and blog posts may still reference &ldquo;ELBs&rdquo;.</p>
</blockquote>
<p>I&rsquo;m going to make this a first stop when getting familar with new AWS concepts.</p>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      macOS lifehack
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">If you have <a href="https://kapeli.com/dash" target="_blank" rel="noopener noreferrer">Dash</a> installed, set the repo as a GitHub datasouce, and you can have the entire handbook cached offline as an offline documentation library.</div>
    </div>
  </div>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://twitter.com/QuinnyPig" target="_blank" rel="noopener noreferrer">Corey Quinn</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/open-guides/og-aws#load-balancer-basics" target="_blank" rel="noopener noreferrer">og-aws-loadbalancers</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>


<item>
    <title>
        Create an S3 Lifecycle Policy with PowerShell
    </title>
    <link>
        https://www.sheldonhull.com/create-an-s3-lifecycle-policy-with-powershell/
    </link>
    <pubDate>
        Mon, 18 Jan 2021 18:00:00 -0600
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/create-an-s3-lifecycle-policy-with-powershell/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>First, I&rsquo;m a big believer in doing infrastructure as code.</p>
<p>Using the AWS SDK with any library is great, but for things like S3 I&rsquo;d highly recommend you use a Terraform module such as <a href="https://registry.terraform.io/modules/cloudposse/s3-bucket/aws/latest" target="_blank" rel="noopener noreferrer">Cloudposse terraform-aws-s3-bucket module</a>.
Everything Cloudposse produces has great quality, flexibility with naming conventions, and more.</p>
<p>Now that this disclaimer is out of the way, I&rsquo;ve run into scenarios where you can have a bucket with a large amount of data such as databases which would be good to do some cleanup on before you migrate to newly managed backups.</p>
<p>In my case, I&rsquo;ve run into 50TB of old backups due to tooling issues that prevented cleanup from being successful.
The backup tooling stored a sqlite database in one subdirectory and in another directory the actual backups.</p>
<p>I preferred at this point to only perform the lifecycle cleanup on the backup files, while leaving the sqlite file alone. (side note: i always feel strange typing sqlite, like I&rsquo;m skipping an l 😁).</p>
<p>Here&rsquo;s an example of how to do this from the AWS PowerShell docs.</p>
<p>I modified this example to support providing multiple key prefixes.
What wasn&rsquo;t quite clear when I did this the need to create the entire lifecycle policy collection as a single object and pass this to the command.</p>
<p>If you try to run a loop and create one lifecycle policy for each <code>Write-S3LifecycleConfiguration</code> command, it only kept what last ran.
Instead, ensure you create the entire object as shown in the example, and then you&rsquo;ll be able to have multiple lifecycle policies get attached to your bucket.</p>
<p>Good luck!</p>
<script src="https://gist.github.com/sheldonhull/ad168faccb06cd0387bcebfdf99da3d6.js"></script>


        ]]>
    </description>
</item>


<item>
    <title>
        Using AWS SDK With Go for EC2 AMI Metrics
    </title>
    <link>
        https://www.sheldonhull.com/using-aws-sdk-with-go-for-ec2-ami-metrics/
    </link>
    <pubDate>
        Mon, 07 Dec 2020 17:08:14 -0600
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/using-aws-sdk-with-go-for-ec2-ami-metrics/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="source" class="headerLink">
    <a href="#source" class="header-mark"></a>Source</h2><p>The source code for this repo is located here:</p>
<div class="github-card" data-github="sheldonhull/go-aws-ami-metrics" data-width="400" data-height="" data-theme="default"></div>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>
<h2 id="what-this-is" class="headerLink">
    <a href="#what-this-is" class="header-mark"></a>What This Is</h2><p>This is a quick overview of some AWS SDK Go work, but not a detailed tutorial.
I&rsquo;d love feedback from more experienced Go devs as well.</p>
<p>Feel free to submit a PR with tweaks or suggestions, or just comment at the bottom (which is a GitHub issue powered comment system anyway).</p>
<h2 id="image-age" class="headerLink">
    <a href="#image-age" class="header-mark"></a>Image Age</h2><p>Good metrics can help drive change. If you identify metrics that help you quantify areas of progress in your DevOps process, you&rsquo;ll have a chance to show the progress made and chart the wins.</p>
<p>Knowing the age of the image underlying your instances could be useful if you wanted to measure how often instances were being built and rebuilt.</p>
<p>I&rsquo;m a big fan of making instances as immutable as possible, with less reliance on changes applied by configuration management and build oriented pipelines, and more baked into the image itself.</p>
<p>Even if you don&rsquo;t build everything into your image and are just doing &ldquo;golden images&rdquo;, you&rsquo;ll still benefit from seeing the average age of images used go down.
This would represent more continual rebuilds of your infrastructure.
Containerization removes a lot of these concerns, but not everyone is in a place to go straight to containerization for all deployments yet.</p>
<h2 id="what-using-the-sdk-covers" class="headerLink">
    <a href="#what-using-the-sdk-covers" class="header-mark"></a>What Using the SDK Covers</h2><p>I decided this would be a good chance to use Go as the task is relatively simple and I already know how I&rsquo;d accomplish this in PowerShell.</p>
<p>If you are also on this journey, maybe you&rsquo;ll find this detail inspiring to help you get some practical application in Go.</p>
<p>There are a few steps that would be required:</p>
<ol>
<li>Connection &amp; Authorization</li>
<li>Obtain a List of Images
<ol>
<li>Filtering required</li>
</ol>
</li>
<li>Obtain List of Instances</li>
<li>Match Images to Instances where possible</li>
<li>Produce artifact in file form</li>
</ol>
<p>Warning&hellip; I discovered that the SDK is pretty noisy and probably makes things a bit tougher than just plain idiomatic Go.</p>
<p>If you want to learn pointers and derefrencing with Go&hellip; you&rsquo;ll be a pro by the time you are done with it 😂</p>
<p><figure><a class="lightgallery" href="/images/12-03-10-19-40-pointers-for-everyone.png" title="Everyone Gets a Pointers According to SpongeBob" data-thumbnail="/images/12-03-10-19-40-pointers-for-everyone.png">
        
    </a></figure></p>
<h2 id="why-this-could-be-useful-in-learning-more-go" class="headerLink">
    <a href="#why-this-could-be-useful-in-learning-more-go" class="header-mark"></a>Why This Could Be Useful In Learning More Go</h2><p>I think this is a pretty great small metric oriented collector focus as it ties in with several areas worth future versions.</p>
<p>Since the overall logic is simple there&rsquo;s less need to focus on understanding AWS and more on leveraging different Go features.</p>
<ol>
<li>Version 1: MVP that just products a JSON artifact</li>
<li>Version 2: Wrap up in lambda collector and product s3 artifact</li>
<li>Version 3: Persist metrics to Cloudwatch instead as a metric</li>
<li>Version 4: Datadog or Telegraf plugin</li>
</ol>
<p>From the initial iteration I&rsquo;ll post, there&rsquo;s quite a bit of room for even basic improvement that my quick and dirty solution didn&rsquo;t implement.</p>
<ol>
<li>Use channels to run parallel sessions to collect multi-region metrics in less time</li>
<li>Use sorting with the structs properly would probably cut down on overhead and execution time dramatically.</li>
<li>Timeseries metrics output for Cloudwatch, Datadog, or Telegraf</li>
</ol>
<h2 id="caveat" class="headerLink">
    <a href="#caveat" class="header-mark"></a>Caveat</h2><ol>
<li>Still learning Go. Posting this up and welcome any pull requests or comments (comments will open GitHubub issue automatically).</li>
<li>There is no proper isolation of functions and tests applied. I&rsquo;ve determined it&rsquo;s better to produce and get some volume under my belt that focus on immediately making everything best practices.
Once I&rsquo;ve gotten more familiar with Go proper structure, removing logic from <code>main()</code> and more will be important.</li>
<li>This is not a complete walkthrough of all concepts, more a few things I found interesting along the way.</li>
</ol>
<h2 id="some-observations--notes-on-v1-attempt" class="headerLink">
    <a href="#some-observations--notes-on-v1-attempt" class="header-mark"></a>Some Observations &amp; Notes On V1 Attempt</h2><h3 id="omitempty" class="headerLink">
    <a href="#omitempty" class="header-mark"></a>omitempty</h3><p>Writing to JSON is pretty straight forward, but what I found interesting was handling null values.</p>
<p>If you don&rsquo;t want the default initialized value from the data type to be populated, then you need to specific additional attributes in your struct to let it know how to properly serialize the data.</p>
<p>For instance, I didn&rsquo;t want to populate a null value for <code>AmiAge</code> as <code>0</code> would mess up any averages you were trying to calculate.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ReportAmiAging</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Region</span>             <span class="kt">string</span>     <span class="s">`json:&#34;region&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">InstanceID</span>         <span class="kt">string</span>     <span class="s">`json:&#34;instance-id&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AmiID</span>              <span class="kt">string</span>     <span class="s">`json:&#34;image-id&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ImageName</span>          <span class="o">*</span><span class="kt">string</span>    <span class="s">`json:&#34;image-name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PlatformDetails</span>    <span class="o">*</span><span class="kt">string</span>    <span class="s">`json:&#34;platform-details,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">InstanceCreateDate</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;instance-create-date&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AmiCreateDate</span>      <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;ami-create-date,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AmiAgeDays</span>         <span class="o">*</span><span class="kt">int</span>       <span class="s">`json:&#34;ami-age-days,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In this case, I just set <code>omitempty</code> and it would set to null if I passed in a pointer to the value. For a much more detailed walk-through of this:  <a href="https://www.sohamkamani.com/golang/2018-07-19-golang-omitempty/" target="_blank" rel="noopener noreferrer">Go&rsquo;s Emit Empty Explained</a></p>
<h3 id="multi-region" class="headerLink">
    <a href="#multi-region" class="header-mark"></a>Multi-Region</h3><p>Here things got a little confusing as I wanted to run this concurrently, but shelved that for v1 to deliver results more quickly.</p>
<p>To initialize a new session, I provided my starting point.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">sess</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">session</span><span class="p">.</span><span class="nf">NewSession</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">aws</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Region</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;eu-west-1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">().</span><span class="nf">Str</span><span class="p">(</span><span class="s">&#34;region&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="o">*</span><span class="nx">sess</span><span class="p">.</span><span class="nx">Config</span><span class="p">.</span><span class="nx">Region</span><span class="p">)).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;initialized new session successfully&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next, I had to gather all the regions.
In my scenario, I wanted to add flexibility to ignore regions that were not opted into, to allow less regions to be covered when this setting was correctly used in AWS.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Create EC2 service client
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">client</span> <span class="o">:=</span> <span class="nx">ec2</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">sess</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">regions</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">DescribeRegions</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">DescribeRegionsInput</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">AllRegions</span><span class="p">:</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="kc">true</span><span class="p">),</span> <span class="nx">Filters</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">Filter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Name</span><span class="p">:</span>   <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;opt-in-status&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Values</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="kt">string</span><span class="p">{</span><span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;opted-in&#34;</span><span class="p">),</span> <span class="nx">aws</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;opt-in-not-required&#34;</span><span class="p">)},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                      <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;Failed to parse regions&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The filter syntax is pretty ugly.
Due to the way the SDK works, you can&rsquo;t just pass in <code>*[]string{&quot;opted-in&quot;,&quot;opt-in-not-required}</code> and then reference this.
Instead, you have to set the AWS functions to create pointers to the strings and then dereference.
Deep diving into this further was beyond my time allotted, but made my first usage feel somewhat clunky.</p>
<p>After gathering the regions you&rsquo;d iterate and create a new session per region similar to this.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">region</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">regions</span><span class="p">.</span><span class="nx">Regions</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">().</span><span class="nf">Str</span><span class="p">(</span><span class="s">&#34;region&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">region</span><span class="p">.</span><span class="nx">RegionName</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;--&gt; processing region&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span> <span class="o">:=</span> <span class="nx">ec2</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">sess</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">aws</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span><span class="nx">Region</span><span class="p">:</span> <span class="o">*&amp;</span><span class="nx">region</span><span class="p">.</span><span class="nx">RegionName</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do your magic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="structured-logging" class="headerLink">
    <a href="#structured-logging" class="header-mark"></a>Structured Logging</h3><p>I&rsquo;ve blogged about this before (mostly on microblog).</p>
<p>As a newer gopher, I&rsquo;ve found that <a href="https://github.com/rs/zerolog" target="_blank" rel="noopener noreferrer">zerolog</a> is pretty intuitive.</p>
<p>Structured logging is really important to being able to use log tools and get more value out of your logs in the future, so I personally like the idea of starting with them from the beginning.</p>
<p>Here you could see how you can provide name value pairs, along with the message.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">log</span><span class="p">.</span><span class="nf">Info</span><span class="p">().</span><span class="nf">Int</span><span class="p">(</span><span class="s">&#34;result_count&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">respInstances</span><span class="p">.</span><span class="nx">Reservations</span><span class="p">)).</span><span class="nf">Dur</span><span class="p">(</span><span class="s">&#34;duration&#34;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">)).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;\tresults returned for ec2instances&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Using this provided some nice readable console feedback, along with values that a tool like Datadog&rsquo;s log parser could turn into values you could easily make metrics from.</p>
<h3 id="performance-in-searching" class="headerLink">
    <a href="#performance-in-searching" class="header-mark"></a>Performance In Searching</h3><p>From my prior blog post <a href="/filtering-results-in-go/" title="Filtering Results In Go" rel="">Filtering Results In Go</a> I also talked about this.</p>
<p>The lack of syntactic sugar in Go means this seemed much more verbose than I was expecting.</p>
<p>A few key things I observed here were:</p>
<ol>
<li>Important to set your default layout for time if you want any consistency.</li>
<li>Sorting algorithms, or even just basic sorting, would likely reduce the overall cost of a search like this (I&rsquo;m better pretty dramatically)</li>
<li>Pointers. Everywhere. Coming from a dynamic scripting language like PowerShell/Python, this is a different paradigm.
I&rsquo;m used to isolated functions which have less focus on passing values to modify directly (by value).
In .NET you can pass in variables by reference, which is similar in concept, but it&rsquo;s not something I found a lot of use for in scripting.
I can see the massive benefits when at scale though, as avoiding more memory grants by using existing memory allocations with pointers would be much more efficient. Just have to get used to it!</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GetMatchingImage will search the ami results for a matching id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">GetMatchingImage</span><span class="p">(</span><span class="nx">imgs</span> <span class="p">[]</span><span class="o">*</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">Image</span><span class="p">,</span> <span class="nx">search</span> <span class="o">*</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">parsedTime</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">imageName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">platformDetails</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">layout</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">RFC3339</span> <span class="c1">//&#34;2006-01-02T15:04:05.000Z&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Debug</span><span class="p">().</span><span class="nf">Msgf</span><span class="p">(</span><span class="s">&#34;\t\t\tsearching for: %s&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">search</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Look up the matching image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">imgs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Trace</span><span class="p">().</span><span class="nf">Msgf</span><span class="p">(</span><span class="s">&#34;\t\t\t%s &lt;--&gt; %s&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">ImageId</span><span class="p">,</span> <span class="o">*</span><span class="nx">search</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">ImageId</span><span class="p">)</span> <span class="o">==</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="o">*</span><span class="nx">search</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Trace</span><span class="p">().</span><span class="nf">Msgf</span><span class="p">(</span><span class="s">&#34;\t\t\t %s == %s&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">ImageId</span><span class="p">,</span> <span class="o">*</span><span class="nx">search</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">p</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="nx">layout</span><span class="p">,</span> <span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">CreationDate</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;\t\t\tfailed to parse date from image i.CreationDate&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Debug</span><span class="p">().</span><span class="nf">Str</span><span class="p">(</span><span class="s">&#34;i.CreationDate&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">CreationDate</span><span class="p">).</span><span class="nf">Str</span><span class="p">(</span><span class="s">&#34;parsedTime&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nf">String</span><span class="p">()).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;\t\t\tami-create-date result&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">p</span><span class="p">,</span> <span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">*</span><span class="nx">i</span><span class="p">.</span><span class="nx">PlatformDetails</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// break
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">parsedTime</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;\t\t\tno matching ami found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="multiple-return-properties" class="headerLink">
    <a href="#multiple-return-properties" class="header-mark"></a>Multiple Return Properties</h3><p>While this can be done in PowerShell, I rarely did it in the manner Go does.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">amiCreateDate</span><span class="p">,</span> <span class="nx">ImageName</span><span class="p">,</span> <span class="nx">platformDetails</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetMatchingImage</span><span class="p">(</span><span class="nx">respPrivateImages</span><span class="p">.</span><span class="nx">Images</span><span class="p">,</span> <span class="nx">inst</span><span class="p">.</span><span class="nx">ImageId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Err</span><span class="p">(</span><span class="nx">err</span><span class="p">).</span><span class="nf">Msg</span><span class="p">(</span><span class="s">&#34;failure to find ami&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="feedback-welcome" class="headerLink">
    <a href="#feedback-welcome" class="header-mark"></a>Feedback Welcome</h2><p>As stated, feedback welcome from any more experienced Gophers would be welcome.
Anything for round 2.</p>
<p>Goals for that will be at a minimum:</p>
<ol>
<li>Use <code>go test</code>  to run.</li>
<li>Isolate main and build basic tests for each function.</li>
<li>Decide to wrap up in lambda or plugin.</li>
</ol>

        ]]>
    </description>
</item>


<item>
    <title>
        Improve Your Cloudwatch Debugging Experience With Cw
    </title>
    <link>
        https://www.sheldonhull.com/improve-your-cloudwatch-debugging-experience-with-cw/
    </link>
    <pubDate>
        Wed, 16 Sep 2020 19:45:04 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/improve-your-cloudwatch-debugging-experience-with-cw/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>A quick fix to improve your debugging of remote commands in AWS is to install <a href="https://github.com/lucagrulla/cw" target="_blank" rel="noopener noreferrer">cw</a>.</p>
<p>With a quick install, you can run a command like: <code>cw tail -f --profile=qa --region=eu-west-1 ssm/custom-automation-docs/my-custom-doc</code>.
This will give you a real-time stream of what&rsquo;s running.</p>
<p>You can also use the AWS Visual Studio Code extension, but I prefer having a terminal open streaming this as I don&rsquo;t have to go in and refresh any further tools to see what&rsquo;s happening.
I tend to always start with a single instance/resource for debugging so this is a great way to remove the barrier to visibility a bit more.</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Rebuild Dash Index Due to Corrupted Index
    </title>
    <link>
        https://www.sheldonhull.com/rebuild-dash-index-due-to-corrupted-index/
    </link>
    <pubDate>
        Tue, 01 Sep 2020 12:33:25 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/rebuild-dash-index-due-to-corrupted-index/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>I use <a href="https://bit.ly/3gWSLEJ" target="_blank" rel="noopener noreferrer">Dash</a> for improved doc access.
Terraform updated recently to <code>0.13.x</code> and I began having odd issues with AWS provider results coming through.
If you need to rollback, just go to the preferences and pick an older docset, in my case <code>0.13.0</code> worked correctly.
Make sure to remove the problematic version (the uninstall refers to just the most recent, not any additional versions you selected under the dropdown)</p>
<p>If the index doesn&rsquo;t rebuild, you can close the app, manually remove the index, and it will rebuild on open.
I&rsquo;m pretty sure you don&rsquo;t need to do this if you use the uninstall option in the dialogue.</p>
<p>On macOS 10.15, you can find the index at <code>~/Library/Application Support/Dash/Data/manIndex.dsidx</code> and delete this.
Reopen Dash and it will rebuild the index.</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Assume a role with AWS PowerShell Tools
    </title>
    <link>
        https://www.sheldonhull.com/assume-a-role-with-aws-powershell-tools/
    </link>
    <pubDate>
        Tue, 21 Jul 2020 20:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/assume-a-role-with-aws-powershell-tools/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="assume-a-role" class="headerLink">
    <a href="#assume-a-role" class="header-mark"></a>Assume A Role</h2><p>I&rsquo;ve had some issues in the past working with <code>AWS.Tools</code> PowerShell SDK and correctly assuming credentials.</p>
<p>By default, most of the time it was easier to use a dedicated IAM credential setup for the purpose.</p>
<p>However, as I&rsquo;ve wanted to run some scripts across multiple accounts, the need to simplify by assuming a role has been more important.</p>
<p>It&rsquo;s also a better practice than having to manage multiple key rotations in all accounts.</p>
<p>First, as I&rsquo;ve had the need to work with more tooling, I&rsquo;m not using the SDK encrypted <code>json</code> file.</p>
<p>Instead, I&rsquo;m leveraging the <code>~/.aws/credentials</code> profile in the standard <code>ini</code> format to ensure my tooling (docker included) can pull credentials correctly.</p>
<p>Configure your file in the standard format.</p>
<p>Setup a <code>[default]</code> profile in your credentials manually or through <code>Initialize-AWSDefaultConfiguration -ProfileName 'my-source-profile-name' -Region 'us-east-1' -ProfileLocation ~/.aws/credentials</code>.</p>
<p>If you don&rsquo;t set this, you&rsquo;ll need to modify the examples provided to include the source <code>profilename</code>.</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=aws-cred-example"></script>

<p>Next, ensure you provide the correct Account Number for the role you are trying to assume, while the MFA number is going to come from the &ldquo;home&rdquo; account you setup.
For the <code>Invoke-Generate</code>, I use a handy little generator from <code>Install-Module NameIt -Scope LocalUser -Confirm:$false</code>.</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=aws-sts-assume-role-example.ps1"></script>

<p>Bonus: Use Visual Studio Code Snippets and drop this in your snippet file to quickly configure your credentials in a script with minimal fuss. 🎉</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=vscode-snippet.json"></script>

<p>I think the key area I&rsquo;ve missed in the past was providing the mfa and token in my call, or setting up this correctly in the configuration file.</p>
<h2 id="temporary-credentials" class="headerLink">
    <a href="#temporary-credentials" class="header-mark"></a>Temporary Credentials</h2><p>In the case of needing to generate a temporary credential, say for an environment variable based run outside of the SDK tooling, this might also provide something useful.</p>
<p>It&rsquo;s one example of further reducing risk vectors by only providing a time-limited credential to a tool you might be using (can limit to a smaller time-frame).</p>
<script src="https://gist.github.com/sheldonhull/e73dc7689be62dc7e8946d4ab948728b.js?file=generate-temporary-credentials.ps1"></script>

<h2 id="aws-vault" class="headerLink">
    <a href="#aws-vault" class="header-mark"></a>AWS-Vault</h2><p>Soon to come, using <a href="https://bit.ly/3eTwztU" target="_blank" rel="noopener noreferrer">aws-vault</a> to improve the security of your AWS sdk credentials further by simplifying role assumption and temporary sessions.</p>
<p>I&rsquo;ve not ironed out exactly how to deal with some issues with using this great session tool when jumping between various tools such as PowerShell, python, docker, and more, so for now, I&rsquo;m not able to provide all the insight.
Hopefully, I&rsquo;ll add more detail to leveraging this once I get things ironed out.</p>
<p>Leave a comment if this helped you out or if anything was confusing so I can make sure to improve a quick start like this for others. 🌮</p>

        ]]>
    </description>
</item>


<item>
    <title>
        2020-05-07T22:54:34&#43;00:00
    </title>
    <link>
        https://www.sheldonhull.com/2020-05-07t225434-0000/
    </link>
    <pubDate>
        Thu, 07 May 2020 22:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/2020-05-07t225434-0000/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Kept getting an error <code>Incorrect syntax near the keyword 'read'</code> when running the some updated PowerShell 7 in lambda with the <code>dotnet3.1</code> sdk. Was troubleshooting loading types thinking I was having path issues.</p>
<p>Turns out one of these things is not like the other. 🤣</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">set</span><span class="w"> </span><span class="n">nocount</span><span class="w"> </span><span class="k">on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">transaction</span><span class="w"> </span><span class="k">isolation</span><span class="w"> </span><span class="k">read</span><span class="w"> </span><span class="k">uncommitted</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">set</span><span class="w"> </span><span class="n">nocount</span><span class="w"> </span><span class="k">on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">transaction</span><span class="w"> </span><span class="k">isolation</span><span class="w"> </span><span class="k">level</span><span class="w"> </span><span class="k">read</span><span class="w"> </span><span class="k">uncommitted</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>I think this explains why &ldquo;error during &ldquo;read&rdquo;.
Maybe I should have run in my Azure Data Studio session before trying serverless 😀</p>

        ]]>
    </description>
</item>
</channel>
</rss>

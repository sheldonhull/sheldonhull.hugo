<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Shell - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/shell/</link>
        <description>Shell - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 03 May 2023 18:07:04 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/shell/" rel="self" type="application/rss+xml" />

<item>
    <title>
        How Many Commits Did You Make in Last Month
    </title>
    <link>
        https://www.sheldonhull.com/how-many-commits-did-you-make-in-last-month/
    </link>
    <pubDate>
        Wed, 03 May 2023 18:07:04 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/how-many-commits-did-you-make-in-last-month/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Been playing with <a href="https://github.com/di-sukharev/opencommit" target="_blank" rel="noopener noreferrer">opencommit</a> and wanted to assess how much using it on every single commit I still could track locally might cost me.</p>
<p>This script loops through all the <code>${HOME}/git</code> directories and totals the commits made in last month.</p>
<p>Looks like using OpenAI&rsquo;s api would cost me about $4-$5 if I&rsquo;d used on every single commit and the size of the commits was smaller.</p>
<p>Not as bad as I&rsquo;d thought it would be.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Use https://github.com/sharkdp/fd</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -e
</span></span><span class="line"><span class="cl"><span class="c1"># Initialize variables</span>
</span></span><span class="line"><span class="cl"><span class="nv">total_commits</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nv">username</span><span class="o">=</span><span class="k">$(</span>whoami<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Capture the directories found by fd to a variable</span>
</span></span><span class="line"><span class="cl"><span class="nv">directories</span><span class="o">=</span><span class="k">$(</span>fd -H --max-depth <span class="m">6</span> <span class="s2">&#34;^\.git</span>$<span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/git&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Loop through each directory</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> directory in <span class="nv">$directories</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Change to the git directory</span>
</span></span><span class="line"><span class="cl">    <span class="nb">printf</span> <span class="s2">&#34;...⚙️ </span><span class="k">$(</span>dirname <span class="nv">$directory</span><span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">pushd</span> <span class="s2">&#34;</span><span class="k">$(</span>dirname <span class="s2">&#34;</span><span class="nv">$directory</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the repo name</span>
</span></span><span class="line"><span class="cl">    <span class="nv">repo</span><span class="o">=</span><span class="k">$(</span>basename <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">&#34;</span><span class="k">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the count of commits made by a user with the partial name match of &#34;username&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">commits</span><span class="o">=</span><span class="k">$(</span>git log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                --branches <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                --author<span class="o">=</span><span class="s2">&#34;.*</span><span class="si">${</span><span class="nv">username</span><span class="si">}</span><span class="s2">.*&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                --since<span class="o">=</span><span class="s2">&#34;1 month ago&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                --no-merges <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                --format<span class="o">=</span><span class="s2">&#34;%H&#34;</span> <span class="p">|</span> wc -l <span class="p">|</span> awk <span class="s2">&#34;{print \$1}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Output the repo name and count of commits</span>
</span></span><span class="line"><span class="cl">    <span class="nb">printf</span> <span class="s2">&#34;\t%-50s %-50s \n&#34;</span> <span class="s2">&#34;</span><span class="nv">$repo</span><span class="s2">&#34;</span>, <span class="s2">&#34;</span><span class="nv">$commits</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Add to the total count of commits</span>
</span></span><span class="line"><span class="cl">    <span class="nv">total_commits</span><span class="o">=</span><span class="k">$((</span>total_commits <span class="o">+</span> commits<span class="k">))</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">popd</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Output the total count of commits</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Total commits: </span><span class="nv">$total_commits</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        shell
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/shell/shell/
    </link>
    <pubDate>
        Fri, 30 Oct 2020 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/shell/shell/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>This is a mix of shell, linux, and macOS commands.
Comments are welcome with any corrections or suggestions.</p>
<h2 id="cli-usage" class="headerLink">
    <a href="#cli-usage" class="header-mark"></a>CLI Usage</h2><h3 id="powershell--bash-comparison" class="headerLink">
    <a href="#powershell--bash-comparison" class="header-mark"></a>PowerShell &amp; Bash Comparison</h3><h4 id="brevity" class="headerLink">
    <a href="#brevity" class="header-mark"></a>Brevity</h4><p>See all aliases with <code>Get-Alias</code> and to expedite your CLI usage you could use a gist like this: <a href="https://gist.github.com/JustinGrote/3eeec61472da1aa9f86a8f746eac905f" target="_blank" rel="noopener noreferrer">Aliaser.ps1</a>.</p>
<p>Note that PowerShell eschews brevity for clarity, but you can alias anything you like to be nearly as succinct as bash commands.</p>
<blockquote>
<p>IMO readability/brevity trumps succinctness. However for interactive terminal usage, aliasing can be a great tool. Use VSCode to auto-expand aliases into fully qualified functions if you decide to turn your adhoc work into a script file.</p>
</blockquote>
<p>Using <code>pushd</code> in a PowerShell session actually aliases to <code>Push-Location</code>.
This pushes the location into a stack for later retrieval.</p>
<h4 id="powershell-works-with-native-tooling" class="headerLink">
    <a href="#powershell-works-with-native-tooling" class="header-mark"></a>PowerShell Works With Native Tooling</h4><p>I&rsquo;ve included the similar PowerShell command to help those jumping between multiple shells.</p>
<p>Please note that unlike Python, PowerShell works as a terminal with native tools + scripting language.</p>
<p>You can use <code>pwsh</code> in almost every case on Linux &amp; macOS and use the same tools you prefer, while being able to execute PowerShell commands as well.</p>
<p>For example, something like AWS CLI returning JSON could be automatically unmarshaled into an object instead of using <code>jq</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">&amp;</span> <span class="p">(</span><span class="n">aws</span> <span class="n">ec2</span> <span class="nb">describe-instances</span> <span class="p">|</span> <span class="nb">ConvertFrom-Json</span><span class="p">).</span><span class="py">Instances</span><span class="p">.</span><span class="py">InstanceId</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Another example is paths.</p>
<p>Prerequiresites for the PowerShell examples:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">Microsoft</span><span class="p">.</span><span class="py">PowerShell</span><span class="p">.</span><span class="py">ConsoleGuiTools</span> <span class="n">-Scope</span> <span class="n">CurrentUser</span> <span class="n">-Force</span>
</span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>Command</th>
<th>shell</th>
<th>pwsh</th>
</tr>
</thead>
<tbody>
<tr>
<td>View history</td>
<td><code>history</code></td>
<td><code>Get-History</code></td>
</tr>
<tr>
<td>Execute Line from History</td>
<td><code>!Number</code></td>
<td>`Invoke-Expression (Get-History</td>
</tr>
<tr>
<td>Execute Last Command With Sudo</td>
<td><code>sudo !!</code></td>
<td></td>
</tr>
<tr>
<td>Check if a file exists</td>
<td><code>test -f ./filename</code></td>
<td><code>Test-Path $filename -PathType Leaf</code> or <code>[io.file]::exists($filename)</code></td>
</tr>
</tbody>
</table>
<h2 id="installation" class="headerLink">
    <a href="#installation" class="header-mark"></a>Installation</h2><h3 id="common-app-installs" class="headerLink">
    <a href="#common-app-installs" class="header-mark"></a>Common App Installs</h3><table>
<thead>
<tr>
<th>Application</th>
<th>Notes</th>
<th>Install Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>HomeBrew</td>
<td>Works on Linux and macOS now 👏.</td>
<td><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</code></td>
</tr>
</tbody>
</table>
<h3 id="ansible-initialization" class="headerLink">
    <a href="#ansible-initialization" class="header-mark"></a>Ansible Initialization</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">brew install python3 ansible
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo python3 -m pip install --upgrade pip
</span></span><span class="line"><span class="cl"><span class="nv">CFLAGS</span><span class="o">=</span>-Qunused-arguments <span class="nv">CPPFLAGS</span><span class="o">=</span>-Qunused-arguments python3 -m pip install --user ansible
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;======== Ansible Version Info ======== &#34;</span>
</span></span><span class="line"><span class="cl">ansible-galaxy --version
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="a-few-more-ansible-commands" class="headerLink">
    <a href="#a-few-more-ansible-commands" class="header-mark"></a>A Few More Ansible Commands</h3><table>
<thead>
<tr>
<th>Command</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>Run ansible playbook against a specific tag</td>
<td><code>ansible-playbook main.yml --inventory inventory --ask-become-pass -t 'ui'</code></td>
</tr>
<tr>
<td>Install requirements</td>
<td><code>ansible-galaxy collection install community.general &amp;&amp; ansible-galaxy install --role-file requirements.yml --force --ignore-errors</code></td>
</tr>
</tbody>
</table>
<h3 id="installing-go-task" class="headerLink">
    <a href="#installing-go-task" class="header-mark"></a>Installing go-task</h3><p>This tool is great for cross-platform shell scripting as it runs all the commands in the <code>Taskfile.yml</code> using a built in go shell library that supports bash syntax (and others).</p>
<p>Quickly get up and running using the directions here: <a href="https://github.com/go-task/task/blob/master/docs/installation.md" target="_blank" rel="noopener noreferrer">Install Task</a></p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>Default Installation to local directory with debug logging enabled</td>
<td><code>sh -c &quot;$(curl -ssL https://taskfile.dev/install.sh)&quot; -- -d</code></td>
</tr>
<tr>
<td>Installation for user level access</td>
<td><code>sh -c &quot;$(curl -ssL https://taskfile.dev/install.sh)&quot; -- -d -b /usr/local/bin</code></td>
</tr>
</tbody>
</table>
<h3 id="installing-brew-packages" class="headerLink">
    <a href="#installing-brew-packages" class="header-mark"></a>Installing Brew Packages</h3><p>This eliminates any attempt to install if the package already exists.
For quick adhoc installs, this is useful.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Minimize Homebrew updates for each run, making things faster</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HOMEBREW_NO_AUTO_UPDATE</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># if linux install script, might want to include this: export PATH=&#34;/home/linuxbrew/.linuxbrew/bin:$PATH&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example of installing with a tap</span>
</span></span><span class="line"><span class="cl">brew tap lucagrulla/tap
</span></span><span class="line"><span class="cl"><span class="nv">package</span><span class="o">=</span>cw
</span></span><span class="line"><span class="cl">brew list <span class="nv">$package</span> <span class="p">&amp;</span>&gt;/dev/null <span class="o">||</span> brew install <span class="nv">$package</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># git-delta needs an updated version, so make sure it&#39;s available</span>
</span></span><span class="line"><span class="cl"><span class="nv">package</span><span class="o">=</span>less
</span></span><span class="line"><span class="cl">brew list <span class="nv">$package</span> <span class="p">&amp;</span>&gt;/dev/null <span class="o">||</span> brew install <span class="nv">$package</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">package</span><span class="o">=</span>git-delta
</span></span><span class="line"><span class="cl">brew list <span class="nv">$package</span> <span class="p">&amp;</span>&gt;/dev/null <span class="o">||</span> brew install <span class="nv">$package</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reduce-noise-with-progress-bar" class="headerLink">
    <a href="#reduce-noise-with-progress-bar" class="header-mark"></a>Reduce Noise With Progress Bar</h3><p>Use unzip with a progress bar to display progress, rather than the thousands of lines of output.
This is an example of installing the AWS CLI v2 in a Dockerfile, while not forcing the output of each line when unzipping.</p>
<p>This shows how to use the <code>pv</code> command line tool to help display progress in both a count fashion, and also by just using it as a timer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">RUN apt-get -yqq update --fix-missing <span class="o">&amp;&amp;</span> apt-get -yqq install pv <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> mkdir -p ./tmpinstall <span class="o">&amp;&amp;</span> curl --silent <span class="s2">&#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&#34;</span> -o <span class="s2">&#34;./tmpinstall/awscliv2.zip&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> <span class="nv">COUNT</span><span class="o">=</span><span class="sb">`</span>unzip -q -l <span class="s2">&#34;./tmpinstall/awscliv2.zip&#34;</span> <span class="p">|</span> wc -l<span class="sb">`</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> mkdir -p ./tmpinstall/aws <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> unzip <span class="s2">&#34;./tmpinstall/awscliv2.zip&#34;</span> -d <span class="s2">&#34;./tmpinstall/&#34;</span>  <span class="p">|</span> pv -l -s <span class="nv">$COUNT</span> &gt;/dev/null <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> ./tmpinstall/aws/install --update <span class="p">|</span> <span class="o">(</span>pv --timer --name <span class="s2">&#34;🤖 awscli&#34;</span><span class="o">)</span>  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> rm -rf ./tmpinstall/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> apt-get clean -y <span class="o">&amp;&amp;</span> rm -rf /var/lib/apt/lists/* /tmp/library-scripts
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="check-for-and-install-tooling" class="headerLink">
    <a href="#check-for-and-install-tooling" class="header-mark"></a>Check for And Install Tooling</h3><p>This can help provide an example of how to double-check that some installed tools are available as part of a setup script.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">command</span> -v ghq <span class="p">&amp;</span>&gt;/dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s1">&#39;✔️ ghq installed&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    warning <span class="s2">&#34;❌ failed to find ghq, attempting to setup via source&#34;</span>
</span></span><span class="line"><span class="cl">    go install github.com/x-motemen/ghq@latest <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&#34;✅ installed ghq&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">command</span> -v gum <span class="p">&amp;</span>&gt;/dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s1">&#39;✔️ gum installed&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    warning <span class="s2">&#34;❌ failed to find gum, attempting to setup via source&#34;</span>
</span></span><span class="line"><span class="cl">    go install github.com/charmbracelet/gum@latest <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&#34;✅ installed gum&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> ! <span class="nb">command</span> -v gum <span class="p">&amp;</span>/dev/null<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s1">&#39;might need go binaries on path, trying now..., try adding the line to your .zshrc&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>go env GOPATH<span class="k">)</span><span class="s2">/bin:</span><span class="si">${</span><span class="nv">PATH</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="conditional" class="headerLink">
    <a href="#conditional" class="header-mark"></a>Conditional</h2><p>Only Proceed If First Condition Returns Nothing</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">package</span><span class="o">=</span>cw
</span></span><span class="line"><span class="cl">brew list <span class="nv">$package</span> <span class="p">&amp;</span>&gt;/dev/null <span class="o">||</span> brew install <span class="nv">$package</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>On error do this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">test</span> -f nonexistentfile <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&#34;😢 boo. file does not exist&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>On success do the next command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">test</span> -f ~/.bashrc <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&#34;✅ congrats, you have a bashrc file&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="web-requests" class="headerLink">
    <a href="#web-requests" class="header-mark"></a>Web Requests</h2><h3 id="fetch-a-github-release" class="headerLink">
    <a href="#fetch-a-github-release" class="header-mark"></a>Fetch A GitHub Release</h3><p>This fetches the latest release from GitHub, parses the json, then moves it to the target path.
This release doesn&rsquo;t wrap in a tar file; it&rsquo;s just a binary.</p>
<p>This might fail due to anonymous API hits on GitHub API being rate-limited aggressively.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Grabbing latest release of fetch (a GitHub CLI for release downloads)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">USER</span><span class="o">=</span>gruntwork-io
</span></span><span class="line"><span class="cl"><span class="nv">REPO</span><span class="o">=</span>fetch
</span></span><span class="line"><span class="cl"><span class="nv">TAG</span><span class="o">=</span>latest
</span></span><span class="line"><span class="cl"><span class="nv">ASSET</span><span class="o">=</span>fetch_linux_amd64
</span></span><span class="line"><span class="cl"><span class="nv">FILE</span><span class="o">=</span>fetch
</span></span><span class="line"><span class="cl">curl --silent <span class="s2">&#34;https://api.github.com/repos/</span><span class="nv">$USER</span><span class="s2">/</span><span class="nv">$REPO</span><span class="s2">/releases/latest&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> jq -r <span class="s2">&#34;.assets[] | select(.name | test(\&#34;</span><span class="si">${</span><span class="nv">ASSET</span><span class="si">}</span><span class="s2">\&#34;)) | .browser_download_url&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> wget -qi - --output-document<span class="o">=</span><span class="nv">$FILE</span> --progress<span class="o">=</span>bar:force
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Setting as executable and moving to /usr/local/bin&#34;</span>
</span></span><span class="line"><span class="cl">chmod +x <span class="nv">$FILE</span>
</span></span><span class="line"><span class="cl">sudo mv fetch /usr/local/bin
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Downloaded </span><span class="k">$(</span>fetch --version<span class="k">)</span><span class="s2"> successfully&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fetch-a-github-release-that-requires-extraction" class="headerLink">
    <a href="#fetch-a-github-release-that-requires-extraction" class="header-mark"></a>Fetch a GitHub Release That Requires Extraction</h3><p>This is more of a Linux focused shell script example for grabbing a release and extracting the tar file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>sudo apt -qqy update
</span></span><span class="line"><span class="cl">sudo apt -qqy -o Dpkg::Progress-Fancy<span class="o">=</span><span class="nb">true</span> install wget
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl -s https://api.github.com/repos/GitTools/GitVersion/releases/latest <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> grep <span class="s2">&#34;browser_download_url.*gitversion\-debian.*\-x64.*\.tar\.gz&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> cut -d <span class="s2">&#34;:&#34;</span> -f 2,3 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> tr -d <span class="se">\&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> wget -qi -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">tarball</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>find . -name <span class="s2">&#34;gitversion-debian*.tar.gz&#34;</span><span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">tar -xzf <span class="nv">$tarball</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo chmod +x gitversion
</span></span><span class="line"><span class="cl">sudo mv gitversion /usr/local/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo rm <span class="nv">$tarball</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;&gt;&gt;&gt;&gt; gitversion version: </span><span class="k">$(</span>~/gitversion /version<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Trying to install dotnet tools version&#34;</span>
</span></span><span class="line"><span class="cl">dotnet tool update --global GitVersion.Tool
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="concepts" class="headerLink">
    <a href="#concepts" class="header-mark"></a>Concepts</h2><h3 id="shebang" class="headerLink">
    <a href="#shebang" class="header-mark"></a>Shebang</h3><p>A common pattern is just <code>#!/bin/bash</code>.</p>
<p>To make your script more portable, by respecting the users&rsquo; env preferences try:</p>
<ul>
<li><code>#!/usr/bin/env bash</code></li>
<li><code>#!/usr/bin/env zsh</code></li>
<li><code>#!/usr/bin/env sh</code></li>
</ul>
<p>Some good info on this from <a href="https://bash.cyberciti.biz/guide/Shebang#.2Fusr.2Fbin.2Fenv_bash" target="_blank" rel="noopener noreferrer">Shebang</a></p>
<ul>
<li>If you do not specify an interpreter line, the default is usually the <code>/bin/sh</code></li>
<li>For a system boot script, use <code>/bin/sh</code></li>
<li>The <code>/usr/bin/env</code> run a program such as a bash in a modified environment. It makes your bash script portable. The advantage of #!/usr/bin/env bash is that it will use whatever bash executable appears first in the running user&rsquo;s <code>$PATH</code> variable.</li>
</ul>
<h2 id="ssh" class="headerLink">
    <a href="#ssh" class="header-mark"></a>SSH</h2><p>Setup your permissions for <code>~/.ssh</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Setting full user permissions for ~/.ssh&#34;</span>
</span></span><span class="line"><span class="cl">chmod -R u+rwX ~/.ssh
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Remove group access for ~/.ssh&#34;</span>
</span></span><span class="line"><span class="cl">chmod go-rwx ~/.ssh
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;now set any pem files to chmd 400 \$key to ensure read-only&#34;</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0600</span> ~/.ssh/id_rsa
</span></span></code></pre></td></tr></table>
</div>
</div><p>For why 0600 see footnote.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<div
    class="details admonition tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-lightbulb fa-fw"
      ></i>
      Troubleshooting macOS permissions
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>I&rsquo;ve had issues with macOS adding an <code>@</code> with ACL issues on the ssh key&rsquo;s when downloaded.</p>
<p>To resolve this, just copy the contents of the ssh key to a new file and remove the original.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat original_key.pem &gt; key.pem
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://linuxize.com/post/how-to-list-users-in-linux/" target="_blank" rel="noopener noreferrer">How To List Users In Linux</a></p>
</div>
    </div>
  </div>
<h2 id="search-contents-of-a-file" class="headerLink">
    <a href="#search-contents-of-a-file" class="header-mark"></a>Search Contents of a File</h2><p>Using <code>ripgrep</code> you can search very quickly through file contents.</p>
<p>In this example, I&rsquo;m searching for a text string in a PowerShell file that VSCode wasn&rsquo;t able to find after 1-2 mins due to the size of the directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">rg -l -c <span class="s2">&#34;Start-ThreadJob&#34;</span> *.ps1
</span></span></code></pre></td></tr></table>
</div>
</div><div
    class="details admonition note
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Benchmark
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>I ran a quick test to see how ripgrep performed compared to normal grep search.
Grep wasn&rsquo;t optimized, and by default is single threaded.
Ripgrep is multithreaded, automatically honors gitignore and more.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">grep -rnw <span class="nv">$HOME</span> -e <span class="s1">&#39;Start-ThreadJob&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>Tool</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ripgrep</code></td>
<td>5m6s</td>
</tr>
<tr>
<td><code>grep</code></td>
<td>1h+</td>
</tr>
</tbody>
</table></div>
    </div>
  </div>
<h2 id="using-yq-to-edit-yaml-files-for-datadog-service" class="headerLink">
    <a href="#using-yq-to-edit-yaml-files-for-datadog-service" class="header-mark"></a>Using yq to edit yaml files for Datadog service</h2><blockquote>
<p><a href="https://github.com/mikefarah/yq" target="_blank" rel="noopener noreferrer">GitHub - mikefarah/yq: yq is a portable command-line YAML processor</a></p>
</blockquote>
<p>I&rsquo;ve used yq to edit yaml files programmatically, such as datadog configuration files.</p>
<p>Here&rsquo;s a few samples on how to use this tool, using datadog agent config files as an example.</p>
<h3 id="quick-install-of-datadog-service" class="headerLink">
    <a href="#quick-install-of-datadog-service" class="header-mark"></a>Quick Install of Datadog Service</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">DD_HOST_TAGS</span><span class="o">=</span><span class="s2">&#34;type:custom-server,stage:dev&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">DD_HOSTNAME</span><span class="o">=</span><span class="s2">&#34;custom-server&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">DD_AGENT_MAJOR_VERSION</span><span class="o">=</span><span class="m">7</span> <span class="nv">DD_API_KEY</span><span class="o">=</span>FancyAPIKey <span class="nv">DD_SITE</span><span class="o">=</span><span class="s2">&#34;datadoghq.com&#34;</span> bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">sudo chmod -R <span class="m">777</span> /etc/datadog-agent/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="start-and-stop-the-datadog-services" class="headerLink">
    <a href="#start-and-stop-the-datadog-services" class="header-mark"></a>Start and stop the datadog services</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl stop datadog-agent
</span></span><span class="line"><span class="cl">sudo systemctl start datadog-agent
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="edit-default-datadog-config-file" class="headerLink">
    <a href="#edit-default-datadog-config-file" class="header-mark"></a>Edit Default Datadog Config File</h3><p>Next, configure the main configuration with custom tags and host name, including additional EC2 tags, metadata, and a custom tag to show the specific load test this is capturing.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">config</span><span class="o">=</span>/etc/datadog-agent/datadog.yaml
</span></span><span class="line"><span class="cl"><span class="nv">nametag</span><span class="o">=</span>mycustom-server
</span></span><span class="line"><span class="cl"><span class="nv">testname</span><span class="o">=</span>bigloadtest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;set the basic config for app&#34;</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">.hostname = \&#34;</span><span class="nv">$nametag</span><span class="s2">\&#34; |
</span></span></span><span class="line"><span class="cl"><span class="s2">.process_config.enabled = true |
</span></span></span><span class="line"><span class="cl"><span class="s2">.tags = [\&#34;scope:loadtest\&#34;,\&#34;testname:</span><span class="nv">$testname</span><span class="s2">\&#34;] |
</span></span></span><span class="line"><span class="cl"><span class="s2">.env = \&#34;dev\&#34; |
</span></span></span><span class="line"><span class="cl"><span class="s2">.cloud_provider_metadata = [\&#34;aws\&#34;] |
</span></span></span><span class="line"><span class="cl"><span class="s2">.collect_ec2_tags = true&#34;</span> --inplace <span class="nv">$config</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> <span class="s2">&#34;.hostname, .process_config.enabled, .tags, .env, .cloud_provider_metadata ,.collect_ec2_tags&#34;</span> <span class="nv">$config</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="enable-datadog-network-monitoring" class="headerLink">
    <a href="#enable-datadog-network-monitoring" class="header-mark"></a>Enable Datadog Network Monitoring</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;set the process level config to search for ssh/sshd metrics&#34;</span>
</span></span><span class="line"><span class="cl">sudo cp /etc/datadog-agent/system-probe.yaml.example /etc/datadog-agent/system-probe.yaml
</span></span><span class="line"><span class="cl"><span class="nv">netconfig</span><span class="o">=</span>/etc/datadog-agent/system-probe.yaml
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> <span class="s1">&#39;.network_config.enabled&#39;</span> <span class="nv">$netconfig</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> --inplace  <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">.network_config.enabled = true
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="nv">$netconfig</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> <span class="s1">&#39;.network_config.enabled&#39;</span> <span class="nv">$netconfig</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="enable-datadog-process-level-tracking" class="headerLink">
    <a href="#enable-datadog-process-level-tracking" class="header-mark"></a>Enable Datadog Process Level Tracking</h3><p>Enable process level tracking, with a specific match on <code>ssh, sshd</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;set the process level config to search for ssh/sshd metrics&#34;</span>
</span></span><span class="line"><span class="cl">sudo cp /etc/datadog-agent/conf.d/process.d/conf.yaml.example  /etc/datadog-agent/conf.d/process.d/conf.yaml
</span></span><span class="line"><span class="cl"><span class="nv">processconfig</span><span class="o">=</span>/etc/datadog-agent/conf.d/process.d/conf.yaml
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> <span class="s1">&#39;.instances&#39;</span> <span class="nv">$processconfig</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> --inplace  <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">.instances[0].name = &#34;ssh&#34; |
</span></span></span><span class="line"><span class="cl"><span class="s1">.instances[0].search_string = [&#34;ssh&#34;,&#34;sshd&#34;]
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="nv">$processconfig</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> --inplace  <span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">.instances[1].name = &#34;myprocess&#34; |
</span></span></span><span class="line"><span class="cl"><span class="s1">.instances[1].search_string = [&#34;myprocess&#34;]
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span> <span class="nv">$processconfig</span>
</span></span><span class="line"><span class="cl">yq <span class="nb">eval</span> <span class="s1">&#39;.instances&#39;</span> <span class="nv">$processconfig</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can do a lot with <code>yq</code>.</p>
<h2 id="parse-kubernetes-secrets-using-jq" class="headerLink">
    <a href="#parse-kubernetes-secrets-using-jq" class="header-mark"></a>Parse Kubernetes Secrets Using JQ</h2><p>Using jq, you can parse out secrets from base64 encoded values for some quick scripting.</p>
<blockquote>
<p>NOTE: This uses <a href="https://github.com/abhimanyu003/sttr" target="_blank" rel="noopener noreferrer">sttr</a> but you can modify to whatever your platform provides (zsh <code>base64 -decode</code> or pwsh <code>[System.Convert]::FromBase64String($Base64String)</code>))
If you have Go installed then run <code>go install github.com/abhimanyu003/sttr@latest</code>.</p>
</blockquote>
<p>This example parses an encoded JSON string to help registry an Azure Container Registry from a Kubernetes stored secret.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">namespace</span><span class="o">=</span><span class="s2">&#34;mynamespace&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">secretname</span><span class="o">=</span><span class="s2">&#34;mysecretname&#34;</span>
</span></span><span class="line"><span class="cl">kubectl config set-context --current --namespace<span class="o">=</span><span class="nv">$namespace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">configEncoded</span><span class="o">=</span><span class="k">$(</span>kubectl get secret <span class="nv">$secretname</span> -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.data.\.dockerconfigjson}&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">configDecoded</span><span class="o">=</span><span class="k">$(</span>sttr base64-decode <span class="nv">$configEncoded</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">registry</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$configDecoded</span> <span class="p">|</span> jq -r <span class="s1">&#39;.auths | keys[0]&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">creds</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$configDecoded</span> <span class="p">|</span> jq -r .auths<span class="o">[</span><span class="nv">$registry</span><span class="o">]</span>.auth<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;👉 registry: </span><span class="nv">$registry</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -e <span class="s2">&#34;👉 username:password: </span><span class="k">$(</span> sttr base64-decode <span class="nv">$creds</span> <span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="github-cli" class="headerLink">
    <a href="#github-cli" class="header-mark"></a>GitHub CLI</h2><h2 id="view-the-logs-of-a-prior-run" class="headerLink">
    <a href="#view-the-logs-of-a-prior-run" class="header-mark"></a>View The Logs Of A Prior Run</h2><p>View the logs of the last run (or toggle to error logs with the switch).</p>
<ul>
<li><code>gh run view --log $(gh run list -L1 --json 'databaseId' --jq '.[].DatabaseId')</code></li>
<li><code>gh run view $(gh run list --limit 1 --json databaseId --jq '.[0].DatabaseId' ) --log</code></li>
</ul>
<p>This can be chained together with other commands to quickly iterate on testing.
When appropriate, you might avoid this by running <a href="https://github.com/nektos/act" target="_blank" rel="noopener noreferrer">act</a> but I&rsquo;ve had limited success with it due to various restrictions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git commit -am <span class="s1">&#39;ci: get GitHub release working&#39;</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  git push <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  gh workflow run release <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  sleep <span class="m">5</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  gh run watch -i1 <span class="o">||</span> gh run view --log --job <span class="k">$(</span>gh run list -L1 --json <span class="s1">&#39;workflowDatabaseId&#39;</span> --jq <span class="s1">&#39;.[].workflowDatabaseId&#39;</span><span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="use-to-configure-settings-on-many-repos-at-once" class="headerLink">
    <a href="#use-to-configure-settings-on-many-repos-at-once" class="header-mark"></a>Use To Configure Settings on Many Repos At Once</h3><p>This example uses [gum]<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> to filter.
Use <code>tab</code> when selecting in the multi-entry option.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">org</span><span class="o">=</span><span class="k">$(</span>gum input --prompt <span class="s1">&#39;enter GitHub org: &#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">originallist</span><span class="o">=</span><span class="k">$(</span> gh repo list <span class="nv">$org</span> --json <span class="s1">&#39;name&#39;</span> --jq <span class="s1">&#39;.[].name&#39;</span> <span class="p">|</span>  tr <span class="s1">&#39; &#39;</span> <span class="s1">&#39;\n&#39;</span> <span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">repos</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span> <span class="nb">echo</span> <span class="nv">$originallist</span> <span class="p">|</span> gum filter --no-limit <span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> repo in <span class="k">$(</span> <span class="nb">echo</span> <span class="nv">$repos</span> <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39; &#39;</span><span class="k">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nb">printf</span> <span class="s2">&#34;processing %s ... &#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    gh api <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --method PATCH <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -H <span class="s2">&#34;Accept: application/vnd.github+json&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        /repos/<span class="nv">$org</span>/<span class="nv">$repo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -F <span class="nv">use_squash_pr_title_as_default</span><span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -F <span class="nv">squash_merge_commit_title</span><span class="o">=</span>PR_TITLE <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        -F <span class="nv">squash_merge_commit_message</span><span class="o">=</span>PR_BODY <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --silent
</span></span><span class="line"><span class="cl">        <span class="nb">printf</span> <span class="s2">&#34;✔️\n&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># return # for testing</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="clone-all-the-desired" class="headerLink">
    <a href="#clone-all-the-desired" class="header-mark"></a>Clone All The Desired</h2><p>Uses gum[^gum-repo] &amp; [ghq]<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.
See <a href="#check-for-and-install-tooling" rel="">setup directions</a>.</p>
<h3 id="configure-ghq" class="headerLink">
    <a href="#configure-ghq" class="header-mark"></a>Configure ghq</h3><p>To configure <code>ghq</code> defaults run:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git config --global ghq.vcs git
</span></span><span class="line"><span class="cl">git config --global ghq.root <span class="k">$(</span>gum input -prompt <span class="s1">&#39;base git directory for repos: (recommend ~/git):  &#39;</span> <span class="k">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="clone-all-repos-selected" class="headerLink">
    <a href="#clone-all-repos-selected" class="header-mark"></a>Clone All Repos Selected</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">org</span><span class="o">=</span><span class="k">$(</span>gum input --prompt <span class="s1">&#39;enter GitHub org: &#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">originallist</span><span class="o">=</span><span class="k">$(</span> gh repo list <span class="nv">$org</span> --json <span class="s1">&#39;name&#39;</span> --jq <span class="s1">&#39;.[].name&#39;</span> <span class="p">|</span>  tr <span class="s1">&#39; &#39;</span> <span class="s1">&#39;\n&#39;</span> <span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;select repos (use tab to select, and type to filter)&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">repos</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span> <span class="nb">echo</span> <span class="nv">$originallist</span> <span class="p">|</span> gum filter --no-limit <span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> repo in <span class="k">$(</span> <span class="nb">echo</span> <span class="nv">$repos</span> <span class="p">|</span> tr <span class="s1">&#39;\n&#39;</span> <span class="s1">&#39; &#39;</span><span class="k">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nb">printf</span> <span class="s2">&#34;processing %s ... &#34;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    ghq get <span class="s2">&#34;https://github.com/</span><span class="si">${</span><span class="nv">org</span><span class="si">}</span><span class="s2">/</span><span class="si">${</span><span class="nv">repo</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">&amp;</span>&gt; /dev/null
</span></span><span class="line"><span class="cl">    <span class="nb">printf</span> <span class="s2">&#34;✔️\n&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.reddit.com/r/linux4noobs/comments/bjpbnl/why_are_ssh_keys_600_and_not_400_by_default/" target="_blank" rel="noopener noreferrer">Why are ssh keys 600 and not 400 by default? authorized_keys immutable? : linux4noobs</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://github.com/charmbracelet/gum" target="_blank" rel="noopener noreferrer">GitHub - charmbracelet/gum: A tool for glamorous shell scripts 🎀</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://github.com/x-motemen/ghq" target="_blank" rel="noopener noreferrer">ghq - repo cloning tool</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        task
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/tooling/task/
    </link>
    <pubDate>
        Fri, 30 Oct 2020 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/tooling/task/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="prerequisites" class="headerLink">
    <a href="#prerequisites" class="header-mark"></a>Prerequisites</h2><p><a href="https://github.com/go-task/task/blob/master/docs/installation.md" target="_blank" rel="noopener noreferrer">Install go-task</a></p>
<p><a href="https://brew.sh/" target="_blank" rel="noopener noreferrer">Install brew (if not already installed)</a></p>
<p><a href="https://pre-commit.com/#install" target="_blank" rel="noopener noreferrer">Install Pre-commit</a></p>
<div
    class="details admonition warning
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-exclamation-triangle fa-fw"
      ></i>
      Gotchas
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>OS-specific limitations exist for Windows.
For instance, without wrapping with a <code>pwsh -c</code> command, you might get a failure with <code>mkdir</code>.</p>
<p>See prior issue <a href="https://github.com/go-task/task/issues/319#issuecomment-626221222" target="_blank" rel="noopener noreferrer">Command can not be run in Windows · Issue #319 · go-task/task · GitHub</a> for more information.</p>
</div>
    </div>
  </div>
<h2 id="common-config-setup" class="headerLink">
    <a href="#common-config-setup" class="header-mark"></a>Common Config Setup</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">silent</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">prefixed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">dotenv</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">.env]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">includes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">compose</span><span class="p">:</span><span class="w"> </span><span class="l">./Taskfile.compose.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">precommit</span><span class="p">:</span><span class="w"> </span><span class="l">./Taskfile.precommit.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">AWS_SDK_LOAD_CONFIG</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">AWS_REGION</span><span class="p">:</span><span class="w"> </span><span class="l">us-east-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">DOCKER_BUILDKIT</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="common-variable-setup" class="headerLink">
    <a href="#common-variable-setup" class="header-mark"></a>Common Variable Setup</h2><p>The following are console escape sequences to provide some nice formatting for the output.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">vars</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">black</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;30m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">red</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;31m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">green</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;32m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">orange</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;33m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">blue</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;34m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">purple</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;35m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cyan</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;36m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">light_gray</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:0;37m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dark_gray</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;30m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">light_red</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;31m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">light_green</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;32m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">yellow</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;33m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">light_blue</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;34m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">light_purple</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;35m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">light_cyan</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;36m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">white</span><span class="p">:</span><span class="w"> </span><span class="l">\033[:1;37m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nocolor</span><span class="p">:</span><span class="w"> </span><span class="l">\u001b[0m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">reversed</span><span class="p">:</span><span class="w"> </span><span class="l">\u001b[7m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ARTIFACT_DIRECTORY</span><span class="p">:</span><span class="w"> </span><span class="l">./artifacts/</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="common-base-config" class="headerLink">
    <a href="#common-base-config" class="header-mark"></a>Common Base Config</h2><p>This is content I&rsquo;d typically paste to get started on a task file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">list</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">list tasks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">task --list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">vars</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">variable output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo -e &#34;{{.light_gray}}=== ℹ {{ .reversed }} Variable Info from Task {{ .nocolor }} === &#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo -e &#34;{{.light_gray}}ARTIFACT_DIRECTORY          {{.nocolor}}: {{ .orange}}{{ .ARTIFACT_DIRECTORY }} {{ .nocolor }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo -e &#34;{{.light_gray}}DOCKER_BUILDKIT             {{.nocolor}}: {{ .orange}}{{ .DOCKER_BUILDKIT }} {{ .nocolor }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo -e &#34;{{.light_gray}}AWS_SDK_LOAD_CONFIG         {{.nocolor}}: {{ .orange}}{{ .AWS_SDK_LOAD_CONFIG }} {{ .nocolor }}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo -e &#34;{{.light_gray}}AWS_REGION                  {{.nocolor}}: {{ .orange}}{{ .AWS_REGION }} {{ .nocolor }}&#34;</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">run basic tests against compose projects</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">prefix</span><span class="p">:</span><span class="w"> </span><span class="l">🧪</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo &#34;todo&#34;</span><span class="w">        
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="console-logging" class="headerLink">
    <a href="#console-logging" class="header-mark"></a>Console Logging</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">test -f nonexistentfile ||         echo -e &#34;{{.red}}file does not exist: [{{ .NONEXISTENTFILE }}]  {{.nocolor}}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="pre-commit" class="headerLink">
    <a href="#pre-commit" class="header-mark"></a>Pre-Commit</h2><p>I use this framework to simplify my project linting and checks.</p>
<p>You can load this as a separate base file by creating it in the same root directory of your project with the name: <code>Taskfile.precommit.yml</code> and include it as the base config shows.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">silent</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">prefixed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">run pre-commit against all files manually</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">pre-commit run --all-files</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">autoupdate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">update the precommit file with latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">pre-commit autoupdate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">ensure precommit tooling is available</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">prefix</span><span class="p">:</span><span class="w"> </span><span class="l">⚙️</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        {{if eq OS &#34;windows&#34;}}
</span></span></span><span class="line"><span class="cl"><span class="sd">        pip install pre-commit || echo -e &#34;{{.light_cyan}} 🔥 you need python installed to run this  {{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        {{else}}
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo &#34;setting up precommit. This requires brew (works on Linux &amp; macOS)&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        echo &#34;if fails install Linux brew with the following command&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        if brew --version &amp;&gt;/dev/null ; then
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo -e  &#34;{{.green}} ✅ Command succeeded. Homebrew is installed {{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        else
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo -e &#34;{{.red}} ❗ Command failed. Homebrew not detected {{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo -e &#34;{{.red}}❗ Install homebrew on Linux or macOS (not root) using the following command and try again: {{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          echo -e &#34;{{.orange}} /bin/bash -c &#34;&#34;\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&#34;&#34; {{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        fi
</span></span></span><span class="line"><span class="cl"><span class="sd">        export HOMEBREW_NO_AUTO_UPDATE=1
</span></span></span><span class="line"><span class="cl"><span class="sd">        package=pre-commit
</span></span></span><span class="line"><span class="cl"><span class="sd">        brew list $package &amp;&gt;/dev/null || brew install $package
</span></span></span><span class="line"><span class="cl"><span class="sd">        {{end}}</span><span class="w">        
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="install-tool-from-github-release" class="headerLink">
    <a href="#install-tool-from-github-release" class="header-mark"></a>Install Tool From GitHub Release</h2><p>Without using any external dependency tooling, here&rsquo;s a way to add a task that might need to grab a binary, using <code>jq</code> and <code>curl</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">init:ci</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">setup tooling for project and download dependencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      go mod tidy &amp;&amp; echo -e &#34;{{.green}} ✅ go mod tidy completed{{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      go install github.com/goreleaser/goreleaser@latest
</span></span></span><span class="line"><span class="cl"><span class="sd">      go get github.com/caarlos0/svu  # Semver versioning tool
</span></span></span><span class="line"><span class="cl"><span class="sd">      mkdir {{ .TOOLS_DIRECTORY }}
</span></span></span><span class="line"><span class="cl"><span class="sd">      {{if eq OS &#34;windows&#34;}}
</span></span></span><span class="line"><span class="cl"><span class="sd">      DOWNLOAD_URL=`curl -sL https://api.github.com/repos/restechnica/semverbot/releases/latest | jq -r &#39;.assets[].browser_download_url&#39; | grep &#34;windows&#34;`
</span></span></span><span class="line"><span class="cl"><span class="sd">      curl -qo tools/sbot -sL $DOWNLOAD_URL
</span></span></span><span class="line"><span class="cl"><span class="sd">      {{end}}
</span></span></span><span class="line"><span class="cl"><span class="sd">      {{if eq OS &#34;darwin&#34;}}
</span></span></span><span class="line"><span class="cl"><span class="sd">      DOWNLOAD_URL=`curl -sL https://api.github.com/repos/restechnica/semverbot/releases/latest | jq -r &#39;.assets[].browser_download_url&#39; | grep &#34;darwin&#34;`
</span></span></span><span class="line"><span class="cl"><span class="sd">      curl -qo tools/sbot -sL $DOWNLOAD_URL
</span></span></span><span class="line"><span class="cl"><span class="sd">      chmod +rwx ./tools/sbot
</span></span></span><span class="line"><span class="cl"><span class="sd">      {{end}}
</span></span></span><span class="line"><span class="cl"><span class="sd">      {{if eq OS &#34;linux&#34;}}
</span></span></span><span class="line"><span class="cl"><span class="sd">      DOWNLOAD_URL=`curl -sL https://api.github.com/repos/restechnica/semverbot/releases/latest | jq -r &#39;.assets[].browser_download_url&#39; | grep &#34;linux&#34;`
</span></span></span><span class="line"><span class="cl"><span class="sd">      curl -qo tools/sbot -sL $DOWNLOAD_URL
</span></span></span><span class="line"><span class="cl"><span class="sd">      chmod +rwx ./tools/sbot
</span></span></span><span class="line"><span class="cl"><span class="sd">      {{end}}
</span></span></span><span class="line"><span class="cl"><span class="sd">      echo -e &#34;{{.green}} ✅ go semverbot downloaded to tools{{.nocolor}}&#34;</span><span class="w">      
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="initialize-project-tooling" class="headerLink">
    <a href="#initialize-project-tooling" class="header-mark"></a>Initialize Project Tooling</h2><p>All projects requiring non-standardized tooling should have this setup in a standard <code>init</code> style command that makes it easy to get up and running, assuming that the basic SDK tooling is installed of course. To solve SDK&rsquo;s and other lower-level tooling, you&rsquo;ll want to use Docker with Codespaces or other methods to ensure tooling setup is standardized and easy (Ansible, Docker, etc.).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">init</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">initialize all tooling for ci and developer work locally</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">init:dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">init:ci</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">init:dev</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">initialize tools for a developer, but not required for CI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      go install github.com/evilmartians/lefthook@master
</span></span></span><span class="line"><span class="cl"><span class="sd">      lefthook install</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">init:ci</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">setup tooling for project and download dependencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      go mod tidy &amp;&amp; echo -e &#34;{{.green}} ✅ go mod tidy completed{{.nocolor}}&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      go install github.com/goreleaser/goreleaser@latest</span><span class="w">      
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This would be how I&rsquo;d set up a project.</p>
<p>Notice the separation of <code>ci</code> and <code>dev</code> tooling.</p>
<p>This is important if you don&rsquo;t want to needlessly add duration to your CI checks.</p>
<p>This will give flexibility to ensure tooling like Lefthook or others aren&rsquo;t installed by a CI build.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        2020-06-02T17:53:51&#43;00:00
    </title>
    <link>
        https://www.sheldonhull.com/2020-06-02t175351-0000/
    </link>
    <pubDate>
        Tue, 02 Jun 2020 17:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/2020-06-02t175351-0000/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Quickly install <a href="https://github.com/git-town/git-town" target="_blank" rel="noopener noreferrer">Git Town</a> using bash in Ubuntu container with the following:</p>
<script src="https://gist.github.com/sheldonhull/adeb27394527dbd9a27408c1ba79718d.js?file=install-git-town.sh"></script>


        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

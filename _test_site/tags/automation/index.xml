<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Automation - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/automation/</link>
        <description>Automation - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 16 Jun 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/automation/" rel="self" type="application/rss+xml" />

<item>
    <title>
        precommit
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/tooling/precommit/
    </link>
    <pubDate>
        Wed, 16 Jun 2021 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/tooling/precommit/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>A cheatsheet for various pre-commit hooks and things that help with linting, formatting, code scans and more. These all help &ldquo;shift left&rdquo; the review to eliminate more issues in the development workflow, rather than providing feedback only once the CI system is involved.</p>
<h2 id="the-frameworks" class="headerLink">
    <a href="#the-frameworks" class="header-mark"></a>The Frameworks</h2><ul>
<li><a href="https://github.com/evilmartians/lefthook/" target="_blank" rel="noopener noreferrer">GitHub - evilmartians/lefthook: Fast and powerful Git hooks manager for any type of projects.</a> is a newer project based in Go.</li>
<li><a href="https://pre-commit.com/" target="_blank" rel="noopener noreferrer">pre-commit</a> is python-based, very mature and supported.</li>
</ul>
<h2 id="precommit" class="headerLink">
    <a href="#precommit" class="header-mark"></a>Precommit</h2><h3 id="install-precommit" class="headerLink">
    <a href="#install-precommit" class="header-mark"></a>Install Precommit</h3><p>A bit more complicated, depending on the Docker image used and the python tooling installed.
Assuming you have pip installed, then run <code>pip install pre-commit --user</code></p>
<p>Here are some examples to get you started.</p>
<h2 id="skipping-a-precommit-hook" class="headerLink">
    <a href="#skipping-a-precommit-hook" class="header-mark"></a>Skipping A Precommit Hook</h2><p>The pre-commit tasks can be overridden on a case-by-case basis.</p>
<p>The syntax for skipping is simple, just run the task with the name of the hook excluded like this:</p>
<pre><code>  Don't commit to main.....................................................Passed
  check json5..........................................(no files to check)Skipped
  go-fmt...................................................................Passed
  golangci-lint...........................................................Skipped
  go-test-all..............................................................Failed
  - hook id: gotest 👈👈👈👈👈👈👈👈  # Use the hook id, not the text of the title
  - duration: 8.9s
  - exit code: 2
</code></pre>
<ul>
<li>To skip the example above: <code>SKIP='gotest' git commit -am&quot;feat(fancy): my title&quot; -m&quot;- My Message Body&quot; &amp;&amp; git pull --rebase &amp;&amp; git push</code>.</li>
<li>To skip multiple: <code>SKIP='gotest,go-fmt' git myaction</code>.</li>
</ul>
<h2 id="filtering--triggering-tricks" class="headerLink">
    <a href="#filtering--triggering-tricks" class="header-mark"></a>Filtering &amp; Triggering Tricks</h2><p>Let&rsquo;s say you have a document directory and want to trigger a report or doc generation if anything in that changes.</p>
<p>You can do this pretty elegantly with pre-commit.</p>
<p>For example, let&rsquo;s add a mage task to generate docs when something in the package directory for go is updated.</p>
<pre><code>repos:
  # for specific updates that should result in an update to matched directories or files.
  - repo: local
    hooks:
      - id: docs:generate
        name: docs:generate
        entry: mage docs:generate
        language: system
        files: ^pkg/
        types: [file, go]
</code></pre>
<p>The types are pretty useful, not just to try and match on file names.</p>
<p>Use <code>identify-cli</code> which is a python cli and package included when you install pre-commit.</p>
<p>Run it against a directory or file and you&rsquo;ll get the outputs that pre-commit will accept.</p>
<p>For example, against a markdown file: <code>identify-cli README.md</code> and you should get: <code>[&quot;file&quot;, &quot;markdown&quot;, &quot;non-executable&quot;, &quot;text&quot;]</code>. Any of these (or all) can be used to filter when the hook runs.</p>
<p>Against a Go file: <code>[&quot;file&quot;, &quot;go&quot;, &quot;non-executable&quot;, &quot;text&quot;]</code>.</p>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      LeftHook
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">Using pre-commit framework heavily, and no longer relying on Lefthook.</div>
    </div>
  </div>
<h2 id="lefthook" class="headerLink">
    <a href="#lefthook" class="header-mark"></a>Lefthook</h2><p>A great tool, but requires more work and is not as fully featured as pre-commit.
In most cases, I&rsquo;d recommend pre-commit tooling over Lefthook.</p>
<p>If you are just starting out, this requires more hands-on work but can result in faster checks and commits.</p>
<p>My advice would be to start with pre-commit if you want plug and play, and lefthook if you want to control the pre-commits explicitly and optimize for performance.</p>
<p>As long as you have the Go SDK installed, just run <code>go install github.com/evilmartians/lefthook@master</code>.</p>
<p>This framework is a little &ldquo;rougher&rdquo; and less supported than pre-commit framework, but for simple self-maintained hooks, I&rsquo;ve preferred this as it is much faster, and so I end up using it more.</p>
<p>Other installation methods are located at the installation guide <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h3 id="lefhook-tips" class="headerLink">
    <a href="#lefhook-tips" class="header-mark"></a>Lefhook Tips</h3><ul>
<li>Originally, I broke out lefthook into multiple files so I could drop them into a directory, but now I stick with one.
Since it still requires editing the main file to extend and point to another file, I&rsquo;ve found a single file simpler to maintain.</li>
<li>Disable parallel operation for anything formatting files or possibly not thread safe.
While parallel operation seems great, most of the pre-commit tasks should run quickly, and formatting and linting files at the same time could lead to conflicts or problems.
Use parallel operation for separate language test runs perhaps, like running Python tests and Go tests since those shouldn&rsquo;t conflict.</li>
<li><code>piped: true</code> is useful but hides the underlying tasks in the summary, so I suggest avoid unless you have tasks that really should feed into each other step by step.
In this case, maybe you should have this just be part of your task run, such as <code>mage lint fmt</code> rather than two separate pre-commit hooks.</li>
</ul>
<h3 id="using-lefthook" class="headerLink">
    <a href="#using-lefthook" class="header-mark"></a>Using Lefthook</h3><p>Here are some updated configurations I&rsquo;ve started using.</p>
<h4 id="output" class="headerLink">
    <a href="#output" class="header-mark"></a>Output</h4><p>Reduce the noise:</p>
<pre><code>skip_output:
  - meta
  - success
# - summary
skip:
  - merge
  - rebase
</code></pre>
<h4 id="pre-commit-checks" class="headerLink">
    <a href="#pre-commit-checks" class="header-mark"></a>Pre-commit Checks</h4><p>These are basic quick checks for markdown (docs as code).
This illustrates one of the challenges in pre-commit framework tooling.</p>
<p>Ideally, you want the pre-commit checks to only touch the files that changed to make things quick, but this requires some workarounds, since not all tools support a comma-delimited list of files passed in.</p>
<p>One big improvement to lefthook would be supporting a <code>for_each</code> operator, so that cross-platform looping on matched files could be run, instead of having to parse inside the script here.
I&rsquo;m pretty sure that this would be more compatible with various platforms as well, since this I believe uses your native shell, so you&rsquo;d have to be in WSL2 in Windows, for example, for the bash-like syntax to work.</p>
<p>See <a href="https://github.com/sheldonhull/ci-configuration-files/.markdownlint-cli2.yaml" target="_blank" rel="noopener noreferrer">ci-configuration-files</a> for markdown lint config examples.</p>
<p>Install <code>gojq</code> or replace with <code>jq</code> if you have it.</p>
<pre><code>pre-commit:
  tags: markdown fmt
  parallel: false
  commands:
    markdownlintfix:
      files: git diff-index --name-only HEAD
      exclude: '.licenses/*'
      glob: '*{.md}'
      run: |
        echo &quot;⚡ markdownlint on: {files}&quot;
        for file in {files}
        do
          echo &quot;🔨 markdownlint: $file&quot;
          docker run --rm -v ${PWD}:/workdir --entrypoint=&quot;markdownlint-cli2-fix&quot; davidanson/markdownlint-cli2:latest &quot;$file&quot;
        done
    markdownlintcheck:
      files: git diff-index --name-only HEAD
      exclude: '_licenses/*'
      glob: '*{.md}'
      run: |
        echo &quot;⚡ markdownlint on: {files}&quot;
        for file in {files}
        do
          echo &quot;🔨 markdownlint: $file&quot;
          docker run --rm -v ${PWD}:/workdir --entrypoint=&quot;markdownlint-cli2&quot; davidanson/markdownlint-cli2:latest &quot;$file&quot;
        done
    shellcheck:
      tags: gotool gojq
      name: shellcheck
      files: git diff-index --name-only HEAD
      exclude: '.licenses/*'
      glob: '*.sh'
      run: docker run --rm -v ${PWD}:/mnt koalaman/shellcheck:stable --format=json {files}  | gojq
    # REQUIREMENTS: npm install --global prettier
    yamlfmt:
      files: git diff-index --name-only HEAD
      glob: '*.yaml|*.yml'
      exclude: '.licenses/*'
      skip_empty: false
      run: prettier --loglevel warn --no-error-on-unmatched-pattern --write &quot;{.yaml,.yml}&quot;
    # REQUIREMENTS: go install go.atrox.dev/sync-dotenv@latest
    # used to sync default dotenv files to an example file to avoid commits on main .env
    envfile:
      name: update env.example file
      files: '*.env'
      exclude: '.licenses/*'
      run: |
        cd env
        touch .env
        sync-dotenv
    # REQUIREMENTS: Mage Tasks Built (See github.com/sheldonhull/magetools)
    # CI=1 helps reduce formatting output to minimal
    # MAGEFILE_HASHFAST improves speed of calling mage by assuming your tasks haven't changed
    go:
      piped: true
      tags: go lint fmt
      files: git diff-index --name-only HEAD
      exclude: '.licenses/*'
      glob: '*.{go,mod,sum}'
      commands:
        fmt:
          run: CI=1 MAGEFILE_HASHFAST=1 mage fmt
        lint:
          run: CI=1 MAGEFILE_HASHFAST=1 mage lint
</code></pre>
<h4 id="pre-push-checks" class="headerLink">
    <a href="#pre-push-checks" class="header-mark"></a>Pre-Push Checks</h4><p>Most of these Mage-oriented tasks are from my magetools repo.</p>
<p>Note that while they filter based on the files being Go-related, they run against the entire repo.</p>
<pre><code>pre-push:
  parallel: false
  commands:
    fmt:
      files: git diff-index --name-only HEAD
      exclude: '.licenses/*'
      glob: '*.{go,mod,sum}'
      run: CI=1 MAGEFILE_HASHFAST=1 mage go:wrap
    lint:
      files: git diff-index --name-only HEAD
      exclude: '.licenses/*'
      glob: '*.{go,mod,sum}'
      run: CI=1 MAGEFILE_HASHFAST=1 mage lint
    test:
      files: git diff-index --name-only HEAD
      exclude: '.licenses/*'
      glob: '*.{go,mod,sum}'
      run: CI=1 MAGEFILE_HASHFAST=1 mage go:test
    gitleaks:
      tags: security gotool linux macos nowindows
      run: CI=1 MAGEFILE_HASHFAST=1 mage secrets:check
</code></pre>
<!-- links -->
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://github.com/evilmartians/lefthook/blob/master/docs/full_guide.md#installation" target="_blank" rel="noopener noreferrer">lefthook/full_guide.md at master · evilmartians/lefthook · GitHub</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>


<item>
    <title>
        Consider the Benefits of Powershell for Developer Workflows
    </title>
    <link>
        https://www.sheldonhull.com/consider-the-benefits-of-powershell-for-developer-workflows/
    </link>
    <pubDate>
        Wed, 04 Nov 2020 07:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/consider-the-benefits-of-powershell-for-developer-workflows/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="who-am-i-talking-to" class="headerLink">
    <a href="#who-am-i-talking-to" class="header-mark"></a>Who Am I Talking To</h2><ul>
<li>You use bash or python.</li>
<li>PowerShell seems wordy, extra verbose, and annoying.</li>
<li>It&rsquo;s a windows thing, you say&hellip; why would I even look at it.</li>
<li>Pry bash out of my fingers if yuo dare (probably not for you 😁)</li>
</ul>
<h2 id="what-powershell-is" class="headerLink">
    <a href="#what-powershell-is" class="header-mark"></a>What PowerShell Is</h2><ul>
<li>The best language for automating Windows&hellip; period.</li>
<li>A great language for development tooling and productivity scripts.</li>
<li>One of the best languages for automation with interactivity.
Python is fantastic. The REPL isn&rsquo;t meant for the same interactivity you get with PowerShell.
PowerShell prompt is sorta like mixing Python &amp; fish/bash in a happy marriage.</li>
<li>A rich language (not just scripting) for interacting with AWS using AWS.Tools.</li>
<li>A rich object-oriented pipeline that can handle very complex actions in one-liners based on object-oriented pipelines.</li>
<li>Intuitive and consistent mostly for command discovery.
<ul>
<li>a common complaint from bash pros.</li>
<li>The point of the verbosity <code>Verb-Noun</code> is discoverability. <code>tar</code> for example is a bit harder to figure out than <code>Expand-Archive -Path foo -DestinationPath foo</code></li>
</ul>
</li>
<li>A language with a robust testing framework for unit, integration, infrastructure, or any other kinda testing you want! (Pester is awesome)</li>
</ul>
<h2 id="what-powershell-isnt" class="headerLink">
    <a href="#what-powershell-isnt" class="header-mark"></a>What PowerShell Isn&rsquo;t</h2><ul>
<li>Python 🤣</li>
<li>Good at datascience.</li>
<li>Succinct</li>
<li>Meant for high-concurrency</li>
<li>Good at GUI&rsquo;s&hellip; but come-on we&rsquo;re devs&hellip; guis make us weak 😜</li>
<li>A good webserver</li>
<li>Lots more.</li>
</ul>
<h2 id="the-right-tool-for-the-job" class="headerLink">
    <a href="#the-right-tool-for-the-job" class="header-mark"></a>The Right Tool for the Job</h2><p>I&rsquo;m not trying to tell you never to use bash.
It&rsquo;s what you know, great!</p>
<p>However, I&rsquo;d try to say if you haven&rsquo;t explored it, once you get past some of the paradigm differences, there is a rich robust set of modules and features that can improve most folks workflow.</p>
<h2 id="why-even-consider-powershell" class="headerLink">
    <a href="#why-even-consider-powershell" class="header-mark"></a>Why Even Consider PowerShell</h2><p>As I&rsquo;ve interacted more and more with folks coming from a mostly Linux background, I can appreciate that considering PowerShell seems odd.
It&rsquo;s only recently that it&rsquo;s cross platform in the lifecycle of things, so it&rsquo;s still a new thing to most.</p>
<p>Having been immersed in the .NET world and now working on macOS and using Docker containers running Debian and Ubuntu (sometimes Alpine Linux), I completely get that&rsquo;s not even in most folks purview.</p>
<p>Yet, I think it&rsquo;s worth considering for developer workflows that there is a lot of gain to be had with PowerShell for improving the more complex build and development workflows because of the access to .NET.</p>
<p>No, it&rsquo;s not &ldquo;superior&rdquo;. It&rsquo;s different.
Simple cli bash scripting is great for many things (thus prior article about Improving development workflow <code>Task</code> which uses shell syntax).</p>
<p>The fundemental difference in bash vs PowerShell is really text vs object, in my opinion.
This actually is where much of the value comes in for considering what to use.</p>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Go For CLI Tools
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Go provides a robust cross-platform single binary with autocomplete features and more.</p>
<p>I&rsquo;d say that for things such as exporting pipelines to Excel, and other &ldquo;automation&rdquo; actions it&rsquo;s far more work in Go.</p>
<p>Focus Go on tooling that makes the extra plumbing and stronger typing give benefit rather than just overhead.
AWS SDK operations, serverless/lambda, apis, complex tools like Terraform, and more fit the bill perfectly and are a great use case.</p>
</div>
    </div>
  </div>
<h2 id="scenario-working-with-aws" class="headerLink">
    <a href="#scenario-working-with-aws" class="header-mark"></a>Scenario: Working with AWS</h2><p>If you are working with the AWS SDK, you are working with objects.
This is where the benefit comes in over cli usage.</p>
<p>Instead of parsing json results and using tools like <code>jq</code> to choose arrays, instead, you can interact with the object by named properties very easily.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$Filters</span> <span class="p">=</span> <span class="vm">@</span><span class="p">([</span><span class="no">Amazon.EC2.Model.Filter</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;tag:is_managed_by&#39;</span><span class="p">,</span><span class="s1">&#39;muppets&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$InstanceCollection</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-EC2Instance</span> <span class="n">-Filter</span> <span class="nv">$Filters</span><span class="p">)).</span><span class="py">Instances</span> <span class="p">|</span> <span class="nb">Select-PSFObject</span> <span class="n">InstanceId</span><span class="p">,</span> <span class="n">PublicIpAddress</span><span class="p">,</span><span class="n">PrivateIpAddress</span><span class="p">,</span><span class="n">Tags</span><span class="p">,</span><span class="s1">&#39;State.Code as StateCode&#39;</span><span class="p">,</span> <span class="s1">&#39;State.Name as StateName&#39;</span>  <span class="n">-ScriptProperty</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Name</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">get</span>  <span class="p">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$this</span><span class="p">.</span><span class="py">Tags</span><span class="p">.</span><span class="py">GetEnumerator</span><span class="p">().</span><span class="py">Where</span><span class="p">{</span><span class="nv">$_</span><span class="p">.</span><span class="py">Key</span> <span class="o">-eq</span> <span class="s1">&#39;Name&#39;</span><span class="p">}.</span><span class="py">Value</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>With this <code>$InstanceCollection</code> variable, we now have access to an easily used object that can be used with named properties.</p>
<ul>
<li>Give me all the names of the EC2 instances: <code>$InstanceCollection.Name</code></li>
<li>Sort those: <code>$InstanceCollection.Name | Sort-Object</code> (or use alias shorthand such as <code>sort</code>)</li>
<li>For each of this results start the instances: <code>$InstanceCollection | Start-EC2Instance</code></li>
</ul>
<h2 id="practical-examples" class="headerLink">
    <a href="#practical-examples" class="header-mark"></a>Practical Examples</h2><p>Beyond that, we can do many things with the rich eco-system of prebuilt modules.</p>
<p>Here are some example of some rich one-liners using the power of the object based pipeline.</p>
<ul>
<li>Export To Json: <code>$InstanceCollection | ConvertTo-Json -Depth 10 | Out-File ./instance-collection.json</code></li>
<li>Toast notification on results: <code>Send-OSNotification -Title 'Instance Collection Results' -Body &quot;Total results returned: $($InstanceCollection.Count)&quot;</code></li>
<li>Export To Excel with Table:  <code>$InstanceCollection | Export-Excel -Path ./instance-collection.json -TableStyle Light8 -TableName 'FooBar'</code></li>
<li>Send a rich pagerduty event to flag an issue: <code>Send-PagerDutyEvent -Trigger -ServiceKey foo -Description 'Issues with instance status list' -IncidentKey 'foo' -Details $HashObjectFromCollection</code></li>
<li>Use a cli tool to flip to yaml (you can use native tooling often without much issue!): <code>$InstanceCollection | ConvertTo-Json -Depth 10 | cfn-flip | Out-File ./instance-collection.yml</code></li>
</ul>
<p>Now build a test (mock syntax), that passes or fails based on the status of the instances</p>
<div
    class="details admonition Note
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Disclaimer
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>I&rsquo;m sure there&rsquo;s great tooling with <code>jq</code>, <code>yq</code>, excel clis and other libraries that can do similar work.</p>
<p>My point is that it&rsquo;s pretty straight forward to explore this in PowerShell as object-based pipelines are a lot less work with complex objects than text based parsing.</p>
</div>
    </div>
  </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;Instance Status Check&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Context</span> <span class="s2">&#34;Instances That Should Be Running&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">foreach</span><span class="p">(</span><span class="nv">$Instance</span> <span class="k">in</span> <span class="nv">$InstanceCollection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">It</span> <span class="s2">&#34;should be running&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Instance</span><span class="p">.</span><span class="py">StatusName</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;Running&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now you have a test framework that you could validate operational issues across hundreds of instances, or just unit test the output of a function.</p>
<h2 id="exploring-the-object" class="headerLink">
    <a href="#exploring-the-object" class="header-mark"></a>Exploring the Object</h2><p>I did this comparison once for a coworker, maybe you&rsquo;ll find it useful too!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="s2">&#34;Test Content&#34;</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="p">./</span><span class="n">foo</span><span class="p">.</span><span class="py">txt</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Item</span> <span class="p">=</span> <span class="nb">Get-Item</span> <span class="p">./</span><span class="n">foo</span><span class="p">.</span><span class="py">txt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">## Examine all the properties and methods available. It&#39;s an object</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Item</span> <span class="p">|</span> <span class="nb">Get-Member</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This gives you an example of the objects behind the scene.
Even though your console will only return a small set of properties back, the actual object is a .NET object with all the associated methods and properties.</p>
<p>This means that <code>Get-Item</code> has access to properties such as the base name, full path, directory name and more.</p>
<p>You can access the actual <code>datetime</code> type of the <code>CreationTime</code>, allowing you to do something like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">$item</span><span class="p">.</span><span class="py">LastAccessTime</span> <span class="p">-</span> <span class="nv">$Item</span><span class="p">.</span><span class="n">CreationTime</span><span class="p">).</span><span class="py">TotalDays</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This would use two date objects, and allow you to use the relevant <code>Duration</code> methods due to performing math on these.</p>
<p>The methods available could be anything such as <code>$Item.Encrypt(); $Item.Delete; $Item.MoveTo</code> and more all provided by the .NET namespace <code>System.IO.FileInfo</code>.</p>
<p>I know many of these things you can do in bash as well, but the object pipeline here I&rsquo;d wager provides a very solid experience for more complex operations based on the .NET framework types available.</p>
<h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap Up</h2><p>This was meant to give a fresh perspective on why some folks have benefited from PowerShell over using shell scripting.
It&rsquo;s a robust language that for automation/build/cloud automation can give a rich reward if you invest some time to investigate.</p>
<p>For me the basic &ldquo;right tool for the job&rdquo; would like like this:</p>
<ul>
<li>data: python</li>
<li>serverless: go &amp; python (powershell can do it too, but prefer the others)</li>
<li>web: go &amp; python</li>
<li>basic cli stuff: shell (using <code>Task</code> which uses shell syntax)</li>
<li>complex cli project tasks: powershell &amp; go</li>
<li>automation/transformation: powershell &amp; python</li>
<li>high concurrency, systems programming: go</li>
</ul>
<p>Maybe this provided a fresh perspective for why PowerShell might benefit even those diehard shell scripters of you out there and maybe help convince you to take the plunge and give it a shot.</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Improving Local Development Workflow With Go Task
    </title>
    <link>
        https://www.sheldonhull.com/improving-local-development-workflow-with-go-task/
    </link>
    <pubDate>
        Tue, 03 Nov 2020 22:24:28 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/improving-local-development-workflow-with-go-task/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="workflow-tooling" class="headerLink">
    <a href="#workflow-tooling" class="header-mark"></a>Workflow Tooling</h2><p>Development workflow, especially outside of a full-fledged IDE, is often a disjointed affair.
DevOps oriented workflows that often combine cli tools such as terraform, PowerShell, bash, and more all provide more complexity to getting up to speed and productive.</p>
<p>Currently, there is a variety of frameworks to solve this problem.
The &ldquo;gold standard&rdquo; most are familiar with in the open-source community would be <a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener noreferrer">Make</a>.</p>
<h2 id="considering-cross-platform-tooling" class="headerLink">
    <a href="#considering-cross-platform-tooling" class="header-mark"></a>Considering Cross-Platform Tooling</h2><p>This is not an exhaustive list, it&rsquo;s focused more on my journey, not saying that your workflow is wrong.</p>
<p>I&rsquo;ve looked at a variety of tooling, and the challenge has typically that most are very unintuitive and difficult to remember.</p>
<p>Make&hellip;it&rsquo;s everywhere. I&rsquo;m not going to argue the merits of each tool as I mentioned, but just bring up that while cMake is cross platform, I&rsquo;ve never considered Make a truly cross platform tool that is first class in both environments.</p>
<h2 id="invokebuild--psake" class="headerLink">
    <a href="#invokebuild--psake" class="header-mark"></a>InvokeBuild &amp; Psake</h2><p>In the Windows world, my preferred framework would be <a href="https://github.com/nightroman/Invoke-Build" target="_blank" rel="noopener noreferrer">InvokeBuild</a> or <a href="https://github.com/psake/psake" target="_blank" rel="noopener noreferrer">PSake</a>.</p>
<p>The thing is, not every environment will always have PowerShell, so I&rsquo;ve wanted to experiment with minimalistic task framework for intuitive local usage in a project when the tooling doesn&rsquo;t need to be complex.
While <code>InvokeBuild</code> is incredibly flexible and intuitive, there is an expectation of familarity with PowerShell to fully leverage.</p>
<p>If you want a robust framework, I haven&rsquo;t found anything better.
Highly recommend examining if you are comfortable with PowerShell.
You can generate VSCode tasks from your defined scripts and more.</p>
<p><code>InvokeBuild</code> &amp; <code>Psake</code> aren&rsquo;t great for beginners just needing to run some tooling quickly in my experience.
The power comes with additional load for those not experienced in PowerShell.</p>
<p>If you are needing to interact with AWS.Tools SDK, complete complex tasks such as generating objects from parsing AST (Abstract Syntax Trees) and other, then I&rsquo;d lead towards <code>InvokeBuild</code>.</p>
<p>However, if you need to initialize some local dependencies, run a linting check, format your code, get the latest from main branch and rebase, and other tasks that are common what option do you have to get up and running more quickly on this?</p>
<h2 id="task" class="headerLink">
    <a href="#task" class="header-mark"></a>Task</h2><p><a href="https://taskfile.dev/#/" target="_blank" rel="noopener noreferrer">Go Task</a></p>
<p>I&rsquo;ve been pleasantly surprised by this cross-platform tool based on a simple <code>yaml</code> schema.
It&rsquo;s written in go, and as a result it&rsquo;s normally just a single line or two to immediately install in your system.</p>
<p>Here&rsquo;s why you might find some value in examining this.</p>
<ol>
<li>Cross-platform syntax using this go interpreter <a href="https://github.com/mvdan/sh" target="_blank" rel="noopener noreferrer">sh</a></li>
<li>Very simple <code>yaml</code> schema to learn.</li>
<li>Some very nice features that make it easy to ignore already built assets, setup task dependencies (that run in parallel too!), and simple cli interactivity.</li>
</ol>
<p>My experience has been very positive as I&rsquo;ve found it very intuitive to build out basic commands as I work, rather than having to deal with more more complex schemas.</p>
<h2 id="get-started" class="headerLink">
    <a href="#get-started" class="header-mark"></a>Get Started</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">task --list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">task --list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fmt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">Apply terraform formatting</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform fmt -recursive=true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The <a href="https://taskfile.dev/#/usage" target="_blank" rel="noopener noreferrer">docs</a> are great for this project, so I&rsquo;m not going to try and educate you on how to use this, just point out some great features.</p>
<p>First, with a quick VSCodee snippet, this provides you a quick way to bootstrap a new project with a common interface to run basic commands.</p>
<p>Let&rsquo;s give you a scenario&hellip; assuming you aren&rsquo;t using an already built Docker workspace.</p>
<ol>
<li>I need to initialize my 2 terraform directories.</li>
<li>I want to also ensure I get a few go dependencies for a project.</li>
<li>Finally, I want to validate my syntax is valid among my various directories, without using pre-commit.</li>
</ol>
<p>This gets us started&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Next, I threw together some examples here.</p>
<ul>
<li>Initialize commands for two separate directories.</li>
<li>A <code>fmt</code> command to apply standardized formatting across all <code>tf</code> files.</li>
<li>Finally, wrap up those commands with a <code>dep: []</code> value that will run the <code>init</code> commands in parallel, and once that is finished it will run <code>fmt</code> to ensure consistent formatting.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">TF_IN_AUTOMATION</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init-workspace-foo</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dir</span><span class="p">:</span><span class="w"> </span><span class="l">terraform/foo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform init</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init-workspace-bar</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dir</span><span class="p">:</span><span class="w"> </span><span class="l">terraform/bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform init</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fmt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">Recursively apply terraform fmt to all directories in project.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform fmt -recursive=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">Initialize the terraform workspaces in each directory in parallel.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">deps</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">init-workspace-foo,init-workspace-bar]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">fmt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>You can even add a task in that would give you a structured git interaction, and not rely on git aliases.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sync</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">In GitHub flow, I should be getting lastest from main and rebasing on it so I don&#39;t fall behind</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">git town sync</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="why-not-just-run-manually" class="headerLink">
    <a href="#why-not-just-run-manually" class="header-mark"></a>Why not just run manually</h2><p>I&rsquo;ve seen many folks online comments about why even bother?
Can&rsquo;t the dev just run the commands in the directory when working through it and be done with it?</p>
<p>I believe tasks like this should be thrown into a task runner from the start.
Yes, it&rsquo;s very easy to just type <code>terraform fmt</code>, <code>go fmt</code>, or other simple commands&hellip; if you are the builder of that project.</p>
<p>However:</p>
<ul>
<li>it increases the cognitive load for tedious tasks that no one should have to remember each time the project grows.</li>
<li>It makes your project more accessible to new contributors/teammates.</li>
<li>It allows you to simply moving to automation by wrapping up some of these automation actions in GitHub Actions or equivalent, but simply having the CICD tooling chosen run the same task you can run locally.</li>
</ul>
<p>Minimal effort to move it to automation from that point!</p>
<p>I think wrapping up things with a good task runner tools considers the person behind you, and prioritizes thinking of others in the course of development.
It&rsquo;s an act of consideration.</p>
<h2 id="choose-the-right-tooling" class="headerLink">
    <a href="#choose-the-right-tooling" class="header-mark"></a>Choose the Right Tooling</h2><p>Here&rsquo;s how I&rsquo;d look at the choices:</p>
<ul>
<li>Run as much in Docker as you can.</li>
<li>If simple actions, driven easily on cli such as build, formatting, validation, and other then start with <code>Task</code> from the beginning and make your project more accessible.</li>
<li>If requirements grow more complex, with interactions with AWS, custom builds for Lambda, combined with other more complex interactions that can&rsquo;t easily be wrapped up in a few lines of shell scripting&hellip; use <code>InvokeBuild</code> or equivalent. This gives you access to the power of <code>.NET</code> and the large module collection provided.</li>
</ul>
<p>Even if you don&rsquo;t really need it, think of the folks maintaining or enabling others to succeed with contributions more easily, and perhaps you&rsquo;ll find some positive wins there. 🎉</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Quickly Create Github Release via Cli
    </title>
    <link>
        https://www.sheldonhull.com/quickly-create-github-release-via-cli/
    </link>
    <pubDate>
        Wed, 26 Feb 2020 07:00:00 -0600
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/quickly-create-github-release-via-cli/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>I&rsquo;ve been trying to improve modularization with Terraform.
Using Terraform Cloud, you get a private module repository.
The modules are linked to tags in git.</p>
<p>I&rsquo;ve wanted additionally to specifically create releases for the versions in addition to the tags, to make tracking of usable versions a little cleaner.</p>
<p>There are several ways to do this, including using the GitHub API, npm modules, and more.
I wanted a simple CLI tool to do this and ran across this great Go utility that worked seamlessly for me.</p>
<p>I&rsquo;ve used the <a href="http://bit.ly/2w1fZYu" target="_blank" rel="noopener noreferrer">Hub cli</a> but the create release syntax never really worked for me.</p>
<h2 id="github-release" class="headerLink">
    <a href="#github-release" class="header-mark"></a>github-release</h2><p><a href="http://bit.ly/32qoDM9" target="_blank" rel="noopener noreferrer">Github-release</a> is a simple golang cli that worked great for me.
Note that this is a fork.
This fork is more up to date than the original.</p>
<p>With go installed just run this to get it installed and available in <code>PATH</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">go</span> <span class="n">get</span> <span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">itchio</span><span class="p">/</span><span class="n">gothub</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To simplify GitHub access, ensure you set an environment variable for your user called GITHUB_TOKEN.</p>
<p>With PowerShell you can do it quickly like this (you might need to close and reopen vscode/terminal for this to be recognized)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Environment</span><span class="p">]::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s1">&#39;GITHUB_TOKEN&#39;</span><span class="p">,</span><span class="s1">&#39;tokenhere&#39;</span><span class="p">,</span><span class="s1">&#39;User&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="usage" class="headerLink">
    <a href="#usage" class="header-mark"></a>Usage</h2><p>To use this, you can chain together some steps and see how it can save you time on creating a GitHub release.</p>
<script src="https://gist.github.com/sheldonhull/53055bbff368a4ebe4e0794076a56c37.js"></script>

<p>This helped me get moving faster ⚡ on using Github releases without the tedious work to create.
If this helped you or have any feedback, drop a comment below and let me know!
The comments are powered by Utterances which will open a Github issue to discuss further. 👍</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Attaching Database Using SMO &amp; Powershell
    </title>
    <link>
        https://www.sheldonhull.com/attaching-database-using-smo-and-powershell/
    </link>
    <pubDate>
        Fri, 18 Nov 2016 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/attaching-database-using-smo-and-powershell/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Steve Jones wrote a great article on using this automation titled <code>The Demo Setup-Attaching Databases with Powershell</code>. I threw together a completed script and modified it for my functionality here. MSDN documentation on the functionality is located here <a href="http://bit.ly/2fZPypU" target="_blank" rel="noopener noreferrer">Server.AttachDatabase Method (String, StringCollection, String, AttachOptions)</a>I see some definitive room for improvement with some future work on this to display percentage complete and so on, but did not implement at this time.</p>
<p>For the nested error handling I found a great example of handling the error output from: <a href="http://bit.ly/2fZPrL9" target="_blank" rel="noopener noreferrer">Aggregated Intelligence: Powershell &amp; SMO-Copy and attach database</a>. If you don&rsquo;t utilize the logic to handle nested errors your powershell error messages will be generic. This handling of nested error property is a must to be able to debug any errors you run into.
<a href="http://blog.aggregatedintelligence.com/2012/02/powershell-smocopy-and-attach-database.html" target="_blank" rel="noopener noreferrer">http://blog.aggregatedintelligence.com/2012/02/powershell-smocopy-and-attach-database.html</a></p>
<p>If you want to see some great example on powershell scripting restores with progress complete and more I recommend taking a look at this post which had a very detailed powershell script example. <a href="http://bit.ly/2fZQGJX" target="_blank" rel="noopener noreferrer">SharePoint Script - Restoring a Content Database</a></p>
<script src="https://gist.github.com/sheldonhull/fe14ed313d1259f0aab7b73c7ce39f6f.js"></script>


        ]]>
    </description>
</item>


<item>
    <title>
        Automating SSMS 2016 Updates &amp; Install
    </title>
    <link>
        https://www.sheldonhull.com/automating-ssms-2016-updates--install/
    </link>
    <pubDate>
        Wed, 27 Apr 2016 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/automating-ssms-2016-updates--install/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      update 2016-04-27 11:20 - Red Gate SQL Toolkit
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">This also is a great help for folks using Red Gate SQL Toolkits. It can help ensure all items are up to date. When a new bundle installer is identified, it would download the new one and you could then trigger the updates of each of the apps you desire, without having to keep run the download later through Red Gate&rsquo;s tool.</div>
    </div>
  </div>
<p>Figured I&rsquo;d share a way to automate the SSMS 2016 updates until it gets it&rsquo;s own fancy self updater. I love staying up to date, but with Power BI, SSMS, and others updating monthly or more and not having any automation for keeping up to date, this is something I find a waste of time that I&rsquo;d rather automate.</p>
<h2 id="ssms-2016-install" class="headerLink">
    <a href="#ssms-2016-install" class="header-mark"></a>ssms 2016 install</h2><p>I think this gets a win, as it&rsquo;s by default in a dark theme. If contains the future possibility of dark theme just like Visual Studio, it gets my stamp of hearty approval. According to some social media posts I&rsquo;ve read, it&rsquo;s not yet implemented, but bringing the theming and extension capabilities to SSMS is a goal, and some of it should be here soon.</p>
<p><figure><a class="lightgallery" href="/images/ssms-2016-install.png" title="ssms 2016 install" data-thumbnail="/images/ssms-2016-install.png">
        
    </a></figure></p>
<h3 id="currently-using-2015-shell" class="headerLink">
    <a href="#currently-using-2015-shell" class="header-mark"></a>currently using 2015 shell</h3><p><figure><a class="lightgallery" href="/images/currently-using-2015-shell.png" title="currently using 2015 shell" data-thumbnail="/images/currently-using-2015-shell.png">
        
    </a></figure></p>
<h3 id="updates-applied-seperately-from-sql-service-packs" class="headerLink">
    <a href="#updates-applied-seperately-from-sql-service-packs" class="header-mark"></a>Updates applied seperately from sql service packs</h3><p>Of course, the main benefit to having the SSMS install as it&rsquo;s own installer/update is we can get regular updates and improvements without it having to align with sql server service packs. This should allow Management Studio to have more rapidly developed and improved product with more frequent releases.</p>
<p><figure><a class="lightgallery" href="/images/updates-applied-seperately-from-sql-service-packs.png" title="Updates applied seperately from sql service packs" data-thumbnail="/images/updates-applied-seperately-from-sql-service-packs.png">
        
    </a></figure></p>
<h3 id="changelog" class="headerLink">
    <a href="#changelog" class="header-mark"></a>changelog</h3><p>Finally have a changelog to easily review Sql Management Studio updates. As I recall, previously you had to sort through all the changes with sql bug fixes to find what was updated.
<a href="http://bit.ly/23WM6Pd" target="_blank" rel="noopener noreferrer">SQL Management Studio - Changelog (SSMS)</a></p>
<p><figure><a class="lightgallery" href="/images/changelog.png" title="changelog" data-thumbnail="/images/changelog.png">
        
    </a></figure></p>
<h2 id="ketarin-to-the-rescue" class="headerLink">
    <a href="#ketarin-to-the-rescue" class="header-mark"></a>Ketarin to the rescue</h2><p>Ketarin is one of my favorite tools for automating setup and maintenance of some tedious software products. It takes a little practice to get the hang of it, but it&rsquo;s pretty awesome. It&rsquo;s sort of like a power user version of Ninite. You can automate setup and install of almost anything. The learning curve is not too bad, but to fully leverage you want to benefit from the regex parsing of the webpage to get the download link that changes with version, such as what we might deal with on version changes with SSMS.</p>
<h3 id="download-latest-ssms-version" class="headerLink">
    <a href="#download-latest-ssms-version" class="header-mark"></a>Download latest SSMS Version</h3><p><a href="https://msdn.microsoft.com/en-us/library/mt238290.aspx" target="_blank" rel="noopener noreferrer">MSDN Installer Location</a>
Hopefully, they&rsquo;ll improve the process soon by trimming the size and allowing ssms to autoupdate. Just like Power BI, you have to download the installer for the new version and run the installer to upgrade.
**As a solution in the meantime, you could leverage the power of <strong><a href="http://ketarin.canneverbe.com/" target="_blank" rel="noopener noreferrer"><strong>Ketarin</strong></a></strong> **
I created a installer package for running the update automatically, so you could have this setup to check upon startup, and then when a download is detected, download the update, and run silent install. Perhaps this will help you if you want to stay up to date.</p>
<p><figure><a class="lightgallery" href="/images/download-latest-ssms-version.png" title="Download latest SSMS Version" data-thumbnail="/images/download-latest-ssms-version.png">
        
    </a></figure></p>
<h3 id="ketarin-passive-install" class="headerLink">
    <a href="#ketarin-passive-install" class="header-mark"></a>Ketarin passive install</h3><p>The version parsing I added into this means you shouldn&rsquo;t need to download the installer unless it detects a new version applied.</p>
<p><figure><a class="lightgallery" href="/images/ketarin-passive-install.png" title="Ketarin passive install" data-thumbnail="/images/ketarin-passive-install.png">
        
    </a></figure></p>
<h3 id="update-ready-to-download-and-apply" class="headerLink">
    <a href="#update-ready-to-download-and-apply" class="header-mark"></a>Update ready to download and apply</h3><p>This is what you&rsquo;d see on computer startup with a fresh update ready and waiting for you.</p>
<p><figure><a class="lightgallery" href="/images/update-ready-to-download-and-apply.png" title="Update ready to download and apply" data-thumbnail="/images/update-ready-to-download-and-apply.png">
        
    </a></figure></p>
<h3 id="last-setup-note" class="headerLink">
    <a href="#last-setup-note" class="header-mark"></a>Last setup note</h3><p>If you setup Ketarin, to make the app portable, copy the jobs.db from appdata folder, into the application folder and restart. This will make it portable so you can actually put this on a USB, clouddrive, or however you want to make it easily usable on other machines.</p>
<p><figure><a class="lightgallery" href="/images/2016-04-27_11-22-24.png" title="red gate sql toolbelt updated automatically with Ketarin" data-thumbnail="/images/2016-04-27_11-22-24.png">
        
    </a></figure></p>

        ]]>
    </description>
</item>
</channel>
</rss>

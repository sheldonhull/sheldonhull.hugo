<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Terraform - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/terraform/</link>
        <description>Terraform - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 12 Jul 2021 15:08:30 -0500</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/terraform/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Use Driftctl to Detect Infra Drift
    </title>
    <link>
        https://www.sheldonhull.com/use-driftctl-to-detect-infra-drift/
    </link>
    <pubDate>
        Mon, 12 Jul 2021 15:08:30 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/use-driftctl-to-detect-infra-drift/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Use <a href="https://github.com/cloudskiff/driftctl" target="_blank" rel="noopener noreferrer">Driftctl</a> to detect drift in your your infrastructure.
This snippet generates a <a href="https://driftctl.com/html-reports/" target="_blank" rel="noopener noreferrer">html report</a> to show coverage and drift figures of the target.</p>
<p>For multiple states, you&rsquo;ll need to adapt this to provide more <code>--from</code> paths to ensure all state files are used to identify coverage.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$S3BucketUri</span> <span class="p">=</span> <span class="s2">&#34;terraform-states-</span><span class="nv">$AWS_ACCOUNT_NUMBER</span><span class="s2">/</span><span class="nv">$AWS_REGION</span><span class="s2">/</span><span class="nv">$TERRAFORMMODULE</span><span class="s2">/terraform.tfstate&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Date</span> <span class="p">=</span> <span class="vm">$</span><span class="p">(</span><span class="nb">Get-Date</span> <span class="n">-Format</span> <span class="s1">&#39;yyyy-MM-dd-HHmmss&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ArtifactDirectory</span> <span class="p">=</span> <span class="p">(</span><span class="nb">New-Item</span> <span class="s1">&#39;artifacts&#39;</span> <span class="n">-ItemType</span> <span class="n">Directory</span> <span class="n">-Force</span><span class="p">).</span><span class="py">FullName</span>
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span><span class="n">docker</span> <span class="n">run</span> <span class="n">-t</span> <span class="p">-</span><span class="n">-rm</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="p">${</span><span class="n">PWD</span><span class="p">}</span><span class="err">:</span><span class="p">/</span><span class="n">app</span><span class="err">:</span><span class="n">rw</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.driftctl:/root/.driftctl&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.aws:/root/.aws:ro&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-e</span> <span class="s2">&#34;AWS_PROFILE=default&#34;</span> <span class="p">`</span> <span class="c"># Replace this with your aws profile name if you have multiple profiles</span>
</span></span><span class="line"><span class="cl">    <span class="n">cloudskiff</span><span class="p">/</span><span class="n">driftctl</span> <span class="n">scan</span> <span class="p">-</span><span class="n">-from</span> <span class="s2">&#34;tfstate+s3://</span><span class="nv">$S3BucketUri</span><span class="s2">&#34;</span> <span class="p">-</span><span class="n">-output</span> <span class="s2">&#34;html://</span><span class="nv">$ArtifactDirectory</span><span class="s2">/driftctl-report-</span><span class="nv">$Date</span><span class="s2">.html&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Optionally, you can adjust to recursively scan the state file of an entire bucket (say if using Terragrunt to store in special key prefixes).</p>
<ul>
<li>Change to <code>--from &quot;tfstate+s3://mybucket/myprefix&quot;</code> without requiring the full path to a single tfstate file.</li>
<li>Recursively search if in many subfolders with: <code>**/*.tfstate</code>.</li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Fix Terraform Provider Path in State
    </title>
    <link>
        https://www.sheldonhull.com/fix-terraform-provider-path-in-state/
    </link>
    <pubDate>
        Wed, 10 Mar 2021 21:01:09 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/fix-terraform-provider-path-in-state/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Fixing Terraform provider paths in state might be required after upgrading to 0.13-0.14 if your prior state has the following paths.</p>
<p>First, get the terraform providers from state using: <code>terraform providers</code></p>
<p>The output should look similar to this:</p>
<p><figure><a class="lightgallery" href="/images/2021-03-10-microblog-provider-list-01.png" title="image-of-providers" data-thumbnail="/images/2021-03-10-microblog-provider-list-01.png">
        
    </a></figure></p>
<p>To fix these, try running the commands to fix state.
Please adjust to the required providers your state uses, and make sure your tooling has a backup of the state file in case something goes wrong.
Terraform Cloud should have this backed up automatically if it&rsquo;s your backend.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">terraform state replace-provider -- registry.terraform.io/-/aws registry.terraform.io/hashicorp/aws
</span></span><span class="line"><span class="cl">terraform state replace-provider -- registry.terraform.io/-/random registry.terraform.io/hashicorp/random
</span></span><span class="line"><span class="cl">terraform state replace-provider -- registry.terraform.io/-/null registry.terraform.io/hashicorp/null
</span></span><span class="line"><span class="cl">terraform state replace-provider -- registry.terraform.io/-/azuredevops registry.terraform.io/microsoft/azuredevops
</span></span></code></pre></td></tr></table>
</div>
</div><p>The resulting changes can be seen when running <code>terraform providers</code> and seeing the dash is now gone.</p>
<p><figure><a class="lightgallery" href="/images/2021-03-10-microblog-provider-list-02.png" title="image-of-providers-changed" data-thumbnail="/images/2021-03-10-microblog-provider-list-02.png">
        
    </a></figure></p>
<p><a href="http://bit.ly/3rvFPvr" target="_blank" rel="noopener noreferrer">Upgrading to Terraform v0.13 - Terraform by HashiCorp</a></p>
<div
    class="details admonition Example
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Loop
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>If you have multiple workspaces in the same folder, you&rsquo;ll have to run fix on their seperate state files.</p>
<p>This is an example of a quick adhoc loop with PowerShell to make this a bit quicker, using <code>tfswitch</code> cli tool.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">tf</span> <span class="n">workspace</span> <span class="n">list</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$workspace</span> <span class="p">=</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Replace</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Write-Build</span> <span class="n">Green</span> <span class="s2">&#34;Selecting workspace: </span><span class="nv">$workspace</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">tf</span> <span class="n">workspace</span> <span class="nb">select </span><span class="nv">$workspace</span>
</span></span><span class="line"><span class="cl">    <span class="n">tfswitch</span> <span class="mf">0.13</span><span class="p">.</span><span class="py">5</span>
</span></span><span class="line"><span class="cl">    <span class="n">tf</span> <span class="mf">013</span><span class="p">.</span><span class="py">upgrade</span>
</span></span><span class="line"><span class="cl">    <span class="n">tfswitch</span>
</span></span><span class="line"><span class="cl">    <span class="n">tf</span> <span class="n">init</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Only use autoapprove once you are confident of these changes</span>
</span></span><span class="line"><span class="cl">    <span class="n">terraform</span> <span class="n">state</span> <span class="nb">replace-provider</span> <span class="n">-auto-approve</span> <span class="p">--</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/-/</span><span class="n">aws</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">hashicorp</span><span class="p">/</span><span class="n">aws</span>
</span></span><span class="line"><span class="cl">    <span class="n">terraform</span> <span class="n">state</span> <span class="nb">replace-provider</span> <span class="n">-auto-approve</span> <span class="p">--</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/-/</span><span class="n">random</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">hashicorp</span><span class="p">/</span><span class="n">random</span>
</span></span><span class="line"><span class="cl">    <span class="n">terraform</span> <span class="n">state</span> <span class="nb">replace-provider</span> <span class="n">-auto-approve</span> <span class="p">--</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/-/</span><span class="n">null</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">hashicorp</span><span class="p">/</span><span class="n">null</span>
</span></span><span class="line"><span class="cl">    <span class="n">terraform</span> <span class="n">state</span> <span class="nb">replace-provider</span> <span class="n">-auto-approve</span> <span class="p">--</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/-/</span><span class="n">azuredevops</span> <span class="n">registry</span><span class="p">.</span><span class="py">terraform</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="n">microsoft</span><span class="p">/</span><span class="n">azuredevops</span>
</span></span><span class="line"><span class="cl">    <span class="n">tf</span> <span class="n">validate</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Leverage Renovate for Easy Dependency Updates
    </title>
    <link>
        https://www.sheldonhull.com/leverage-renovate-for-easy-dependency-updates/
    </link>
    <pubDate>
        Thu, 14 Jan 2021 02:42:20 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/leverage-renovate-for-easy-dependency-updates/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition Note
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Update 2021-06-30
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Added example from renovate documentation with some notes on the Azure DevOps Pipeline to leverage their free renovate service.
GitHub users benefit from the Renovate app, but Azure Pipelines should use an Azure Pipeline definition.</p>
<p>Follow the instructions from the <code>Renovate Me</code> task linked in resources, and ensure the appropriate rights are granted for the build service to manage branches and pull requests.</p>
</div>
    </div>
  </div>
<p>Renovate is a great tool to know about.
For Go, you can keep modules updated automatically, but still leverage a pull request review process to allow automated checks to run before allowing the update.</p>
<p>This is particularly useful with Terraform dependencies, which I consider notoriously difficult to keep updated.
Instead of needing to use ranges for modules, you can start specifying exact versions and this GitHub app will automatically check for updates periodically and submit version bumps.</p>
<p>Why? You can have a Terraform plan previewed and checked for any errors on a new version update with no work.
This means your blast radius on updates would be reduced as you are staying up to date and previewing each update as it&rsquo;s available.</p>
<p>No more 5 months of updates and figuring out what went wrong 😁</p>
<p>Here&rsquo;s an example json config that shows how to allow automerging, while respecting minor/major version updates not enabling automerge.</p>
<p>Note that you&rsquo;d want to install the auto-approver app they document in the marketplace if you have pull request reviews required.</p>
<p>In addition, if you use <code>CODEOWNERS</code> file, this will still block automerge.
Consider removing that if you aren&rsquo;t really leveraging it.</p>
<script src="https://gist.github.com/sheldonhull/f36ea328a2167e93a7015906beb08bbe.js"></script>

<h2 id="resources" class="headerLink">
    <a href="#resources" class="header-mark"></a>Resources</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=jyc.vsts-extensions-renovate-me" target="_blank" rel="noopener noreferrer">Renovate Me Azure DevOps Task</a></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Unable To Resolve Provider AWS with Terraform Version 0.13.4
    </title>
    <link>
        https://www.sheldonhull.com/unable-to-resolve-provider-aws-with-terraform-013/
    </link>
    <pubDate>
        Mon, 02 Nov 2020 21:39:39 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/unable-to-resolve-provider-aws-with-terraform-013/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>I couldn&rsquo;t get past this for a while when I accidentally stumbled across a fix.
I believe the fix was merged, however this problem still existed in <code>0.13.4</code> so I stuck with it.</p>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      GitHub Issues
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>When investigating the cause, I found this PR which intended this to be the installer behaviour for the implicit global cache, in order to match 0.12. Any providers found in the global cache directory are only installed from the cache, and the registry is not queried.
Note that this behaviour can be overridden using provider_installation configuration.
That is, you can specify configuration like this <code>~/.terraform.d/providercache.tfrc</code></p>
<p><a href="https://github.com/hashicorp/terraform/issues/25985#issuecomment-680052845" target="_blank" rel="noopener noreferrer">GitHub Issue Comment</a></p>
</div>
    </div>
  </div>
<p>I used the code snippet here: <code>micro ~/.terraform.d/providercache.tfrc</code></p>
<p>Wasn&rsquo;t sure if it was interpreted with shell, so I didn&rsquo;t use the relative path <code>~/.terraform.d/plugins</code>, though that might work as well.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">provider_installation</span> {
</span></span><span class="line"><span class="cl">  <span class="k">filesystem_mirror</span> {
</span></span><span class="line"><span class="cl"><span class="n">    path</span> <span class="o">=</span> <span class="s2">&#34;/Users/sheldonhull/.terraform.d/plugins&#34;</span>
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">  <span class="k">direct</span> {
</span></span><span class="line"><span class="cl"><span class="n">    exclude</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>After this <code>terraform init</code> worked.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Terraform&#39;s Elegance in Abstraction
    </title>
    <link>
        https://www.sheldonhull.com/terraforms-elegance-in-abstraction/
    </link>
    <pubDate>
        Wed, 09 Sep 2020 11:40:18 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/terraforms-elegance-in-abstraction/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Migrated a forked copy of a module over to a new module with similar schema.
There were some additional properties that were removed.
In rerunning the plan I was expecting to see some issues with resources being broken down and rebuilt.
Instead, Terraform elegantly handled the module change.</p>
<p>I imagine this has to do with the resource name mapping being the same, but regardless it&rsquo;s another great example of how agile Terraform can be.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Rebuild Dash Index Due to Corrupted Index
    </title>
    <link>
        https://www.sheldonhull.com/rebuild-dash-index-due-to-corrupted-index/
    </link>
    <pubDate>
        Tue, 01 Sep 2020 12:33:25 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/rebuild-dash-index-due-to-corrupted-index/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>I use <a href="https://bit.ly/3gWSLEJ" target="_blank" rel="noopener noreferrer">Dash</a> for improved doc access.
Terraform updated recently to <code>0.13.x</code> and I began having odd issues with AWS provider results coming through.
If you need to rollback, just go to the preferences and pick an older docset, in my case <code>0.13.0</code> worked correctly.
Make sure to remove the problematic version (the uninstall refers to just the most recent, not any additional versions you selected under the dropdown)</p>
<p>If the index doesn&rsquo;t rebuild, you can close the app, manually remove the index, and it will rebuild on open.
I&rsquo;m pretty sure you don&rsquo;t need to do this if you use the uninstall option in the dialogue.</p>
<p>On macOS 10.15, you can find the index at <code>~/Library/Application Support/Dash/Data/manIndex.dsidx</code> and delete this.
Reopen Dash and it will rebuild the index.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Incredible setup experience with gitpod
    </title>
    <link>
        https://www.sheldonhull.com/incredible-setup-experience-with-gitpod/
    </link>
    <pubDate>
        Thu, 27 Aug 2020 20:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/incredible-setup-experience-with-gitpod/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>What a polished setup experience from gitpod. Super impressed as I&rsquo;ve never seen an interactive terraform setup asking for user input.</p>
<p>This basically generated an entire setup for GitPod, and persisted the Terraform plan for the entire stack it created in a directory for management and adjustments as desired.</p>
<p>I&rsquo;m seriously impressed.</p>
<p>Check this out at: <a href="https://bit.ly/2YGACVe" target="_blank" rel="noopener noreferrer">Install on AWS</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># Setup Gitpod with self-setup docker installer</span>
</span></span><span class="line"><span class="cl"><span class="c"># https://www.gitpod.io/docs/self-hosted/latest/install/install-on-aws-script/</span>
</span></span><span class="line"><span class="cl"><span class="c"># Set-Location ./terraform/gitpod</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="n">aws</span><span class="p">.</span><span class="py">tools</span><span class="p">.</span><span class="n">common</span><span class="p">,</span> <span class="n">aws</span><span class="p">.</span><span class="py">tools</span><span class="p">.</span><span class="py">SecurityToken</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Set-AWSCredential</span> <span class="n">-ProfileName</span> <span class="s1">&#39;MyProfileName&#39;</span> <span class="n">-Scope</span> <span class="n">Global</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$ENV:AWS_ACCESS_KEY_ID</span> <span class="p">=</span> <span class="nv">$cred</span><span class="p">.</span><span class="py">GetCredentials</span><span class="p">().</span><span class="py">AccessKey</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ENV:AWS_SECRET_ACCESS_KEY</span> <span class="p">=</span> <span class="nv">$cred</span><span class="p">.</span><span class="py">GetCredentials</span><span class="p">().</span><span class="py">SecretKey</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ENV:AWS_DEFAULT_REGION</span> <span class="p">=</span> <span class="s1">&#39;eu-west-1&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># can&#39;t use STS temporary credentials to create iam resources, so use normal iam credentials</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">run</span> <span class="p">-</span><span class="n">-rm</span> <span class="n">-it</span> <span class="n">-e</span> <span class="n">AWS_ACCESS_KEY_ID</span><span class="p">=</span><span class="nv">$ENV:AWS_ACCESS_KEY_ID</span> <span class="n">-e</span> <span class="n">AWS_SECRET_ACCESS_KEY</span><span class="p">=</span><span class="nv">$ENV:AWS_SECRET_ACCESS_KEY</span> <span class="n">-e</span> <span class="n">AWS_DEFAULT_REGION</span><span class="p">=</span><span class="nv">$ENV:AWS_DEFAULT_REGION</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl"><span class="n">-v</span> <span class="p">${</span><span class="n">PWD</span><span class="p">}/</span><span class="n">awsinstall</span><span class="err">:</span><span class="p">/</span><span class="n">workspace</span> <span class="n">eu</span><span class="p">.</span><span class="py">gcr</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="nb">gitpod-io</span><span class="p">/</span><span class="nb">self-hosted</span><span class="p">/</span><span class="n">installer</span><span class="err">:</span><span class="n">latest</span> <span class="n">aws</span>
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        How to Iterate Through A List of Objects with Terraform&#39;s for_each function
    </title>
    <link>
        https://www.sheldonhull.com/how-to-iterate-through-a-list-of-objects-with-terraforms-for-each-function/
    </link>
    <pubDate>
        Wed, 29 Jul 2020 16:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/how-to-iterate-through-a-list-of-objects-with-terraforms-for-each-function/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="what-i-want-to-do" class="headerLink">
    <a href="#what-i-want-to-do" class="header-mark"></a>What I want to do</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="c"># create file local.users.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foobar1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">foobar1@foobar.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foobar2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">foobar2@foobar.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foobar3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">foobar3@foobar.com</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">locals</span> {
</span></span><span class="line"><span class="cl"><span class="n">  users_file</span>         <span class="o">=</span> <span class="s2">&#34;local.users.yml&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">  users_file_content</span> <span class="o">=</span> <span class="k">fileexists</span><span class="p">(</span><span class="k">local</span><span class="p">.</span><span class="k">users_file</span><span class="p">)</span> <span class="err">?</span> <span class="k">file</span><span class="p">(</span><span class="k">local</span><span class="p">.</span><span class="k">users_file</span><span class="p">)</span> <span class="err">:</span> <span class="s2">&#34;NoSettingsFileFound: true&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">  users_config</span>       <span class="o">=</span> <span class="k">yamldecode</span><span class="p">(</span><span class="k">local</span><span class="p">.</span><span class="k">users_file_content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>What I want to work:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">resource</span> <span class="s2">&#34;something&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="k">for_each</span> <span class="k">local</span><span class="p">.</span><span class="k">users_config</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="k">each</span><span class="p">.</span><span class="k">key</span><span class="c1"> # or even each.value.name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">email</span> <span class="o">=</span> <span class="k">each</span><span class="p">.</span><span class="k">value</span><span class="p">.</span><span class="k">email</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="what-ive-had-to-do" class="headerLink">
    <a href="#what-ive-had-to-do" class="header-mark"></a>What I&rsquo;ve had to do</h2><p>Now to iterate through this collection, I&rsquo;ve had challenges, as the only way I&rsquo;ve gotten this to work would be to ensure there was a designated key in the <code>yaml</code> structure.
This provides a map object with a key/value format, instead of a collection of normal objects.</p>
<p>This would result in a yaml format like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&#39;foobar1&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foobar1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">foobar1@foobar.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&#39;foobar2&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foobar2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">foobar2@foobar.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&#39;foobar3&#39;</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">foobar3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">foobar3@foobar.com</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This provides the &ldquo;key&rdquo; for each entry, allowing Terraform&rsquo;s engine to correctly identify the unique entry.
This is important, as without a unique key to determine the resource a plan couldn&rsquo;t run in a deterministic manner by comparing correctly the previously created resource against the prospective plan.</p>
<h2 id="another-way-using-expressions" class="headerLink">
    <a href="#another-way-using-expressions" class="header-mark"></a>Another Way Using Expressions</h2><p>Iterating through a map has been the main way I&rsquo;ve handled this, I finally ironed out how to use expressions with Terraform to allow an object list to be the source of a <code>for_each</code> operation.
This makes feeding Terraform plans from <code>yaml</code> or other input much easier to work with.</p>
<p>Most of the examples I&rsquo;ve seen confused the issue by focusing on very complex flattening or other steps.
From this stack overflow answer, I experimented and finally got my expression to work with only a single line.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">resource</span> <span class="s2">&#34;foobar&#34; &#34;this&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">    for_each</span> <span class="o">=</span><span class="n"> {for user in local.users_config.users: user.name</span> <span class="o">=</span><span class="err">&gt;</span> <span class="k">user</span>}
</span></span><span class="line"><span class="cl"><span class="n">    name</span>     <span class="o">=</span> <span class="k">each</span><span class="p">.</span><span class="k">key</span>
</span></span><span class="line"><span class="cl"><span class="n">    email</span>    <span class="o">=</span> <span class="k">each</span><span class="p">.</span><span class="k">value</span><span class="p">.</span><span class="k">email</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>This results in a simple yaml object list being correctly turned into something Terraform can work with, as it defines the unique key in the expression.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        simple conditional flag in terraform
    </title>
    <link>
        https://www.sheldonhull.com/simple-conditional-flag-in-terraform/
    </link>
    <pubDate>
        Tue, 28 Jul 2020 18:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/simple-conditional-flag-in-terraform/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Sometimes, you just need a very simple flag for enabled or disabled, or perhaps just a resource to deploy if <code>var.stage == &quot;qa&quot;</code>.
This works well for a single resource as well as collections if you provide the <a href="https://bit.ly/39yHUP9" target="_blank" rel="noopener noreferrer">splat syntax</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">resource</span> <span class="s2">&#34;aws_ssm_association&#34;</span> <span class="s2">&#34;something_i_need_in_testing_only&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">count</span> <span class="p">=</span> <span class="n">var</span><span class="p">.</span><span class="py">stage</span> <span class="p">==</span> <span class="s2">&#34;qa&#34;</span> <span class="p">?</span> <span class="mf">1</span> <span class="err">:</span> <span class="mf">0</span>
</span></span><span class="line"><span class="cl">   <span class="n">name</span> <span class="p">=</span> <span class="n">var</span><span class="p">.</span><span class="py">name</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Compiling a Custom Provider and Including for Terraform Cloud
    </title>
    <link>
        https://www.sheldonhull.com/compiling-a-custom-provider-and-including-for-terraform-cloud/
    </link>
    <pubDate>
        Tue, 14 Jul 2020 13:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/compiling-a-custom-provider-and-including-for-terraform-cloud/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="assumptions" class="headerLink">
    <a href="#assumptions" class="header-mark"></a>Assumptions</h2><ul>
<li>You are familiar with the basics of setting up <code>Go</code> and can run basic Go commands like <code>go build</code> and <code>go install</code> and don&rsquo;t need much guidance on that specific part.</li>
<li>You have a good familiarity with Terraform and the concept of providers.</li>
<li>You need to include a custom provider which isn&rsquo;t included in the current registry (or perhaps you&rsquo;ve geeked out and modified one yourself 😁).</li>
<li>You want to run things in Terraform Enterprise ☁.</li>
</ul>
<h2 id="terraform-cloud" class="headerLink">
    <a href="#terraform-cloud" class="header-mark"></a>Terraform Cloud</h2><p>For Terraform Cloud, bundling is not allowed.</p>
<p>Instead, the &ldquo;legacy&rdquo; way of running this is to include the plugin directly in the directory that Terraform will be invoked on with <code>terraform.d/plugins/linux_amd64</code> as the path containing the provider. See discussion: <a href="https://discuss.hashicorp.com/t/using-community-providers-with-terraform-cloud-api/5432/4" target="_blank" rel="noopener noreferrer">Using Community Providers With Terraform Cloud</a>.</p>
<p>Part of my current walk-through (primarily using terraform-bundle) is relevant only for Terraform Enterprise, not Terraform Cloud.
I missed the ending documentation section on the custom bundle requiring installation and not being supported in Terraform Cloud.</p>
<p>For the directions below, disregard the bundle aspect for Terraform Cloud, and instead focus on building the custom provider and including in the project directory as shown.</p>
<p>If you are willing to explore Atlantis, I bet something can be done with custom providers in there.</p>
<p>After following the custom provider build steps below, create a <code>.terraformignore</code> file in your project directory and put in the config below.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">.terraform
</span></span><span class="line"><span class="cl">.git
</span></span><span class="line"><span class="cl">.gtm
</span></span><span class="line"><span class="cl">*.tfstate
</span></span></code></pre></td></tr></table>
</div>
</div><p>With a backend like below, I was actually able to get terraform cloud to run the custom provider and return the plan.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">terraform {
</span></span><span class="line"><span class="cl">  backend &#34;remote&#34; {
</span></span><span class="line"><span class="cl">    hostname     = &#34;app.terraform.io&#34;
</span></span><span class="line"><span class="cl">    organization = &#34;myorg&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    workspaces {
</span></span><span class="line"><span class="cl">      name = &#34;terraform-artifactory&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you get an error the first time you run this, see the troubleshooting section at the end.</p>
<h2 id="custom-providers-bundling" class="headerLink">
    <a href="#custom-providers-bundling" class="header-mark"></a>Custom Providers Bundling</h2><p>As of the time of this post, to include a custom provider with Terraform Enterprise, you need to create a custom <a href="https://bit.ly/3fA4CZu" target="_blank" rel="noopener noreferrer">terraform bundle</a> bundle to package up the terraform package and any desired custom plugins.</p>
<p>This terraform bundle includes the terraform program, as well as any range of other providers that you want to include for running in the remote terraform workspace.</p>
<p>Before you go down this route, you should make sure that the <a href="https://registry.terraform.io/browse/providers?tier=community" target="_blank" rel="noopener noreferrer">Terraform Registry</a> doesn&rsquo;t already include the provider you need.</p>
<h2 id="source-of-truth" class="headerLink">
    <a href="#source-of-truth" class="header-mark"></a>Source Of Truth</h2><p>For the most up to date directions, you can go through these directions:</p>
<ul>
<li><a href="https://bit.ly/2ZsG9iX" target="_blank" rel="noopener noreferrer">Setting Up Development Environment</a></li>
<li><a href="https://bit.ly/3fA4CZu" target="_blank" rel="noopener noreferrer">Using Terraform Bundle</a></li>
<li><a href="https://www.terraform.io/docs/cloud/run/install-software.html" target="_blank" rel="noopener noreferrer">Installing Custom Software</a></li>
</ul>
<h2 id="compiling-the-custom-provider" class="headerLink">
    <a href="#compiling-the-custom-provider" class="header-mark"></a>Compiling the custom provider</h2><p>In this example, I&rsquo;m working with a provider for Jfrog Artifactory, which IMO has an atrocious management experience on the web.
By compiling this custom provider, my goal was to provide a clean user, repository, and group management experience.</p>
<p>You need to target the platform for Go in the build step, as the Terraform Enterprise environment expects <code>Linux</code> and <code>amd64</code> as the target.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">atlassian</span><span class="p">/</span><span class="nb">terraform-provider</span><span class="n">-artifactory</span><span class="p">.</span><span class="py">git</span>
</span></span><span class="line"><span class="cl"><span class="n">git</span> <span class="n">install</span> <span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># I use pwsh even on macOS 😁</span>
</span></span><span class="line"><span class="cl"><span class="c">#$ENV:GOOS=&#39;linux&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c">#$ENV:GOARCH=&#39;amd64&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c">#go build</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#See troubleshooting section below. More robust than simple go build. This simplifies things and will generate all binaries for you</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">goreleaser</span> <span class="n">build</span> <span class="p">-</span><span class="n">-snapshot</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="get-stuff-setup" class="headerLink">
    <a href="#get-stuff-setup" class="header-mark"></a>Get Stuff Setup</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="err">:</span><span class="p">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">hashicorp</span><span class="p">/</span><span class="n">terraform</span><span class="p">.</span><span class="py">git</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To checkout a specific tagged version (recommended):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">checkout</span> <span class="n">tags</span><span class="p">/&lt;</span><span class="n">tag_name</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Quick little #devhack&hellip; Use Git Graph in Visual Studio Code to make working with busy repositories much easier.
Yes, I&rsquo;m no Vim magician. Sometimes a little visual help is much better than trying to do it all in cli. #heresy</p>
<p><figure><a class="lightgallery" href="/images/2020-07-14_14-57-48_using_git_graph.png" title="Use Git Graph to Visually Navigate A Busy Repo and Checkout a Tagged Commit" data-thumbnail="/images/2020-07-14_14-57-48_using_git_graph.png" data-sub-html="<h2>Git Graph Makes Things Easier</h2><p>Use Git Graph to Visually Navigate A Busy Repo and Checkout a Tagged Commit</p>">
        
    </a><figcaption class="image-caption">Git Graph Makes Things Easier</figcaption>
    </figure></p>
<p>Next, you&rsquo;ll want to install and validate your install worked.
<code>go install</code> ensures that dependencies are downloaded, so once again the magic of <code>Go</code> wins the day.
If you flip to a new tagged version, make sure to rerun the install so you have the correct version of the tooling available.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">go</span> <span class="n">install</span> <span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">go</span> <span class="n">install</span> <span class="p">./</span><span class="n">tools</span><span class="p">/</span><span class="nb">terraform-bundle</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>For some reason, I had issues with the path picking it up in my current session, so for expediency, I just ran the next steps with the fully qualified path: <code>/Users/sheldonhull/go/bin/terraform-bundle</code> instead of <code>terraform-bundle</code> directly.</p>
<p>Grab an example of the configuration <code>hcl</code> file for the terraform-bundler from the link mentioned above.
Then you can create this in the project directory or qualify it to a subdirectory if you want to save various bundle configuration files.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">mkdir</span> <span class="n">mybundles</span>
</span></span><span class="line"><span class="cl"><span class="nb">New-Item</span> <span class="n">-Path</span> <span class="p">./</span><span class="n">mybundles</span><span class="p">/</span><span class="nb">terraform-bundle</span><span class="p">.</span><span class="py">hcl</span> <span class="n">-ItemType</span> <span class="n">File</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here is a trimmed down example config with what worked for me.
See the bottom troubleshooting section for more details on why I did not adhere to the documented config from the README.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">terraform</span> {
</span></span><span class="line"><span class="cl"><span class="n">  version</span> <span class="o">=</span> <span class="s2">&#34;0.12.28&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"><span class="k">providers</span> {
</span></span><span class="line"><span class="cl"><span class="n"> artifactory</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;0.0.0&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>We need to include this plugin in a <a href="https://bit.ly/32jetib" target="_blank" rel="noopener noreferrer">specific location</a> for the bundle tool to do it&rsquo;s magic.</p>
<p>Also ensure you follow the naming convention for a provider.</p>
<blockquote>
<p>To be recognized as a valid plugin, the file must have a name of the form <code>terraform-provider-&lt;NAME&gt;</code></p>
</blockquote>
<p>This is where PowerShell shines, and it&rsquo;s easy to make this path without issue using <code>Join-Path</code> in a way that also is fully cross-platform with macOS, Linux, or Windows (pick your poison)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">try</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$version</span> <span class="p">=</span> <span class="nb">terraform-bundle</span> <span class="p">-</span><span class="n">-version</span> <span class="p">*&gt;&amp;</span><span class="mf">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$version</span> <span class="o">-notmatch</span> <span class="s1">&#39;\d{1}[.]\d{2}[.]\d{1,2}&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="s2">&#34;failed to run terraform bundle: </span><span class="p">$(</span><span class="nv">$_</span><span class="p">.</span><span class="py">Exception</span><span class="p">.</span><span class="n">Message</span><span class="p">)</span><span class="s2">&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">catch</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Write-Host</span> <span class="s2">&#34;Adding go bin/path to path so terraform-bundle can be resolved&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$ENV:PATH</span> <span class="p">+=</span> <span class="s2">&#34;</span><span class="nv">${ENV:HOME}</span><span class="s2">/go/bin/:</span><span class="nv">$PATH</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$SOURCEHOST</span>     <span class="p">=</span><span class="s1">&#39;github.com&#39;</span>  <span class="c"># any arbitrary value allowed per docs</span>
</span></span><span class="line"><span class="cl"><span class="nv">$SOURCENAMESPACE</span><span class="p">=</span><span class="s1">&#39;atlassian&#39;</span>    <span class="c"># any arbitrary value allowed per docs</span>
</span></span><span class="line"><span class="cl"><span class="nv">$NAME</span>           <span class="p">=</span><span class="s1">&#39;artifactory&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$OS</span>             <span class="p">=</span><span class="s1">&#39;linux&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ARCH</span>           <span class="p">=</span><span class="s1">&#39;amd64&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$VERSION</span>        <span class="p">=</span> <span class="s1">&#39;0.0.0&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$PluginPath</span>     <span class="p">=</span> <span class="nb">Join-Path</span> <span class="n">plugins</span> <span class="nv">$SOURCEHOST</span> <span class="nv">$SOURCENAMESPACE</span> <span class="nv">$NAME</span> <span class="nv">$VERSION</span> <span class="s2">&#34;</span><span class="nv">${OS}</span><span class="s2">_</span><span class="nv">${ARCH}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="vm">$null</span>           <span class="p">=</span> <span class="nb">New-Item</span> <span class="n">-Path</span> <span class="nv">$PluginPath</span> <span class="n">-ItemType</span> <span class="n">Directory</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="cl"><span class="nb">Remove-Item</span> <span class="n">-LiteralPath</span> <span class="p">./</span><span class="n">plugins</span> <span class="n">-Recurse</span> <span class="n">-Confirm:</span><span class="vm">$false</span>
</span></span><span class="line"><span class="cl"><span class="nb">New-Item</span> <span class="n">plugins</span> <span class="n">-ItemType</span> <span class="n">directory</span> <span class="n">-Force</span> <span class="n">-ErrorAction</span> <span class="n">silentlycontinue</span>
</span></span><span class="line"><span class="cl"><span class="nb">Copy-Item</span> <span class="p">${</span><span class="n">ENV</span><span class="err">:</span><span class="n">HOME</span><span class="p">}/</span><span class="n">git</span><span class="p">/</span><span class="n">github</span><span class="p">/</span><span class="nb">terraform-provider</span><span class="n">-artifactory</span><span class="p">/</span><span class="n">dist</span><span class="p">/</span><span class="nb">terraform-provider</span><span class="n">-artifactory_linux_amd64</span><span class="p">/</span><span class="nb">terraform-provider</span><span class="n">-artifactory</span> <span class="n">-Destination</span> <span class="p">(</span><span class="nb">Join-Path</span> <span class="n">plugins</span> <span class="s2">&#34;terraform-provider-artifactory&#34;</span><span class="p">)</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="cl"><span class="nb">terraform-bundle</span> <span class="n">package</span> <span class="n">-os</span><span class="p">=</span><span class="n">linux</span> <span class="n">-arch</span><span class="p">=</span><span class="n">amd64</span> <span class="p">-</span><span class="n">-plugin-dir</span> <span class="p">./</span><span class="n">plugins</span> <span class="p">./</span><span class="nb">jfrog-bundle</span><span class="p">.</span><span class="py">hcl</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now to bundle this up</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">terraform-bundle</span> <span class="n">package</span> <span class="n">-os</span><span class="p">=</span><span class="n">linux</span> <span class="n">-arch</span><span class="p">=</span><span class="n">amd64</span> <span class="nb">jfrog-bundle</span><span class="p">.</span><span class="py">hcl</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="troubleshooting" class="headerLink">
    <a href="#troubleshooting" class="header-mark"></a>Troubleshooting</h2><h3 id="problems-parsing-the-bundle-configuration-file" class="headerLink">
    <a href="#problems-parsing-the-bundle-configuration-file" class="header-mark"></a>Problems Parsing the bundle configuration file</h3><p>I ran into some issues with it parsing the configuration file as soon as I added the custom plugin. It reported <code>unknown type for string *ast.ObjectType</code>.</p>
<p>Here&rsquo;s what I looked at:</p>
<p>In the project, there is a <code>tools/terraform-bundle/config.go</code> that is responsible for parsing the hcl file.</p>
<p>First, the configuration looks correct in taking a string slice for the versions, and the source is a normal string.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">TerraformConfig</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Version</span> <span class="nx">discovery</span><span class="p">.</span><span class="nx">VersionStr</span> <span class="s">`hcl:&#34;version&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ProviderConfig</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Versions</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`hcl:&#34;versions&#34;`</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Source</span>   <span class="kt">string</span>   <span class="s">`hcl:&#34;source&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This seems to mean the configuration syntax of meets with the schema required by the configuration code.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">terraform</span> {
</span></span><span class="line"><span class="cl"><span class="n">    version</span> <span class="o">=</span> <span class="s2">&#34;0.12.28&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"><span class="k">providers</span> {
</span></span><span class="line"><span class="cl"><span class="n">    artifactory</span> <span class="o">=</span> {
</span></span><span class="line"><span class="cl"><span class="n">        versions</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;0.1&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">        source</span> <span class="o">=</span> <span class="s2">&#34;example.org/myorg/artifactory&#34;</span>
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>It looks like the configuration syntax from the example is a bit different from what is being successfully parsed.
Instead of using the fully designated schema, I adjusted it to <code>artifactory = [&quot;0.0.0&quot;]</code> and it succeeded in parsing the configuration.</p>
<p>The help <code>terraform-bundle package --help</code> also provides an example indicating to just use the simple syntax and let it look for the provider in the default directory of <code>./plugins</code>.</p>
<h3 id="failed-to-resolve-artifactory-provider-01-no-provider-exists-with-the-given-name" class="headerLink">
    <a href="#failed-to-resolve-artifactory-provider-01-no-provider-exists-with-the-given-name" class="header-mark"></a>Failed to resolve artifactory provider 0.1: no provider exists with the given name</h3><p>This next piece was a bit trickier to figure out.
Once I enabled <code>$ENV:TF_LOG = 'TRACE'</code> I found some output showing an issue with the version of the provider.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">2020/07/14 16:12:51 [WARN] found legacy provider &#34;terraform-provider-artifactory&#34;
</span></span><span class="line"><span class="cl">plugin: artifactory (0.0.0)
</span></span><span class="line"><span class="cl">- Resolving &#34;artifactory&#34; provider (0.1)...
</span></span><span class="line"><span class="cl">- Checking for provider plugin on https://releases.hashicorp.com...
</span></span></code></pre></td></tr></table>
</div>
</div><p>I went back to the provider project and installed <a href="https://goreleaser.com/quick-start/" target="_blank" rel="noopener noreferrer">goreleaser</a> using: <code>brew install goreleaser/tap/goreleaser</code> which provided me the same tool to build the various packages for this provider.
Build the provider by running <code>goreleaser build --snapshot</code>.</p>
<p>After reviewing the help in more detail, the following CLI content conflicts with the main README.md, so I had to experiment with various output methods and finally&hellip; success! 🎉</p>
<p>The message did provide a warning: <code>found legacy provider &quot;terraform-provider-artifactory-v2.0.0&quot;</code>.</p>
<p>I tested and found it matched the local provider with <code>0.0.0</code> by running <code>terraform providers</code> and seeing the output:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">2020/07/14 16:49:52 [TRACE] Meta.Backend: backend *remote.Remote supports operations
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">└── provider.artifactory
</span></span></code></pre></td></tr></table>
</div>
</div><p>However, what to bundle correctly required simplifying the output to no nested directories.</p>
<p><figure><a class="lightgallery" href="/images/2020-07-14_16-56-17-terraform-plugin-output.png" title="What Actually Worked In Plugin Directory Was a simple flat directory" data-thumbnail="/images/2020-07-14_16-56-17-terraform-plugin-output.png" data-sub-html="<h2>What Actually Worked In Plugin Directory</h2><p>What Actually Worked In Plugin Directory Was a simple flat directory</p>">
        
    </a><figcaption class="image-caption">What Actually Worked In Plugin Directory</figcaption>
    </figure></p>
<p>The output of the bundle was successful with</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Fetching Terraform 0.12.28 core package...
</span></span><span class="line"><span class="cl">2020/07/14 16:54:34 [TRACE] HTTP client HEAD request to https://releases.hashicorp.com/terraform/0.12.28/terraform_0.12.28_linux_amd64.zip
</span></span><span class="line"><span class="cl">2020/07/14 16:54:35 [TRACE] HTTP client GET request to https://releases.hashicorp.com/terraform/0.12.28/terraform_0.12.28_linux_amd64.zip
</span></span><span class="line"><span class="cl">Fetching 3rd party plugins in directory: ./plugins
</span></span><span class="line"><span class="cl">2020/07/14 16:54:37 [DEBUG] checking for provider in &#34;./plugins&#34;
</span></span><span class="line"><span class="cl">2020/07/14 16:54:37 [WARN] found legacy provider &#34;terraform-provider-artifactory&#34;
</span></span><span class="line"><span class="cl">plugin: artifactory (0.0.0)
</span></span><span class="line"><span class="cl">- Resolving &#34;artifactory&#34; provider (0.0.0)...
</span></span><span class="line"><span class="cl">Creating terraform_0.12.28-bundle2020071421_linux_amd64.zip ...
</span></span><span class="line"><span class="cl">All done!
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="terraform-cloud-fails-with-terraformtfstate-detected" class="headerLink">
    <a href="#terraform-cloud-fails-with-terraformtfstate-detected" class="header-mark"></a>Terraform Cloud Fails with terraform.tfstate detected</h3><p>Since the local plugins seem to generate some tfstate for mapping the local plugin directory, I ensure you have a <code>.terraformignore</code> file in the root of your directory per the notes I provided at the beginning.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Terraform Enterprise detected a terraform.tfstate file in your working
</span></span><span class="line"><span class="cl">directory: &lt;VCS-REPO&gt;/terraform.tfstate
</span></span></code></pre></td></tr></table>
</div>
</div><p>Once I added the <code>.terraformignore</code> the apparent conflict with uploading a local tfstate on the plugins was resolved and the plan succeeded.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

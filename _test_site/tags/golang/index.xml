<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Golang - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/golang/</link>
        <description>Golang - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 24 Mar 2022 21:15:37 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/golang/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Using Randomization for Pulumi Kubernetes Resources
    </title>
    <link>
        https://www.sheldonhull.com/using-randomization-for-pulumi-kubernetes-resources/
    </link>
    <pubDate>
        Thu, 24 Mar 2022 21:15:37 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/using-randomization-for-pulumi-kubernetes-resources/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="logical-names" class="headerLink">
    <a href="#logical-names" class="header-mark"></a>Logical Names</h2><p>Pulumi requires unique logical names (URN) for tracking the state of resources.
I ran into an issue with this once I expanded to a multi-cluster deployment since Pulumi began erroring on the logical name not being unique.
Let&rsquo;s say you are defining a service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">corev1</span><span class="p">.</span><span class="nf">NewService</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;myservice&#34;</span><span class="p">,</span> <span class="c1">// ðŸ‘ˆðŸ‘ˆðŸ‘ˆðŸ‘ˆ this is the logical name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">ServiceArgs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ApiVersion</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;v1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Kind</span><span class="p">:</span>       <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;Service&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Metadata</span><span class="p">:</span>	<span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMetaArgs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Namespace</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">myNamespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Name</span><span class="p">:</span>      <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">myAppName</span><span class="p">),</span> <span class="c1">// ðŸ‘ˆðŸ‘ˆðŸ‘ˆðŸ‘ˆ This is the physical name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can normally omit the <code>Metadata.Name</code> and Pulumi will autogenerate this with a randomized suffix for you.
This allows a style of &ldquo;create before destroy&rdquo; deployments you don&rsquo;t get with native kubectl apply style commands.
Things get a little messy here as overriding the logical name requires a normal <code>String</code>.</p>
<p>To allow maximum uniqueness, you can concatenate values in the logical name so that it&rsquo;s unique as you desire, such as <code>resourcename + cluster</code> for example.</p>
<h2 id="using-random" class="headerLink">
    <a href="#using-random" class="header-mark"></a>Using Random</h2><p>Having used Terraform&rsquo;s random provider in the past, and found it incredibly helpful to stop relying on the uniqueness of names that I have to manage, I tried initially to do this with the Pulumi terraform version of random.
It didn&rsquo;t work out too well.
In the end, I realized this is where just having the power of the language itself makes perfect sense.
I had a pointer from someone in this <a href="https://github.com/pulumi/pulumi/discussions/9207#discussioncomment-2372172" target="_blank" rel="noopener noreferrer">github discussion</a> about using the <code>petname</code> package itself, but I didn&rsquo;t like that idea as it was a bit unwieldy and not designed for importing as a package.
Trying to use the resource results in a problem as <code>pulumi.StringOutput</code> can&rsquo;t be used with string concantenation.
Instead, you have to use the <code>ApplyT</code> and pass around the string output to other inputs accepting <code>pulumi.StringPtr</code> type.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">petname</span><span class="p">.</span><span class="nf">ID</span><span class="p">().</span><span class="nf">ApplyT</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">id</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nx">ID</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}).(</span><span class="nx">pulumi</span><span class="p">.</span><span class="nx">StringOutput</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This doesn&rsquo;t work because the output is still a <code>pulumi.StringOutput</code> and not a <code>string</code>.</p>
<p>This would work for things like the physical name, but you can&rsquo;t get the string output as it&rsquo;s to be considered like a &ldquo;promise&rdquo; and not resolved till the end of the plan.
Logical names require strings, not <code>pulumi.String</code>.</p>
<h2 id="go-makes-it-simple" class="headerLink">
    <a href="#go-makes-it-simple" class="header-mark"></a>Go Makes it Simple</h2><p>I did a little searching for correctly converting strings into int hashes, and with the volume of deployments, a collision risk is ridiculously low (something like 1 in 1 billion?).</p>
<p>Here&rsquo;s how I went about it.
You can adapt this for your Pulumi plan.
I went back to one of my favorites, <a href="https://github.com/brianvoe/gofakeit" target="_blank" rel="noopener noreferrer">gofakeit</a> which provides a fantastic package for generating data.
What&rsquo;s cool about this is that the generators offer a global <code>Seed</code> option so you can reliably regenerate the same random data.</p>
<h3 id="setup" class="headerLink">
    <a href="#setup" class="header-mark"></a>Setup</h3><p><a href="https://github.com/brianvoe" target="_blank" rel="noopener noreferrer">@brianvoe on github</a> did a great job with this <code>gofakeit</code> package.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go get <span class="s2">&#34;github.com/brianvoe/gofakeit/v6&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Add this to your imports</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/brianvoe/gofakeit/v6&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now for the hashing, I found a great MIT licensed library I grabbed two functions from here: <a href="https://github.com/shomali11/util/blob/master/xhashes/xhashes.go" target="_blank" rel="noopener noreferrer">util</a> by <a href="https://github.com/shomali11" target="_blank" rel="noopener noreferrer">@shomali11 on github</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// FNV64a hashes using fnv64a algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Sourced from: https://github.com/shomali11/util/blob/master/xhashes/xhashes.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">FNV64a</span><span class="p">(</span><span class="nx">text</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">algorithm</span> <span class="o">:=</span> <span class="nx">fnv</span><span class="p">.</span><span class="nf">New64a</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">uint64Hasher</span><span class="p">(</span><span class="nx">algorithm</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// uint64Hasher returns a uint64
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Sourced from: https://github.com/shomali11/util/blob/master/xhashes/xhashes.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">uint64Hasher</span><span class="p">(</span><span class="nx">algorithm</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">Hash64</span><span class="p">,</span> <span class="nx">text</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">algorithm</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">algorithm</span><span class="p">.</span><span class="nf">Sum64</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I set up a few methods on a configuration struct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Clusters returns a list of clusters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Clusters</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// setSeed sets the gofakeit global state to a specific
</span></span></span><span class="line"><span class="cl"><span class="c1">// seed value based on the string input.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">setSeed</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">calcSeed</span> <span class="o">:=</span> <span class="nf">FNV64a</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">v</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">calcSeed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// animalString returns a string formatted with `{DescriptiveAdjective}-{Animal}`.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">animalString</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">animal</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Animal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">adjective</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">AdjectiveDescriptive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">adjective</span><span class="p">,</span> <span class="nx">animal</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, once you load a configuration into the struct using the Pulumi configuration package, you can obtain a randomized petname on demand, that will be repeatable and only change if the cluster name is different.</p>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      If your uniqueness requirements change...
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">If your business requirements for uniqueness change, such as a combination of <code>resource+cluster</code> now needing to be deployed in duplication across another namespace (for example for provisioning development environments on demand)&hellip; you can just change the input seed from cluster to a combination of other values and you&rsquo;ll generate new unique seeds from there.</div>
    </div>
  </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// PetName returns a unique petname for logical resources to be uniquely named in the Pulumi state file.
</span></span></span><span class="line"><span class="cl"><span class="c1">// This is formatted as `adjective-animal`.
</span></span></span><span class="line"><span class="cl"><span class="c1">// For logical name purposes, use the PetNameSuffix method instead.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Clusters</span><span class="p">)</span> <span class="nf">PetName</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Calculate a seed value based on cluster name and then generate a random petname for the reosurces so that the logical names stay truly unique even in multi-cluster environments.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">setSeed</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">randomPet</span> <span class="o">:=</span> <span class="nf">animalString</span><span class="p">()</span> <span class="c1">// Random based on seed, so should be repeatable for different deploys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">randomPet</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// PetName returns a unique petname suffix for easy string concantenation for logical resources.
</span></span></span><span class="line"><span class="cl"><span class="c1">// This is formatted as `-adjective-animal` with a preceding.
</span></span></span><span class="line"><span class="cl"><span class="c1">// You&#39;d join like `_, err = appsv1.NewDeployment(ctx, &#34;myapp&#34; + config.PetNameSuffix(), nil)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Clusters</span><span class="p">)</span> <span class="nf">PetNameSuffix</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Calculate a seed value based on cluster name and then generate a random petname for the reosurces so that the logical names stay truly unique even in multi-cluster environments.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">setSeed</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s">&#34;-&#34;</span> <span class="o">+</span> <span class="nf">animalString</span><span class="p">()</span> <span class="c1">// Random based on seed, so should be repeatable for different deploys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="quick-and-dirty-option" class="headerLink">
    <a href="#quick-and-dirty-option" class="header-mark"></a>Quick and Dirty Option</h2><p>If you just want to do it all in <code>main()</code> and ignore the frowning of the &ldquo;best practice police&rdquo; just inline it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">calcSeed</span> <span class="o">:=</span> <span class="nf">FNV64a</span><span class="p">(</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">v</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">calcSeed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">animal</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Animal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">adjective</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">AdjectiveDescriptive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">randomPetCalc</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">adjective</span><span class="p">,</span> <span class="nx">animal</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Random Pet Calculated at Runtime: %s\n&#34;</span><span class="p">,</span> <span class="nx">randomPetCalc</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="using-in-loop" class="headerLink">
    <a href="#using-in-loop" class="header-mark"></a>Using in Loop</h2><p>Note that this would probably have issues if you were trying to update the seed in goroutines as I believe it&rsquo;s a global variable.
However, it works great when you need to do something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cluster</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">clusterList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">suffix</span> <span class="o">:=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">PetNameSuffix</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">ingress</span><span class="p">.</span><span class="nf">NetworkingIngress</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">suffix</span><span class="p">)</span> <span class="c1">// ... etc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap-Up</h2><p>I got here thanks to the help of folks in the Pulumi slack + Github discussions.
I&rsquo;ve found it&rsquo;s a common question.
I recommended they beef up some good examples of using the random provider like this.
However, I&rsquo;m not certain it fits Pulumi&rsquo;s &ldquo;promise&rdquo; model quite the same as it was with Terraform.
I&rsquo;m not versed enough in the architecture to understand why it worked for Terraform but not with Pulumi, but this &ldquo;workaround&rdquo; using normal Go code seems to work fine.
I&rsquo;m really appreciating the value of having access to a full fledged programming language in my infrastructure work, including Kubernetes, even if this entails a little more complexity up front.</p>
<h2 id="further-reading" class="headerLink">
    <a href="#further-reading" class="header-mark"></a>Further Reading</h2><ul>
<li><a href="https://github.com/pulumi/pulumi/discussions/9207" target="_blank" rel="noopener noreferrer">Using random resource in plans with Go? Â· Discussion #9207 Â· pulumi/pulumi Â· GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/discussions/9205" target="_blank" rel="noopener noreferrer">How do you approach passing around ID&rsquo;s for resources without it becoming a hot mess? Â· Discussion #9205 Â· pulumi/pulumi Â· GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/discussions/9216" target="_blank" rel="noopener noreferrer">Unique ComponentResource Names With Random Suffix Â· Discussion #9216 Â· pulumi/pulumi Â· GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/discussions/9250" target="_blank" rel="noopener noreferrer">Using ComponentResource as logical namespace Â· Discussion #9250 Â· pulumi/pulumi Â· GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/issues/5234#issuecomment-697966379" target="_blank" rel="noopener noreferrer">Cannot use Output as logical resource name Â· Issue #5234 Â· pulumi/pulumi Â· GitHub</a></li>
<li><a href="https://www.pulumi.com/docs/intro/concepts/inputs-outputs/" target="_blank" rel="noopener noreferrer">Inputs and Outputs | Pulumi Docs</a></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 86 - Wrap Up!
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-86/
    </link>
    <pubDate>
        Fri, 10 Dec 2021 19:57:29 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-86/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="finished" class="headerLink">
    <a href="#finished" class="header-mark"></a>Finished!</h2><p>Done!
I&rsquo;ve pretty much done above and beyond 100 days, but finding the blogging format to take a lot more effort to keep up when I&rsquo;m doing a mix of puzzles, courses, and work.</p>
<p>Since my full-time job has Go development as a part of it now, I&rsquo;ve exceeded this and going to track any future training goals in a lower overhead way, such as GitHub issues or such.</p>
<h2 id="was-it-worth-it" class="headerLink">
    <a href="#was-it-worth-it" class="header-mark"></a>Was It Worth It?</h2><p>Yes, it was worth it.
It helped me break down a large amount of learning back into a daily rythm of dedicated study.
For me, doing full time development, I found it was hard since I do code a big chunk of the day to document all the time.</p>
<h2 id="what-would-i-do-differently" class="headerLink">
    <a href="#what-would-i-do-differently" class="header-mark"></a>What would I do differently?</h2><p>Probably would minimize the effort of documenting the process itself.
While it&rsquo;s great to save notes and articulate things, I feel either saving the notes as part of the git log or algorithm style repo would be less trouble.
Also, some of the work is in various platforms like Leetcode, which aren&rsquo;t easy to straight extract.
Reduce the overhead and focus on documenting core principles or concepts that would be useful in a wiki style format, but not log as much.</p>
<p>Using Github Issues might work really well too, because you could post them to a log later in bulk, but otherwise the cli driven creation and kanban board approach would minimize the overhead.
That would be cool too cause you could have bots run todos, stale items, and other cool things for you.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Setup Sourcegraph Locally
    </title>
    <link>
        https://www.sheldonhull.com/setup-sourcegraph-locally/
    </link>
    <pubDate>
        Thu, 02 Dec 2021 22:48:45 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/setup-sourcegraph-locally/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>I went through the Sourcegraph directions, but had a few challenges due to the majority of code being behind SSH access with Azure DevOps.</p>
<p>Finally figured out how to do this, with multiple repos in one command and no need to embed a token using https.</p>
<p>Navigate to: <a href="http://localhost:7080/site-admin/repositories" target="_blank" rel="noopener noreferrer">manage-repos</a> and use this.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
Better yet, use <a href="https://docs.sourcegraph.com/admin/config/advanced_config_file" target="_blank" rel="noopener noreferrer">Loading configuration via the file system (declarative config) - Sourcegraph docs</a> and persist locally in case you want to upgrade or rebuild the container.</p>
<pre><code>{
  &quot;url&quot;: &quot;ssh://git@ssh.dev.azure.com&quot;,
  &quot;repos&quot;: [
    &quot;v3/{MYORG}/{PROJECT_NAME}/{REPO}&quot;,
    &quot;v3/{MYORG}/{PROJECT_NAME}/{REPO}&quot;
  ]

}
</code></pre>
<p>For the json based storage try:</p>
<pre><code>  {
      &quot;GITHUB&quot;: [],
      &quot;OTHER&quot;: [
          {
              &quot;url&quot;: &quot;ssh://git@ssh.dev.azure.com&quot;,
              &quot;repos&quot;: [
                &quot;v3/{MYORG}/{PROJECT_NAME}/{REPO}&quot;,
                &quot;v3/{MYORG}/{PROJECT_NAME}/{REPO}&quot;
              ]
          }
      ],
      &quot;PHABRICATOR&quot;: []
  }
</code></pre>
<p>To ensure SSH tokens are mounted, you need to follow-up the directions here: <a href="https://docs.sourcegraph.com/admin/install/docker/operations#ssh-authentication-config-keys-known-hosts" target="_blank" rel="noopener noreferrer">SSH Access for Sourcegraph</a></p>
<pre><code>cp -R $HOME/.ssh $HOME/.sourcegraph/config/ssh
docker run -d \
  -e DISABLE_OBSERVABILITY=true \
  -e EXTSVC_CONFIG_FILE=/etc/sourcegraph/extsvc.json \
  --publish 7080:7080 \
  --publish 127.0.0.1:3370:3370 \
  --volume $HOME/.sourcegraph/extsvc.json:/etc/sourcegraph/extsvc.json:delegated \
  --volume $HOME/.sourcegraph/config:/etc/sourcegraph:delegated \
  --volume $HOME/.sourcegraph/data:/var/opt/sourcegraph:delegated \
  sourcegraph/server:3.34.1
</code></pre>
<p><figure><a class="lightgallery" href="/images/2021-12-02-16.53.00-cloned-repos.png" title="cloned-repos" data-thumbnail="/images/2021-12-02-16.53.00-cloned-repos.png" data-sub-html="<h2>cloned repos</h2><p>cloned-repos</p>">
        
    </a><figcaption class="image-caption">cloned repos</figcaption>
    </figure></p>
<h2 id="lsif-for-go" class="headerLink">
    <a href="#lsif-for-go" class="header-mark"></a>LSIF For Go</h2><p>I didn&rsquo;t get this to work yet with my internal repos, but it&rsquo;s worth pinning as Go module documentation for API docs can be generated for review as well.
Change <code>darwin</code> to <code>linux</code> to use the linux version.</p>
<pre><code>go install github.com/sourcegraph/lsif-go/cmd/lsif-go@latest
sudo curl -L https://sourcegraph.com/.api/src-cli/src_darwin_amd64 -o /usr/local/bin/sourcegraph
sudo chmod +x /usr/local/bin/sourcegraph
</code></pre>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Docker
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><pre><code>docker pull sourcegraph/lsif-go:v1.2.0
</code></pre>
</div>
    </div>
  </div>
<p>Now index code in repo</p>
<pre><code>lsif-go
sourcegraph_host=http://127.0.0.1:7080
sourcegraph -endpoint=$sourcegraph_host lsif upload
</code></pre>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I removed <code>--rm</code> from the tutorial.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 85
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-85/
    </link>
    <pubDate>
        Thu, 18 Nov 2021 03:00:32 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-85/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><p>ðŸŽ‰Finished Ultimate Syntax course.</p>
<p>Worked on Enumerators concept using <code>iota</code>.</p>
<p>I still find this very confusing in general.</p>
<p>Here&rsquo;s the gist I created.</p>
<script src="https://gist.github.com/sheldonhull/39a05ac30c1dc4eb740f1a74761c9eae.js"></script>


        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 84
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-84/
    </link>
    <pubDate>
        Tue, 16 Nov 2021 00:58:38 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-84/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><p>Ultimate Syntax (Ardan Labs - Bill Kennedy) and went back through various topics such as:</p>
<ul>
<li>Pointers: One thing mentioned that resonated with me was the confusion regarding pointers in parameter declarations.
I also find the usage strange that the deference operator is used to denote a pointer value being dereferences in the parameter.
I&rsquo;d expect a pointer value to pass clearly with <code>func (mypointer &amp;int)</code> and not <code>func (mypointer int)</code> with a pointer call.</li>
<li>Literal Structs: Great points on avoiding &ldquo;type exhaustion&rdquo; by using literal structs whenever the struct is not reused in multiple locations.</li>
<li>Constants: Knowing that there is a parallel typing system for constants with &ldquo;kind&rdquo; vs &ldquo;type&rdquo; being significant helped me wrap my head around why constants often don&rsquo;t have explicit type definitions in their declaration.</li>
</ul>
<h3 id="iota" class="headerLink">
    <a href="#iota" class="header-mark"></a>Iota</h3><p>This is one of the most confusing types I&rsquo;ve used.</p>
<ul>
<li>Iota only works in a block declaration.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">a</span> <span class="p">=</span> <span class="kc">iota</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1">// Starts at 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">b</span>             <span class="c1">// Starts at 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">c</span>             <span class="c1">// Starts at 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Also showed using <code>&lt;&lt; iota</code> to do bit shifting.
This is common in log packages (I&rsquo;ll have to look in the future, as bit shifting is something I&rsquo;ve never really done).</p>
<p>Become of kind system, you can&rsquo;t really make enumerators with constants.</p>
<h2 id="best-practices" class="headerLink">
    <a href="#best-practices" class="header-mark"></a>Best Practices</h2><p>Don&rsquo;t use aliases for types like <code>type handle int</code> in an effort.
While it seems promising, it doesn&rsquo;t offer the protection thought, because of &ldquo;kind&rdquo; protection.</p>
<p>This is because &ldquo;kind promotion&rdquo;, it destroys the ability to truly have enumerations in Go by aliasing types.</p>
<p>I&rsquo;ve seen <code>stringer</code> used in some articles as well, but not certain yet if it&rsquo;s considered idiomatic to approach enum like generation this way.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 83
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-83/
    </link>
    <pubDate>
        Mon, 15 Nov 2021 00:55:59 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-83/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><p>Revisited Ultimate Syntax (Ardan Labs - Bill Kennedy) and went back through various topics such as:</p>
<ul>
<li>Variables: When to use var vs walrus operator for readability and zero value initialization.</li>
<li>Type Conversions: How identical named types aren&rsquo;t the same in Go&rsquo;s eyes when named.</li>
<li>Pointers: General overview. Mostly stuff I knew, but good basic overview again.</li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 82
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-82/
    </link>
    <pubDate>
        Fri, 12 Nov 2021 03:56:26 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-82/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><ul>
<li>A few small things like Binary search.</li>
<li>More listening on hexagonal architecture design.</li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 81
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-81/
    </link>
    <pubDate>
        Thu, 11 Nov 2021 04:52:11 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-81/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><ul>
<li>Simple string parsing, using replaceall, regexp, and more</li>
<li>Listened to a talk on Hexagonal Architecture, which really helped answer some package questions I&rsquo;d unclear on.</li>
</ul>
<h2 id="links" class="headerLink">
    <a href="#links" class="header-mark"></a>links</h2><ul>
<li><a href="https://exercism.org/tracks/go/exercises/welcome-to-tech-palace/solutions/sheldonhull" target="_blank" rel="noopener noreferrer">Exercism - Tech Palace</a></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Keyboard Remapping in Goland
    </title>
    <link>
        https://www.sheldonhull.com/keyboard-remapping-in-goland/
    </link>
    <pubDate>
        Thu, 04 Nov 2021 17:30:31 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/keyboard-remapping-in-goland/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>This is a continuation of my evaluation using Goland.</p>
<p>I tend to be a VSCode user primarily, but am working on adopting Goland incrementally to leverage some of it&rsquo;s features that work a bit more consistently (like refactoring).</p>
<p>Losing keyboard shortcuts is painful.</p>
<p>VSCode lets you assign keyboard shortcuts in command pallette by clicking on the gear icon in the command you hover over.
For a while I couldn&rsquo;t find this in Goland.
I see now I can assign any action defined from the quick open menu by pressing <code>Cmd+.</code>.</p>
<p>This should expedite keyboard shortcut customization to align to my muscle memory a bit easier.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Go R1 Day 80
    </title>
    <link>
        https://www.sheldonhull.com/go-r1-day-80/
    </link>
    <pubDate>
        Mon, 01 Nov 2021 21:54:50 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-r1-day-80/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="progress" class="headerLink">
    <a href="#progress" class="header-mark"></a>progress</h2><p>Built a Mage task to handle creation of Azure DevOps pull requests.
Since the tooling out there is primarily around Github, this was useful to help standardize PR creation with autocomplete, conventional commit naming, and other properties that typically require manual changes.
I found a great little TUI components library that simplified using Bubbletea components: <a href="https://github.com/erikgeiser/promptkit" target="_blank" rel="noopener noreferrer">Promptkit</a>.</p>
<p>In addition, noticed some new linting help from golangci-lint for <code>varnamelen</code>.</p>
<p>This was useful as it analyzes the brevity of variable names and if the variable name is too short, say 1-3 characters, but the usage extends 20 lines away, it will flag it.
This is good as short variable names are designed for local context, while longer descriptive names provide better readability further away in the code.</p>
<p><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html#_identifier_length" target="_blank" rel="noopener noreferrer">Practical Go: Real world advice for writing maintainable Go programs - Identifier Length</a></p>
<p>Golangci-lint tool includes this linter: <a href="https://github.com/blizzy78/varnamelen" target="_blank" rel="noopener noreferrer">Varnamelen</a></p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

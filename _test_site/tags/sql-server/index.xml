<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Sql-Server - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/sql-server/</link>
        <description>Sql-Server - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 24 Jun 2021 12:26:52 -0500</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/sql-server/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Understanding The Basics of SQL Server Security
    </title>
    <link>
        https://www.sheldonhull.com/understanding-the-basics-of-sql-server-security/
    </link>
    <pubDate>
        Thu, 24 Jun 2021 12:26:52 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/understanding-the-basics-of-sql-server-security/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="confusing" class="headerLink">
    <a href="#confusing" class="header-mark"></a>Confusing</h2><p>As I&rsquo;ve worked with folks using other database engines, I&rsquo;ve realized that Microsoft SQL Server has some terminology and handling that is a bit confusing.
Here&rsquo;s my attempt to clarify the basics for myself and others needing a quick overview.
This is not comprehensive coverage of security architecture, which is a very complex topic, more just terminology.</p>
<h2 id="terminology" class="headerLink">
    <a href="#terminology" class="header-mark"></a>Terminology</h2><p>Note that it&rsquo;s best to consider SQL Server as it&rsquo;s own operating system, not just a standard application running.
It has its own memory manage, cpu optimization, user security model, and more.
It&rsquo;s helpful in understanding why a <code>Server Login != Instance Login</code> by reviewing common terminology.
I&rsquo;ve noticed that among other open-source tools like MySQL, it&rsquo;s much more common to hear terms like &ldquo;Database Server&rdquo;, which in my mind mix up for non-dbas the actual scope being talked about.</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Definition</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server</td>
<td>The operating system</td>
</tr>
<tr>
<td>Instance</td>
<td>The SQL Server Instance that can contain 1 or many databases</td>
</tr>
<tr>
<td>Database</td>
<td>The database inside the instance.</td>
</tr>
</tbody>
</table>
<p>This can be 1 or many.</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Definition</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server Login</td>
<td>Windows or Linux user at the Operating System level</td>
</tr>
<tr>
<td>SQL Login</td>
<td>Login created inside SQL Server, using SQL statement. This is internal to SQL Server and not part of the Server OS.</td>
</tr>
<tr>
<td>Database User</td>
<td>A database user is created and linked to the Instance SQL Login</td>
</tr>
<tr>
<td>Server Role</td>
<td>Roles for Instance level permissions, such <code>sysadmin (sa)</code>, <code>SecurityAdmin</code>, and others. These do not grant database-level permissions, other than <code>sa</code> having global rights.</td>
</tr>
<tr>
<td>Database Role</td>
<td>A defined role that grants read, write, or other permissions inside the database.</td>
</tr>
</tbody>
</table>
<p>Here&rsquo;s a quick visual I threw together to reinforce the concept.</p>
<p>Yes, I&rsquo;m a talented comic artist and take commissions.
😀</p>
<p><figure><a class="lightgallery" href="/images/2021-06-25-1658-sql-login-database-architecture-dark.png" title="sql-login-database-architecture" data-thumbnail="/images/2021-06-25-1658-sql-login-database-architecture-dark.png" data-sub-html="<h2>Visualize SQL Security 101</h2><p>sql-login-database-architecture</p>">
        
    </a><figcaption class="image-caption">Visualize SQL Security 101</figcaption>
    </figure></p>
<h2 id="best-practice" class="headerLink">
    <a href="#best-practice" class="header-mark"></a>Best Practice</h2><p>When managing user permissions at a database level, it&rsquo;s best to leverage Active Directory (AD) groups.
Once this is done, you&rsquo;d create roles.
The members of those roles would be the AD Groups.</p>
<h2 id="no-active-directory" class="headerLink">
    <a href="#no-active-directory" class="header-mark"></a>No Active Directory</h2><p>SQL Logins and corresponding database users must be created if active directory groups aren&rsquo;t being used.</p>
<h2 id="survey-said" class="headerLink">
    <a href="#survey-said" class="header-mark"></a>Survey Said</h2><p>I did a quick Twitter survey and validated that Active Directory Groups are definitely the most common way to manage.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">As a SQL Server dba, how do you grant access to less privileged devs, including production?
<br><br>I&#39;m curious.
I&#39;ve been part of both AD managed environments and ones where I did everything with SQL Login auth.
<a href="https://twitter.com/hashtag/sqlfamily?src=hash&amp;ref_src=twsrc%5Etfw">#sqlfamily</a>
<a href="https://twitter.com/hashtag/sqlserver?src=hash&amp;ref_src=twsrc%5Etfw">#sqlserver</a>
<a href="https://twitter.com/hashtag/mssql?src=hash&amp;ref_src=twsrc%5Etfw">#mssql</a>
</p>&mdash; Sheldon Hull (@sheldon_hull)
<a href="https://twitter.com/sheldon_hull/status/1408118509104676869?ref_src=twsrc%5Etfw">June 24, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

        ]]>
    </description>
</item>


<item>
    <title>
        SQL Server Meets AWS Systems Manager
    </title>
    <link>
        https://www.sheldonhull.com/sql-server-meets-aws-systems-manager/
    </link>
    <pubDate>
        Wed, 16 Dec 2020 00:06:20 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/sql-server-meets-aws-systems-manager/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Excited. Have a new solution in the works to deploy Ola Hallengren via SSM Automation runbook across all SQL Server instances with full scheduling and synchronization to S3. Hoping to get the ok to publish this soon, as I haven&rsquo;t seen anything like this built.</p>
<p>Includes:</p>
<ul>
<li>Building SSM Automation YAML doc from a PS1 file using AST &amp; metadata</li>
<li>Download dependencies from s3 automatically</li>
<li>Credentials pulled automatically via AWS Parameter Store (could be adapted to Secrets Manager as well)</li>
<li>Leverage <a href="https://github.com/peak/s5cmd" target="_blank" rel="noopener noreferrer">s5cmd</a> for roughly 40x faster sync performance with no <code>aws-cli</code> required. It&rsquo;s a Go executable. #ilovegolang</li>
<li>Deployment of a job that automates flipping instances to <code>FULL</code> or <code>SIMPLE</code> recovery similar to how RDS does this, for those cases where you can&rsquo;t control the creation scripts and want to flip SIMPLE to full for immediate backups.</li>
<li>Formatted deployment summary card sent with all properties to Microsoft Teams. #imissslack</li>
<li>Management of these docs via terraform.</li>
<li>Snippet for the setup of an S3 lifecycle policy automatically cleanup old backups. (prefer terraform, but this is still good to know for retro-active fixes)</li>
</ul>
<p>I&rsquo;m pretty proud of this being done, as it is replacing Cloudberry, which has a lot of trouble at scale in my experience. I&rsquo;ve seen a lot of issues with Cloudberry when dealing with 1000-3000 databases on a server.</p>
<p>Once I get things running, I&rsquo;ll see if I can get this shared in full since it&rsquo;s dbatools + Ola Hallengren Backup Solution driven.</p>
<p>Also plan on adding a few things like on failure send a PagerDuty incident and other little enhancements to possible enable better response handling.</p>
<h2 id="other-resources" class="headerLink">
    <a href="#other-resources" class="header-mark"></a>Other Resources</h2><ul>
<li><a href="https://dbatools.io/" target="_blank" rel="noopener noreferrer">dbatools</a></li>
<li><a href="https://ola.hallengren.com/sql-server-backup.html" target="_blank" rel="noopener noreferrer">Ola Hallengren</a></li>
<li><a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-documents.html" target="_blank" rel="noopener noreferrer">AWS Docs on Automation Runbooks</a></li>
<li><a href="https://github.com/peak/s5cmd" target="_blank" rel="noopener noreferrer">s5cmd</a></li>
<li><a href="https://github.com/aws-quickstart/quickstart-microsoft-sql" target="_blank" rel="noopener noreferrer">AWS Quick Start for Microsoft SQL Server</a></li>
</ul>

        ]]>
    </description>
</item>


<item>
    <title>
        Azure Data Studio SQL Notebook for Diagnostic Queries
    </title>
    <link>
        https://www.sheldonhull.com/azure-data-studio-sql-notebook-for-diagnostic-queries/
    </link>
    <pubDate>
        Wed, 24 Jun 2020 11:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/azure-data-studio-sql-notebook-for-diagnostic-queries/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="diagnostic-queries" class="headerLink">
    <a href="#diagnostic-queries" class="header-mark"></a>Diagnostic Queries</h2><p>Glenn Berry has long been known for producing the definitive diagnostic query set for various SQL Server versions. Between his amazing work and my favorite Brent Ozar First Responder Kit, you are pretty much set.</p>
<p>One of the things that can be painful though about running diagnostic queries is that it&rsquo;s a lot of small individual queries that you want to run and ideally save the results for review.</p>
<p>You can do this with dbatools and running queries individually, which is actually what I did a while back for a special support tool that dynamically split those queries into files and exported to xml for later import and review.</p>
<h2 id="azure-data-studio" class="headerLink">
    <a href="#azure-data-studio" class="header-mark"></a>Azure Data Studio</h2><p>I&rsquo;m a big fan of Azure Data Studio and as I&rsquo;m not primarily focused right now on SQL Server administration, the feature-set perfectly fits my needs for running queries, doing some basic server administration, and overall just having a lighter weight solution to SSMS. Since I migrated to macOS, this provides me a nice cross-platform tool that I can use on Windows or macOS.</p>
<p>A great feature that has been continually improving is the Azure Data Studio notebooks. Not only can you run T-SQL notebooks now, but also PowerShell and python using whatever kernel you desire.</p>
<p>As part of this, you get the benefits of a nice intuitive structure to ad-hoc queries you might want to provide to someone with details on what it means and more. Additionally, the results are cached as part of the JSON so if you save the file and come back later you can review all the results that were pulled (and as a plus they render in GitHub viewer too).</p>
<h2 id="diagnostic-queries--azure-data-studio--dbatools--" class="headerLink">
    <a href="#diagnostic-queries--azure-data-studio--dbatools--" class="header-mark"></a>Diagnostic Queries + Azure Data Studio + dbatools = 🎉</h2><p>To merge the power of all 3 technologies, you can use dbatools to export the diagnostic queries for a targeted SQL server version as an Azure Data Studio Notebook. Pretty freaking cool.</p>
<p>To get started on this just make sure you have the latest dbatools: <code>Install-Module dbatools -confirm:$false</code></p>
<p>Then generate a new Azure Data Studio Notebook like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># This will create the notebook in whatever location you currently are in</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Version</span> <span class="p">=</span> <span class="mf">2017</span>
</span></span><span class="line"><span class="cl"><span class="nb">New-DbaDiagnosticAdsNotebook</span> <span class="n">-Path</span> <span class="s2">&#34;DiagnosticNotebook</span><span class="nv">${Version}</span><span class="s2">.ipynb&#34;</span> <span class="n">-TargetVersion</span> <span class="nv">$Version</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Open up this new notebook and enjoy the result! To make reading easier, you can issue the command to &ldquo;collapse all cells&rdquo; and the queries will be minimized allowing you to read through all the query options.</p>
<p>Note that even the description of the queries is provided in the notebook, providing insight on the purpose of the query.</p>
<div
    class="details admonition warning
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-exclamation-triangle fa-fw"
      ></i>
      Warning
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">As always, make sure you are careful before just running all queries by default against a production server.
Some queries take heavy resources and might not be appropriate to run in the middle of a production workflow.</div>
    </div>
  </div>
<p><figure><a class="lightgallery" href="/images/2020-06-23_13-23-07_azure_data_studio.png" title="Shows the diagnostic query view in Azure Data Studio" data-thumbnail="/images/2020-06-23_13-23-07_azure_data_studio.png" data-sub-html="<h2>Azure Data Studio Diagnostic Queries</h2><p>Shows the diagnostic query view in Azure Data Studio</p>">
        
    </a><figcaption class="image-caption">Azure Data Studio Diagnostic Queries</figcaption>
    </figure></p>

        ]]>
    </description>
</item>


<item>
    <title>
        2020-06-04T22:15:21&#43;00:00
    </title>
    <link>
        https://www.sheldonhull.com/2020-06-04t221521-0000/
    </link>
    <pubDate>
        Thu, 04 Jun 2020 22:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/2020-06-04t221521-0000/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <ul>
<li>add dev container configuration for Go project in Visual Studio code</li>
<li>Added docker compose file</li>
<li>Add SQL Server to compose as another service.</li>
<li><code>docker-compose up -d</code></li>
<li>Attach to running container in VSCode</li>
<li>Magic ⚡</li>
</ul>
<p>Now I can open Visual Studio Code and run a go project against SQL Server, and tear it all down as I want. Gonna definitely blog on this, as it&rsquo;s super cool to see this work so well.</p>
<p>While Docker has a steep learning curve, being able to have a full clean dev test environment with SQL Server in a local container and another Ubuntu container to run Go projects in absolutely amazing, not to mention working &ldquo;inside it&rdquo; with Remote Workspaces extension from Microsoft.</p>

        ]]>
    </description>
</item>


<item>
    <title>
        2020-05-07T22:54:34&#43;00:00
    </title>
    <link>
        https://www.sheldonhull.com/2020-05-07t225434-0000/
    </link>
    <pubDate>
        Thu, 07 May 2020 22:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/2020-05-07t225434-0000/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Kept getting an error <code>Incorrect syntax near the keyword 'read'</code> when running the some updated PowerShell 7 in lambda with the <code>dotnet3.1</code> sdk. Was troubleshooting loading types thinking I was having path issues.</p>
<p>Turns out one of these things is not like the other. 🤣</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">set</span><span class="w"> </span><span class="n">nocount</span><span class="w"> </span><span class="k">on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">transaction</span><span class="w"> </span><span class="k">isolation</span><span class="w"> </span><span class="k">read</span><span class="w"> </span><span class="k">uncommitted</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">set</span><span class="w"> </span><span class="n">nocount</span><span class="w"> </span><span class="k">on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">transaction</span><span class="w"> </span><span class="k">isolation</span><span class="w"> </span><span class="k">level</span><span class="w"> </span><span class="k">read</span><span class="w"> </span><span class="k">uncommitted</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>I think this explains why &ldquo;error during &ldquo;read&rdquo;.
Maybe I should have run in my Azure Data Studio session before trying serverless 😀</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Running SQL Server in Docker
    </title>
    <link>
        https://www.sheldonhull.com/running-sql-server-in-docker/
    </link>
    <pubDate>
        Thu, 16 Jan 2020 13:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/running-sql-server-in-docker/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Updated 2020-05-05
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>I&rsquo;ve had lots of challenges in getting docker for sql-server working because I&rsquo;ve wanted to ensure for my dev use case that there was no need for virtual volume management and copying files into and out of this. Instead, I&rsquo;ve wanted to bind to local windows paths and have it drop all the mdf/ldf right there, so even on container destruction everything is good to go.</p>
<p>After working through the changes in SQL 2019 that require running as non-root, I&rsquo;ve gotten it work again. No install of sql-server needed. Easy disposable development instance through docker! I&rsquo;ll update my docker compose content when I can, but in the meantime, this should get you running even more quickly with SQL Server 2019.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">run</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span><span class="n">-name</span> <span class="n">SQL19</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-p</span> <span class="mf">1433</span><span class="err">:</span><span class="mf">1433</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-e</span> <span class="s2">&#34;ACCEPT_EULA=Y&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-e</span> <span class="s2">&#34;MSSQL_SA_PASSWORD=ThisIsNotARealPassword@!1}&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="n">C:</span><span class="p">\</span><span class="n">mssql</span><span class="p">\</span><span class="n">SQL19</span><span class="err">:</span><span class="p">/</span><span class="n">sql</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-d</span> <span class="n">mcr</span><span class="p">.</span><span class="py">microsoft</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">mssql</span><span class="p">/</span><span class="n">server</span><span class="err">:</span><span class="mf">2019</span><span class="n">-latest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">run</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="p">-</span><span class="n">-name</span> <span class="n">SQL19WithSpaces</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-p</span> <span class="mf">1434</span><span class="err">:</span><span class="mf">1433</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-e</span> <span class="s2">&#34;ACCEPT_EULA=Y&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-e</span> <span class="s2">&#34;MSSQL_SA_PASSWORD=ThisIsNotARealPassword@!1}&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="n">C:</span><span class="p">\</span><span class="n">mssql</span><span class="p">\</span><span class="n">SQL19WithSpaces</span><span class="err">:</span><span class="p">/</span><span class="n">sql</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-d</span> <span class="n">mcr</span><span class="p">.</span><span class="py">microsoft</span><span class="p">.</span><span class="n">com</span><span class="p">/</span><span class="n">mssql</span><span class="p">/</span><span class="n">server</span><span class="err">:</span><span class="mf">2019</span><span class="n">-latest</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<h2 id="why-use-docker-for-mssql" class="headerLink">
    <a href="#why-use-docker-for-mssql" class="header-mark"></a>Why Use Docker for MSSQL</h2><p>Say you have an onboarding and need to get a new developer up to speed. Have you gone through the setup process for SQL Server on Windows? It&rsquo;s a bit tedious and even with running scripts to install (or in my case I wrapped up with Chocolatey), it&rsquo;s still a lot of things you need, including possibly a reboot if missing some .net dependencies.</p>
<p>The normal solution is to leverage more localdb for quickly deploying and isolating the database.</p>
<p>This has its own set of challenges that personally I like to avoid. Localdb is more isolated, but it&rsquo;s not truly like running a local SQL Server standard edition, and debugging permissions, sharing, and other things can with its own set of steps to work through. I&rsquo;ve seen it common for many devs to just avoid these issues and run a local SQL Server installation to just simplify and work with SQL Server as it&rsquo;s expected to be.</p>
<p>I&rsquo;d explored Docker SQL Server containers in the past, but one big issue for adoption to me was the issues I had mounting the local Windows folders to the Linux based container. ❓ Why is this important? Ease of usage for a developer. If I proposed this would save effort to many developers working with SQL Server, I&rsquo;m pretty sure telling them that they&rsquo;d have to copy a backup or database file in via CLI to a virtual mounted drive that they can&rsquo;t easily manage would be a deal-breaker. I basically wanted to ensure if they spun up SQL Server in a container, the database backups, mdf and ldf files, and any other created files would be able to persist outside of that instance, ensuring easy development workflow.</p>
<p>I&rsquo;m happy to say I finally have it working to my satisfaction, resolving most of those concerns.</p>
<h2 id="scenarios-this-is-good-for" class="headerLink">
    <a href="#scenarios-this-is-good-for" class="header-mark"></a>Scenarios This is Good For</h2><p>If you&rsquo;ve desired to do the following, then using Docker might end up saving you some effort.</p>
<ul>
<li>simplify the setup of a new SQL Server instance</li>
<li>be able to reset your SQL Server instance to allow testing some setup in isolation</li>
<li>be able to switch SQL Server editions to match a new requirement</li>
<li>be able to upgrade or patch to a later version of SQL Server with minimal effort</li>
</ul>
<p>This is not for production. There&rsquo;s more effort and debate that goes on to using SQL Server in containers, Kubernetes (even more complex!), and other containerization approaches that are far outside the scope of what I&rsquo;m looking at. This is first and foremost focused on ensuring a development workflow that reduces complexity for a developer and increases the ease at which SQL Server testing can be implemented by making the SQL Server instance easily disposed of and recreated.</p>
<p>If this also means I spread some 🐧 Linux magic to some Windows stack developers&hellip; then count it as a sneaky win. 😏</p>
<h2 id="sql-server-on-linux-or-windows-containers" class="headerLink">
    <a href="#sql-server-on-linux-or-windows-containers" class="header-mark"></a>SQL Server on Linux or Windows containers</h2><p>The following example is done with SQL Server on Linux. As I&rsquo;m already comfortable with SQL Server on Windows, I wanted to be try this on Linux based container. I also wanted to continue using Linux based containers for tooling, and not have to switch back to Windows containers for the sole purpose of running SQL Server. At the time I began this testing, I found it was exclusive. You either ran Linux or Windows-based containers. This is changing with the advent of new features in Docker that are there to allow side by side Windows + Linux based containers.</p>
<p>Release notes indicate:</p>
<blockquote>
<p>Experimental feature: LCOW containers can now be run next to Windows containers (on Windows RS3 build 16299 and later). Use &ndash;platform=linux in Windows container mode to run Linux Containers On Windows. Note that LCOW is experimental; it requires the daemon experimental option. <a href="https://docs.docker.com/docker-for-windows/release-notes/" target="_blank" rel="noopener noreferrer">Docker Community Edition 18.03.0-ce-win59 2018-03-26</a></p>
</blockquote>
<p>The main difference in your local development process will be Windows Authentication vs SQL Authentication. Use SQL Authentication with Linux based SQL Server</p>
<h2 id="docker-compose-example" class="headerLink">
    <a href="#docker-compose-example" class="header-mark"></a>Docker Compose Example</h2><p>The following is the result of a lot of trial and error over a year. Thanks to <a href="https://wsmelton.github.io/" target="_blank" rel="noopener noreferrer">Shawn Melton</a> 👏 also for providing me with support doing my troubleshooting as part of the SQL Server community in Slack. You can find Shawn&rsquo;s example I used as a starting point for my 🧪testing in <a href="https://gist.github.com/wsmelton/7cce0f6930bb3e60c2dfacc7cf174ccf" target="_blank" rel="noopener noreferrer">this gist.</a></p>
<p>A few helpful tips:</p>
<ol>
<li>Remove <code>-d</code> for detached and you can see the SQL Server console output in the console.</li>
<li>See the persisted databases (system and user!) in the artifacts directory after docker-compose begins running.</li>
</ol>
<script src="https://gist.github.com/sheldonhull/a70a3a731b329b67f47a331c64c72ab5.js"></script>

<h2 id="improving-code-tests" class="headerLink">
    <a href="#improving-code-tests" class="header-mark"></a>Improving Code Tests</h2><p>Another reason I&rsquo;m really excited about is the ability to better support testing through tools like Pester. Yes, it&rsquo;s a geek thing, but I love a solid written test 🧪that maintains my code and helps me ensure quality with changes. Better TDD is a goal of mine for sure.</p>
<p>🔨 This supports implementation of better tests by providing the potential for spinning up a local SQL Instance, restoring a test database, and running a sequence of actions against it with pass or fail without the additional infrastructure requirements to have this done on another server. Making your tests that are not full integration testing as minimally dependent on external factors is a fantastic step to saving you a lot of work.</p>
<p>A simple pester (PowerShell) might frame the start of a test like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">Before</span> <span class="n">All</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">docker-compose</span> <span class="n">up</span> <span class="n">-d</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Import-Module</span> <span class="n">Dbatools</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Wait Until dbatools confirms connectivity through something like test-dbaconnection, then proceed with tests</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Test-DbaConnection ....</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Restore-DbaDatabase ...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">After</span> <span class="n">All</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">docker-compose</span> <span class="n">down</span> <span class="p">-</span><span class="n">-volume</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;DescribeName&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Context</span> <span class="s2">&#34;ContextName&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">It</span> <span class="s2">&#34;ItName&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Assertion</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap Up</h2><p>Hope this helps someone. I spent at least a year coming back over time to this hoping to actually get it working in a way that felt like a first-class citizen and reduced complexity for development work.</p>
<p>I&rsquo;m pretty happy with the results. 😁</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Getting Started With Python For Data Exploration
    </title>
    <link>
        https://www.sheldonhull.com/getting-starting-with-python-for-data-exploration/
    </link>
    <pubDate>
        Tue, 19 Nov 2019 16:51:08 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/getting-starting-with-python-for-data-exploration/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="intro" class="headerLink">
    <a href="#intro" class="header-mark"></a>Intro</h2><p>To get started with running python queries with SQL Server is actually pretty easy. I waited far too long to tackle this, thinking it was much harder than it turned out to be. Hopefully, this can be a good starting point for you as well.</p>
<h2 id="why-would-i-want-to-do-this" class="headerLink">
    <a href="#why-would-i-want-to-do-this" class="header-mark"></a>Why would I want to do this?</h2><p>When you use great tools like dbatools with PowerShell, you come to think that PowerShell is a first class citizen for working with SQL Server. This is true in regards to administration and general usage. However, data exploration is a different beast.</p>
<h2 id="powershell--net-are-not-designed-for-adhoc-data-exploration" class="headerLink">
    <a href="#powershell--net-are-not-designed-for-adhoc-data-exploration" class="header-mark"></a>PowerShell &amp; .NET Are Not Designed for Adhoc Data Exploration</h2><p>First, can they? Yes. But just because there is a library someone created to give you some of these features, are the languages themselves first class data exploration languages, especially for adhoc and exploratory work. I think most would agree: <em>no</em>.</p>
<p>To be very clear, I know there are possibilities, such as the newer Azure Data Studio powershell notebook feature, and likely other modules that can help with exploration. What I&rsquo;m trying to be clear about is that those are all exceptions to the rule, whereas exploration in Python is a first class citizen from the start. (coming from a dedicated PowerShell addict &#x1f601;)</p>
<p>Traditionally, I&rsquo;ve used Azure Data Studio or SQL Management Studio and run individually queries in a large sql script to explore and manipulate the data. However, once you start wanting to pivot, aggregate, sum, and do various other experimental actions, T-SQL can be over complicated to do this for that adhoc work. Just because you can do unpivot doesn&rsquo;t mean it&rsquo;s a smarter use of time than using a pivot table in Excel for adhoc work (as much as it pains me to say).</p>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Azure Data Studio
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">Azure data studio is making great progress with SQL Server based notebooks, which I highly recommend checking out. It&rsquo;s still in its infancy. So while it&rsquo;s pretty useful for basics, if you want to stick with a scripted approach to explore, python will be superior. Just recently PowerShell based code cells are available too, I believe.</div>
    </div>
  </div>
<p>However, even better than playing around with data in an Excel sheet, what if you wanted to stay in your programmatic script and start slicing and dicing the data coming back, molding into &ldquo;tidy data&rdquo; for what you want to analyze?</p>
<p>PowerShell and .NET don&rsquo;t have the intuitive and experimental data exploration capabilities that have existed for a long time in the Python libraries. They can easily manipulate, group, mold and visualize the data with minimal effort. This is the forte of Python&rsquo;s libraries, and has much more maturity than doing some homegrown solution work around.</p>
<h2 id="jupyter-notebooks" class="headerLink">
    <a href="#jupyter-notebooks" class="header-mark"></a>Jupyter Notebooks</h2><p>I&rsquo;m sticking with Visual Studio Code, so install the python extension <code>ms-python.python</code> and then create a new notebook directly from the command pallet. Once you open this up you can start writing some markdown notes and then running queries and visualizing the results in one place.</p>
<h2 id="python-plotly-library" class="headerLink">
    <a href="#python-plotly-library" class="header-mark"></a>Python Plotly Library</h2><p>The standard libraries are pretty good. I wanted something that also created graphs that I&rsquo;d consider pleasing to the eye. The default <code>matplotlib</code> wasn&rsquo;t really what I was looking for, so I used <code>plotly</code>. This fantastic library has an express edition that gets you up and running in minutes playing with data, and can even convert your visualizations into a nice web app dashboard with <code>Dash</code> (also a plotly product).</p>
<h2 id="pandas" class="headerLink">
    <a href="#pandas" class="header-mark"></a>Pandas</h2><p>In addition to working with <code>plotly</code> I leveraged <code>pandas</code>. I think from my initial working with it, that this library will be a staple for my adhoc data work for a long time. It basically provides a nice easy way to work with <code>Dataframes</code>, which is kinda of like working with a .NET <code>datatable</code>, albeit, many extensibility, exporting, and other features built into it. I found it intuitive and pretty easy to work with.</p>
<h2 id="installing-pyodbc" class="headerLink">
    <a href="#installing-pyodbc" class="header-mark"></a>Installing pyodbc</h2><div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      platform
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>This guide is written for someone using a Windows based development environment. The setup requirements for running in Linux/Mac will be different for drivers</p>
<p>For running in AWS Lambda in python runtime, there are more complex issues requiring the driver to be compiled and uploaded to a Lambda layer for use. Windows dev machine doesn&rsquo;t have this requirement and should just work after running ODBC driver install and pyodbc. &#x1f389;</p>
</div>
    </div>
  </div>
<ol>
<li><a href="https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server" title="SQL Server ODBC Drivers" target="_blank" rel="noopener noreferrer">Link for SQL Server ODBC Drivers</a></li>
<li><code>pip3 install pyodbc</code></li>
</ol>
<h2 id="generate-connection-file" class="headerLink">
    <a href="#generate-connection-file" class="header-mark"></a>Generate Connection File</h2><p>If you are constantly changing the SQL Server instance you are connecting to, then you may just want provide variables for your script. In my test case, I wanted to create a default connection file that I could use in several scripts to avoid having to set in each module file.</p>
<p>I found some great examples online and cobbled this together from several.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">configparser</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">keyring</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">xlsxwriter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">service_account</span> <span class="o">=</span> <span class="s2">&#34;DomainOfTheTaco</span><span class="se">\\</span><span class="s2">TacoEater&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">sql_login_name</span> <span class="o">=</span> <span class="s2">&#34;TACO-HIGH-PRIEST&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">sql_instance</span> <span class="o">=</span> <span class="s2">&#34;TACO-SERVER-01&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">driver_name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">driver_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">pyodbc</span><span class="o">.</span><span class="n">drivers</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39; for SQL Server&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;The following ODBC drivers were identified on your system&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">driver_names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">driver_names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">driver_name</span> <span class="o">=</span> <span class="n">driver_names</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">driver_name</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span> <span class="o">=</span> <span class="n">configparser</span><span class="o">.</span><span class="n">ConfigParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="s1">&#39;DRIVER&#39;</span><span class="p">:</span> <span class="n">driver_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="s1">&#39;SERVER&#39;</span><span class="p">:</span> <span class="n">sql_instance</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="s1">&#39;DATABASE&#39;</span><span class="p">:</span> <span class="s2">&#34;master&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="s1">&#39;Trusted_Connection&#39;</span><span class="p">:</span> <span class="s1">&#39;yes&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="s2">&#34;APP&#34;</span><span class="p">:</span> <span class="s2">&#34;PythonTamer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="s2">&#34;UID&#34;</span><span class="p">:</span> <span class="n">sql_login_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="s2">&#34;PWD&#34;</span><span class="p">:</span> <span class="n">keyring</span><span class="o">.</span><span class="n">get_password</span><span class="p">(</span><span class="n">service_account</span><span class="p">,</span><span class="n">service_account</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;db_connect.ini&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">configfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">configfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;(No suitable driver found. Cannot connect.)&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Since I had 2 versions of ODBC drivers available, this is what came up:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">The following ODBC drivers were identified on your system
</span></span><span class="line"><span class="cl">[&#39;ODBC Driver 13 for SQL Server&#39;, &#39;ODBC Driver 17 for SQL Server&#39;]
</span></span></code></pre></td></tr></table>
</div>
</div><p>This generated a connection file I could use in other py files I wanted. The file generated in my user directory <code>$ENV:USERPROFILE</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[SQL_SERVER]
</span></span><span class="line"><span class="cl">driver = ODBC Driver 17 for SQL Server
</span></span><span class="line"><span class="cl">server = TACO-SERVER-01
</span></span><span class="line"><span class="cl">database = master
</span></span><span class="line"><span class="cl">trusted_connection = yes
</span></span><span class="line"><span class="cl">app = PythonTamer
</span></span><span class="line"><span class="cl">uid = TACO-HIGH-PRIEST
</span></span><span class="line"><span class="cl">pwd = redactedtacos
</span></span></code></pre></td></tr></table>
</div>
</div><p>This could then be used in python files like below</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">configparser</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pyodbc</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">config</span> <span class="o">=</span> <span class="n">configparser</span><span class="o">.</span><span class="n">ConfigParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">config</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;db_connect.ini&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">constr</span> <span class="o">=</span> <span class="s1">&#39;DRIVER={{</span><span class="si">{drv}</span><span class="s1">}};SERVER=</span><span class="si">{srv}</span><span class="s1">;DATABASE=</span><span class="si">{db}</span><span class="s1">;Trusted_Connection=</span><span class="si">{tc}</span><span class="s1">;APP=</span><span class="si">{app}</span><span class="s1">;UID=</span><span class="si">{uid}</span><span class="s1">;PWD=</span><span class="si">{pwd}</span><span class="s1">&#39;</span>\
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">drv</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;DRIVER&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                      <span class="n">srv</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;SERVER&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                      <span class="n">db</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;DATABASE&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                      <span class="n">tc</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;Trusted_Connection&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                      <span class="n">app</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;APP&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                      <span class="n">uid</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;UID&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                      <span class="n">pwd</span><span class="o">=</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;SQL_SERVER&#39;</span><span class="p">][</span><span class="s1">&#39;PWD&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                      <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cnxn</span> <span class="o">=</span> <span class="n">pyodbc</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This connection object then would allow running queries similar to executing <code>ADO.NET</code> queries.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">out_xlsx</span> <span class="o">=</span> <span class="s2">&#34;C://temp//python-sql-export.xlsx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">cnxn</span> <span class="o">=</span> <span class="n">pyodbc</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_sql</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">select
</span></span></span><span class="line"><span class="cl"><span class="s2">    name
</span></span></span><span class="line"><span class="cl"><span class="s2">from
</span></span></span><span class="line"><span class="cl"><span class="s2">    sys.databases
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span><span class="p">,</span><span class="n">cnxn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Exporting to </span><span class="si">{</span><span class="n">out_xlsx</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data_frame</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data_frame</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="n">out_xlsx</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="kc">None</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;finished query&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To sample in your notebook a few random entries, try this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">data_frame</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You should have an excel workbook exported after this. This was even more succinct than using <code>ImportExcel</code> PowerShell module which is my normal go to.</p>
<h2 id="group-results-into-ranges" class="headerLink">
    <a href="#group-results-into-ranges" class="header-mark"></a>Group Results Into Ranges</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># How many results are being returned?</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_frame</span><span class="o">.</span><span class="n">value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># These are the buckets I want to return results in</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Ie, how many of my results fit into the 0-250 range, and how many 500. These are not fixed ranges.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Histograms do this type of work as well, I&#39;m showing the grouping overriden at specific ranges with a dataframe in Pandas.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ranges</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">250</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">1000</span><span class="p">,</span><span class="mi">2000</span><span class="p">,</span><span class="mi">3000</span><span class="p">,</span><span class="mi">4000</span><span class="p">,</span><span class="mi">5000</span><span class="p">,</span><span class="mi">6000</span><span class="p">,</span><span class="mi">7000</span><span class="p">,</span><span class="mi">10000</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">groupby</span> <span class="o">=</span> <span class="n">data_frame</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">pd</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">data_frame</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">ranges</span><span class="p">))</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">groupby</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Plotly express visualization</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">histogram</span><span class="p">(</span><span class="n">data_frame</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;time&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;MyFancyTitle&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">               time  metric  value
</span></span><span class="line"><span class="cl">value
</span></span><span class="line"><span class="cl">(0, 250]       1652    1652   1652
</span></span><span class="line"><span class="cl">(250, 500]       22      22     22
</span></span><span class="line"><span class="cl">(500, 1000]      10      10     10
</span></span><span class="line"><span class="cl">(1000, 2000]      9       9      9
</span></span><span class="line"><span class="cl">(2000, 3000]      2       2      2
</span></span><span class="line"><span class="cl">(3000, 4000]      1       1      1
</span></span><span class="line"><span class="cl">(4000, 5000]      5       5      5
</span></span><span class="line"><span class="cl">(5000, 6000]      9       9      9
</span></span><span class="line"><span class="cl">(6000, 7000]      2       2      2
</span></span><span class="line"><span class="cl">(7000, 10000]     1       1      1
</span></span></code></pre></td></tr></table>
</div>
</div><p>This is pretty cool, as while you can do this with windowing functions in SQL Server, for adhoc work, I was able to do this in 2 lines. This could save a lot of time and debugging over more complex T-SQL procs.</p>
<h2 id="scatterchart" class="headerLink">
    <a href="#scatterchart" class="header-mark"></a>Scatterchart</h2><p>Never having really used scattercharts, I&rsquo;m seeing in data exploration they can be a tremendously valuable tool.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_frame</span><span class="o">.</span><span class="n">value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">data_frame</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;metric&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;MyFancyTitle&#39;</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="s2">&#34;value&#34;</span><span class="p">,</span><span class="n">render_mode</span><span class="o">=</span><span class="s2">&#34;auto&#34;</span><span class="p">,</span><span class="n">marginal_y</span><span class="o">=</span><span class="s2">&#34;rug&#34;</span><span class="p">,</span><span class="n">marginal_x</span><span class="o">=</span><span class="s2">&#34;histogram&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="quick-example" class="headerLink">
    <a href="#quick-example" class="header-mark"></a>Quick Example</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">pip3</span> <span class="n">install</span> <span class="n">pydataset</span> <span class="c">#optional for more than iris data</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pydataset</span> <span class="kn">import</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl"><span class="n">titanic</span> <span class="o">=</span> <span class="n">data</span><span class="p">(</span><span class="s1">&#39;titanic&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">titanic</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This results in output like the image below</p>
<p><figure><a class="lightgallery" href="/images/2019-11-05_20-50-29-notebook1.jpg" title="Notebook Output Sample for Titanic" data-thumbnail="/images/2019-11-05_20-50-29-notebook1.jpg">
        
    </a></figure></p>
<p>To generate a more advanced visualization, you can run something to visualize with <code>plotly</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.express</span> <span class="k">as</span> <span class="nn">px</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pydataset</span> <span class="kn">import</span> <span class="n">data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">df</span> <span class="o">=</span> <span class="n">data</span><span class="p">(</span><span class="s1">&#39;iris&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">df</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s2">&#34;Petal.Width&#34;</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s2">&#34;Sepal.Width&#34;</span><span class="p">,</span><span class="n">title</span><span class="o">=</span><span class="s1">&#39;Iris Data Example&#39;</span><span class="p">,</span><span class="n">render_mode</span><span class="o">=</span><span class="s2">&#34;auto&#34;</span><span class="p">,</span><span class="n">marginal_y</span><span class="o">=</span><span class="s2">&#34;rug&#34;</span><span class="p">,</span><span class="n">marginal_x</span><span class="o">=</span><span class="s2">&#34;histogram&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/images/2019-11-05_21-23-36-notebook2.jpg" title="Scatter Chart" data-thumbnail="/images/2019-11-05_21-23-36-notebook2.jpg">
        
    </a></figure></p>
<h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap Up</h2><p>Lots of great options to visualize data with Python &#x1f600; . I&rsquo;ll definitely be spending more time learning how to manipulate and query datasets with Python, and eventually give Dash by Plotly a try as well. I&rsquo;ve enjoyed Grafana, but it&rsquo;s really meant for time series monitoring, not for the flexible data visualization options that can be done so easily in Python.</p>
<p>Hopefully, this gave you a good start on some of the benefits and ease of use of Python if you, like me, are coming from a PowerShell and SQL Server heavy background, and have wanted to know more about Python. &#x1f32e;</p>

        ]]>
    </description>
</item>


<item>
    <title>
        SQL Server Database Experimentation Assistant - How to Run a Capture
    </title>
    <link>
        https://www.sheldonhull.com/sql-server-database-experimentation-assistance-how-to-run-a-capture/
    </link>
    <pubDate>
        Thu, 07 Feb 2019 00:07:21 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/sql-server-database-experimentation-assistance-how-to-run-a-capture/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h1 id="dea" class="headerLink">
    <a href="#dea" class="header-mark"></a>DEA</h1><p>Very basic look at the setup as I couldn&rsquo;t find much documentation on this when I last tried this out in 2018. Maybe it will help you get started a little more quickly. I&rsquo;ve not had a chance to leverage the actual comparisons across a large workload. When I originally wrote up the basics on this last year I found my needs required more customized load testing approaches.</p>
<h2 id="adding-the-feature" class="headerLink">
    <a href="#adding-the-feature" class="header-mark"></a>Adding The Feature</h2><p>Added the DRCReplay.exe and the controller services by pulling up the feature setup and adding existing features to existing SQL instance installed.</p>
<p><figure><a class="lightgallery" href="/images/1516994454775.png" title="Add Feature" data-thumbnail="/images/1516994454775.png">
        
    </a></figure></p>
<p>Pointed the controller directory to a new directory I created</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">[</span><span class="no">io.directory</span><span class="p">]::</span><span class="n">CreateDirectory</span><span class="p">(</span><span class="s1">&#39;X:\Microsoft SQL Server\DReplayClient\WorkingDir&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">io.directory</span><span class="p">]::</span><span class="n">CreateDirectory</span><span class="p">(</span><span class="s1">&#39;X:\Microsoft SQL Server\DReplayClient\ResultDir&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="initializing-test" class="headerLink">
    <a href="#initializing-test" class="header-mark"></a>Initializing Test</h2><p>Started with backup of the database before executing the activity I wanted to trace.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">dbatools</span><span class="p">\</span><span class="nb">backup-dbadatabase</span> <span class="n">-sqlinstance</span> <span class="n">localhost</span> <span class="n">-database</span> <span class="nv">$Dbname</span> <span class="n">-CopyOnly</span> <span class="n">-CompressBackup</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Initialized application application activity, and then recorded in DEA. The result was now in the capture section.</p>
<p><figure><a class="lightgallery" href="/images/1516995207757.png" title="DEA Captures" data-thumbnail="/images/1516995207757.png">
        
    </a></figure></p>
<p>Restoring after trace was recorded in DEA was simple with the following command from Dbatools</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">restore-dbadatabase</span> <span class="n">-SqlInstance</span> <span class="n">localhost</span> <span class="n">-Path</span> <span class="s2">&#34;&lt;BackupFilePath&gt;&#34;</span> <span class="n">-DatabaseName</span> <span class="n">SMALL</span> <span class="n">-WithReplace</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After this restore, initiating the replay was achieved by going to the replay tab.</p>
<p><figure><a class="lightgallery" href="/images/1516995297608.png" title="DEA Replay" data-thumbnail="/images/1516995297608.png">
        
    </a></figure></p>

        ]]>
    </description>
</item>


<item>
    <title>
        NTFS Compression and SQL Server Do Not Play Well Together
    </title>
    <link>
        https://www.sheldonhull.com/ntfs-compression-and-sql-server-dont-play-well-together/
    </link>
    <pubDate>
        Wed, 08 Aug 2018 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/ntfs-compression-and-sql-server-dont-play-well-together/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Wanted to be proactive and move a database that was in the default path on <code>C:\</code> to a secondary drive as it was growing pretty heavily.</p>
<p>What I didn&rsquo;t realize was the adventure that would ensure.</p>
<h2 id="lesson-1" class="headerLink">
    <a href="#lesson-1" class="header-mark"></a>Lesson 1</h2><p>Don&rsquo;t move a SQL Server database to a volume that someone has set NTFS Compression on at the drive level.</p>
<h2 id="lesson-2" class="headerLink">
    <a href="#lesson-2" class="header-mark"></a>Lesson 2</h2><p>Copy the database next time, instead of moving. Would have eased my anxious dba mind since I didn&rsquo;t have a backup. <em>before you judge me.. it was a dev oriented enviroment, not production&hellip; disclaimer finished</em></p>
<h2 id="the-nasty-errors-and-warnings-ensue" class="headerLink">
    <a href="#the-nasty-errors-and-warnings-ensue" class="header-mark"></a>The Nasty Errors and Warnings Ensue</h2><p>First, you&rsquo;ll get an error message if you try to mount the database and it has been compressed. Since I&rsquo;d never done this before I didn&rsquo;t realize the mess I was getting into. It will tell you that you can&rsquo;t mount the database without marking as read-only as it&rsquo;s a compressed file.</p>
<p>Ok&hellip; so just go to <code>file explorer &gt; properties &gt; advanced &gt; uncheck compress</code> &hellip; right?</p>
<p>Nope&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">Changing File Attributes &#39;E:\DATA\FancyTacos.mdf&#39; The requested operation could not be completed due to a file system limitation`
</span></span></code></pre></td></tr></table>
</div>
</div><p>I found that message about as helpful as the favorite .NET error message <code>object reference not found</code> that is of course so easy to immediately fix.</p>
<h2 id="the-fix" class="headerLink">
    <a href="#the-fix" class="header-mark"></a>The Fix</h2><ul>
<li>Pull up volume properties. Uncheck compress drive
OR</li>
<li>If you really want this compression, then make sure to uncompress the folders containing SQL Server files and apply.</li>
</ul>
<p>Since I wasn&rsquo;t able to fix this large of a file by toggling the file (it was 100gb+), I figured to keep it simple and try copying the database back to the original drive, unmark the archive attribute, then copy back to the drive I had removed compression on and see if this worked. While it sounded like a typical &ldquo;IT Crowd&rdquo; fix (have you tried turning it on and off again) I figured I&rsquo;d give it a shot.</p>
<p>&hellip; It worked. Amazingly enough it just worked.</p>
<p>Here&rsquo;s a helpful script to get you on your way in case it takes a while. Use at your own risk, and please&hellip; always have backups! #DontBlameMeIfYouDidntBackThingsUp #CowsayChangedMyLife</p>
<script src="https://gist.github.com/sheldonhull/c13eec8bbd570f762fd3834b19464465.js"></script>

<p>and finally to remount the database after copying it back to your drive &hellip;</p>
<script src="https://gist.github.com/sheldonhull/274861a17a7db002bddd55861b781719.js"></script>


        ]]>
    </description>
</item>


<item>
    <title>
        SQL .NET Requirements
    </title>
    <link>
        https://www.sheldonhull.com/offline-net35-install/
    </link>
    <pubDate>
        Fri, 30 Mar 2018 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/offline-net35-install/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="sql-server-install-requirements" class="headerLink">
    <a href="#sql-server-install-requirements" class="header-mark"></a>SQL Server Install Requirements</h2><p>SQL Server Installation requirements indicate .NET 3.5, 4.0, or 4.6 depending on the version. This is not including SSMS. At this point you shouldn&rsquo;t use SSMS from any SQL ISO. Just install SQL Management Studio directly.</p>
<p>See for more details on this</p>
<ul>
<li><a href="/improvements-with-ssms-2016/" rel="">Improvements with SSMS 2016</a></li>
<li><a href="/update-ssms-with-ps1/" rel="">Update SSMS With PS1</a></li>
</ul>
<p>From a quick review here&rsquo;s what you have regarding .NET requirements for the database engine.</p>
<table>
<thead>
<tr>
<th>SQL Version</th>
<th>.NET Required</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://bit.ly/2IdFXsv" target="_blank" rel="noopener noreferrer">&gt;= SQL 2016 RC1 (SQL 2017 included)</a></td>
<td>.NET 4.6</td>
</tr>
<tr>
<td><a href="http://bit.ly/2uxROj5" target="_blank" rel="noopener noreferrer">SQL 2014</a></td>
<td>.NET 3.5 (manual install required)<br />.NET 4.0 (automatic)</td>
</tr>
<tr>
<td><a href="http://bit.ly/2uyUmgH" target="_blank" rel="noopener noreferrer">SQL 2012</a></td>
<td>.NET 3.5 (manual install required)<br />.NET 4.0 (automatic)</td>
</tr>
</tbody>
</table>
<p>Specifically noted in <a href="https://msdn.microsoft.com/library/ms143506.aspx#Anchor_1" target="_blank" rel="noopener noreferrer">SQL 2012-2014 documentation</a> is:</p>
<blockquote>
<p>.NET 3.5 SP1 is a requirement for SQL Server 2014 when you select Database Engine, Reporting Services, Master Data Services, Data Quality Services, Replication, or SQL Server Management Studio, and it is no longer installed by SQL Server Setup.</p>
</blockquote>
<h2 id="when-net-35-install-just-wont-cooperate" class="headerLink">
    <a href="#when-net-35-install-just-wont-cooperate" class="header-mark"></a>When .NET 3.5 Install Just Won&rsquo;t Cooperate</h2><p>If you need to install SQL Server that requires .NET 3.5 things can get a little tricky. This is a core feature with windows, so typically it&rsquo;s just a matter of going to Features and enabling, both in Windows 10 and Windows Server.</p>
<p>However, if you have a tighter GPO impacting your windows update settings, then you probably need to get this whitelisted. If you are on a time-crunch or unable to get the blocking of .NET 3.5 fixed, then you can also resolve the situation by using a manual offline install of .NET 3.5. Even the setup package Microsoft offers has online functionality and thereby typically fails in those situations.</p>
<h2 id="offline-approach" class="headerLink">
    <a href="#offline-approach" class="header-mark"></a>Offline Approach</h2><p>Surprisingly, I had to dig quite a bit to find a solution, as the .NET 3.5 installers I downloaded still attempted online connections, resulting in installation failure.</p>
<p>Turns out that to get an offline install correctly working you need a folder from the Windows install image (ISO) located at <code>sources\sxs</code>.</p>
<p>Since I wouldn&rsquo;t want to provide this directly here&rsquo;s the basic steps you take.</p>
<h3 id="get-netfx3-cab" class="headerLink">
    <a href="#get-netfx3-cab" class="header-mark"></a>Get NetFx3 Cab</h3><ol>
<li>Download ISO of Windows 10 (I&rsquo;m guessing the version won&rsquo;t really matter as you just want the contents in one folder)</li>
<li>Mount ISO</li>
<li>Navigate to: <code>MountedISO &gt; sources</code> and copy the <code>sxs</code> directory to your location. It should contain <code>microsoft-windows-netfx3-ondemand-package.cab</code>. This is the big difference, as the other methods provide an MSI, not the cab file.</li>
</ol>
<h3 id="create-package" class="headerLink">
    <a href="#create-package" class="header-mark"></a>Create Package</h3><p>Next to create a reusable package</p>
<ol>
<li>
<p>Create a directory: <code>Install35Offline</code></p>
</li>
<li>
<p>Copy SXS directory to this</p>
</li>
<li>
<p>Create 2 files. Gist below to save you some time.</p>
<ol>
<li>Install35Offline.ps1</li>
<li>Install35Offline.bat</li>
</ol>
</li>
</ol>
<script src="https://gist.github.com/sheldonhull/954303c02bf1a5e05b45628dada83f9a.js"></script>

<p>Hopefully this will save you some effort, as it took me a little to figure out how to wrap it all up to make it easy to run.</p>
<p>Packing this up in an internal chocolately package would be a helpful way to fix for any developers needing the help of their local dba wizard, and might even earn you some dev karma.</p>

        ]]>
    </description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Performance-Tuning - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/performance-tuning/</link>
        <description>Performance-Tuning - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 07 Feb 2019 00:07:21 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/performance-tuning/" rel="self" type="application/rss+xml" />

<item>
    <title>
        SQL Server Database Experimentation Assistant - How to Run a Capture
    </title>
    <link>
        https://www.sheldonhull.com/sql-server-database-experimentation-assistance-how-to-run-a-capture/
    </link>
    <pubDate>
        Thu, 07 Feb 2019 00:07:21 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/sql-server-database-experimentation-assistance-how-to-run-a-capture/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h1 id="dea" class="headerLink">
    <a href="#dea" class="header-mark"></a>DEA</h1><p>Very basic look at the setup as I couldn&rsquo;t find much documentation on this when I last tried this out in 2018. Maybe it will help you get started a little more quickly. I&rsquo;ve not had a chance to leverage the actual comparisons across a large workload. When I originally wrote up the basics on this last year I found my needs required more customized load testing approaches.</p>
<h2 id="adding-the-feature" class="headerLink">
    <a href="#adding-the-feature" class="header-mark"></a>Adding The Feature</h2><p>Added the DRCReplay.exe and the controller services by pulling up the feature setup and adding existing features to existing SQL instance installed.</p>
<p><figure><a class="lightgallery" href="/images/1516994454775.png" title="Add Feature" data-thumbnail="/images/1516994454775.png">
        
    </a></figure></p>
<p>Pointed the controller directory to a new directory I created</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">[</span><span class="no">io.directory</span><span class="p">]::</span><span class="n">CreateDirectory</span><span class="p">(</span><span class="s1">&#39;X:\Microsoft SQL Server\DReplayClient\WorkingDir&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">io.directory</span><span class="p">]::</span><span class="n">CreateDirectory</span><span class="p">(</span><span class="s1">&#39;X:\Microsoft SQL Server\DReplayClient\ResultDir&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="initializing-test" class="headerLink">
    <a href="#initializing-test" class="header-mark"></a>Initializing Test</h2><p>Started with backup of the database before executing the activity I wanted to trace.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">dbatools</span><span class="p">\</span><span class="nb">backup-dbadatabase</span> <span class="n">-sqlinstance</span> <span class="n">localhost</span> <span class="n">-database</span> <span class="nv">$Dbname</span> <span class="n">-CopyOnly</span> <span class="n">-CompressBackup</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Initialized application application activity, and then recorded in DEA. The result was now in the capture section.</p>
<p><figure><a class="lightgallery" href="/images/1516995207757.png" title="DEA Captures" data-thumbnail="/images/1516995207757.png">
        
    </a></figure></p>
<p>Restoring after trace was recorded in DEA was simple with the following command from Dbatools</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">restore-dbadatabase</span> <span class="n">-SqlInstance</span> <span class="n">localhost</span> <span class="n">-Path</span> <span class="s2">&#34;&lt;BackupFilePath&gt;&#34;</span> <span class="n">-DatabaseName</span> <span class="n">SMALL</span> <span class="n">-WithReplace</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After this restore, initiating the replay was achieved by going to the replay tab.</p>
<p><figure><a class="lightgallery" href="/images/1516995297608.png" title="DEA Replay" data-thumbnail="/images/1516995297608.png">
        
    </a></figure></p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        ANTS Performance Profiler for the SQL Server Dev
    </title>
    <link>
        https://www.sheldonhull.com/ants-performance-profiler-for-the-sql-server-dev/
    </link>
    <pubDate>
        Fri, 21 Jul 2017 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/ants-performance-profiler-for-the-sql-server-dev/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      2019-11-10
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">Image links are gone due and due to age of post, unable to recover</div>
    </div>
  </div>
<p>There are a few .NET tools that until recently I haven&rsquo;t had the chance to work with as much, specifically ANTS Memory Profiler and ANTS Performance Profiler. The memory profiler is more useful for someone focused on memory leaks which a SQL Dev isn&rsquo;t as focused on for performance tuning. However, there are major benefits for diving into SQL Performance tuning with ANTS Performance profiler. I think I&rsquo;d say this tool makes the <em>epic</em> category of my #cooltools kit.</p>
<p>One of the most challenging processes for profiling activity is really identifying the single largest pain point. Trying to line up timings with the SQL plans and the application side by side is a big timesaver, and Red Gate improved ANTS Performance profiler to include the executed SQL with execution plans, making it a single stop to profile and get some useful information.</p>
<p>There are other ways to get useful information, such as running Brent Ozar&rsquo;s First Responder kit queries, Glenn Berry&rsquo;s diagnostic queries, Query Store, and more. These tend to focus on server performance. As someone working in software development, there is something to be said for the simplicity of running the application and profiling the .NET and SQL performance in one captured &amp; filtered result set. It&rsquo;s a pretty quick way to immediately reduce noise and view a complete performance picture of the application.</p>
<p>For performance profiling, Visual Studio has an option called Performance Profiler. I found my initial look at it to be positive, just really noisy.</p>
<p><em>Disclaimer: As a member of the Friends of Red Gate program, I get to try out all the cool Red Gate tools. Lucky me! This doesn&rsquo;t bias my reviews as I just like great tools that help me work with SQL server. This is one of them!</em></p>
<h2 id="profiling-net-app" class="headerLink">
    <a href="#profiling-net-app" class="header-mark"></a>Profiling .NET App</h2><!-- ![Setting up your profiling session](/images/profiling-net-app.png) Setting up your profiling session -->
<p>At the time of this articles publishing, there is no 2017 Visual studio extension which makes this process a few clicks less. For now, it still is simple. All you do is go to the bin/debug folder and select the executable you want to profile. Attaching to the .NET excecutable is required for my purpose, as attaching to an <em>existing process doesn&rsquo;t give you the ability to get all the SQL calls</em> which we definitely want.</p>
<h2 id="timeline--bookmarks" class="headerLink">
    <a href="#timeline--bookmarks" class="header-mark"></a>Timeline &amp; Bookmarks</h2><!-- ![timeline-bookmarks](/images/timeline-bookmarks.png) -->
<p>During the profiling you can perform actions with the application and create bookmarks of points in time as you are performing these actions to make it easier to compare and review results later.</p>
<h2 id="reviewing-results" class="headerLink">
    <a href="#reviewing-results" class="header-mark"></a>Reviewing Results</h2><!-- ![Call Tree View](/images/review-results.png) Call Tree View -->
<p>This is based on the call tree. It shows code calls, and is a great way to be the database guy that says&hellip; &ldquo;hey SQL server isn&rsquo;t slow, it&rsquo;s your code&rdquo; :-)</p>
<h2 id="database-calls" class="headerLink">
    <a href="#database-calls" class="header-mark"></a>Database Calls</h2><!-- ![Database Calls](/images/database-calls.png) Database Calls -->
<p>The database calls are my favorite part of this tool. This integration is very powerful and lets you immediately trim down to the calls made with timings and associated executed sql text. RG even went and helped us out by providing an execution plan viewer! When I first saw this I fell in love. Having had no previous experience with Entity framework of other ORMs, I found the insight into the performance and behavior of the application to be tremendously helpful the first time I launched this.</p>
<h2 id="exporting-html-report" class="headerLink">
    <a href="#exporting-html-report" class="header-mark"></a>Exporting HTML Report</h2><!-- ![HTML Exported Report](/images/ants-html-exported-report.png) HTML Exported Report -->
<p>A benefit for summarizing some action for others to consume is the ability to select the entire timeline, or narrow to a slide of time, and export the results as a HTML report.</p>
<p>This was pretty helpful as it could easily provide a way to identify immediate pain points in a daily performance testing process and focus effort on the highest cost application actions, as well as database calls.</p>
<h2 id="automation-in-profiling" class="headerLink">
    <a href="#automation-in-profiling" class="header-mark"></a>Automation in Profiling</h2><p>RG Documentation shows great flexibility for the profiler being call from command line. I see a lot of potential benefit here if you want to launch a few actions systematically from your application and establish a normal performance baseline and review this report for new performance issues that seem to be arising.</p>
<p>I generated some reports automatically by launching my executable via command line, profiling, and once this was completed, I was provided with a nice formatted HTML report for the calls. At the time of this article, I couldn&rsquo;t find any call for generating the SQL calls as their own report.</p>
<script src="https://gist.github.com/sheldonhull/8055f44fd25af7d010ba22c6e54692e4.js"></script>

<h2 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>TL;DR</h2><p><strong>Pros</strong></p>
<ol>
<li>Incredibly powerful way to truly get a picture into an application&rsquo;s activity and the true pain points in performance it is experiencing. It truly helps answer the question very quickly of what is the area that needs the most attention.</li>
<li>Very streamlined way to get a summary of the SQL activity an application is generating and the associated statements and execution plans for further analysis.</li>
</ol>
<p><strong>Cons</strong></p>
<ol>
<li>At times, with larger amounts of profiled data the application could feel unresponsive. Maybe separating some of the panes activity into asynchronous loads with progress indicators would make this feel better.</li>
</ol>
<p>** Neutral/Wishlist **</p>
<ol>
<li>More an observation than complaint, but I sure would like to see some active work being released on this with more functionality and SQL performance tuning focus. Seems to be stable and in maintenance mode rather than major enhancements being released. For those involved in software development, this tool is a powerful utility and I&rsquo;d love to see more improvements being released on it. RedGate&hellip; hint hint? :-)</li>
<li>I&rsquo;d like to see even more automation focus, with the option of preset Powershell cmdlets, and team foundation server task integration to help identify changes in performance patterns when scaled up. Leveraging this to help baseline application performance overall and report and develop trends against this might help catch issues that crop up more quickly.</li>
</ol>
<h2 id="additional-info-on-more-profiling-focused-apps" class="headerLink">
    <a href="#additional-info-on-more-profiling-focused-apps" class="header-mark"></a>additional info on more profiling focused apps</h2><p>Since the material is related, I thought I&rsquo;d mention a few tools I&rsquo;ve used to help profile activity, that is not focused on a wholistic performance analysis, and more about activity.</p>
<ol>
<li>For more &ldquo;profiling&rdquo; and less performance analysis my favorite SQL profiling tool Devart&rsquo;s <a href="https://www.devart.com/dbforge/sql/event-profiler/" target="_blank" rel="noopener noreferrer">DbForge Sql Profiler</a> uses extended events and while amazing, isn&rsquo;t as focused a tool for app and SQL performance analysis. If you haven&rsquo;t checked that tool (free!) out I highly recommend it vs running profiler. It uses extended events and provides a nice experience in profiling and reviewing results. Super easy to use and very flexible for filtering/sorting/exporting. The only issues I have with it are the filtering setup is annoying, but tolerable to work with, and no execution plans that I&rsquo;ve been able to find built in, unlike running extended events in SSMS directly. Hopefully, Devart will recognize what an awesome tool they&rsquo;ve made and continue to push it forward.</li>
<li>For just getting Entity framework and other ADO.net calls you can use intellitrace with the option for ADO.NET tracing enabled. I found this nice, but a little clunky to use compared to Linq Insight or other options mentioned. It&rsquo;s included with visual studio so if only using periodically then this would be ok to work with.</li>
<li>For a cleaner implementation of Entity Framework Profiling than the Intellitrace route use <a href="http://bit.ly/2vo2Zaj" target="_blank" rel="noopener noreferrer">Devarts dbForge Linq Insight</a> (I love this tool for cleaner profiling of ADO.NET activity when you aren&rsquo;t focused on overall performance of the application) and are working in Visual studio.</li>
</ol>
<p>If all else fails&hellip; you can always succumb to dark side and just use SQL Profiler or worse yet&hellip;SSMS activity monitor :-)</p>
<!-- ![Image courtesy of Gratisography.com CC0](/images/xevents-vs-profiler.jpg) Image courtesy of Gratisography.com CC0 -->

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Setting Up InfluxDb, Chronograf, and Grafana for the SqlServer Dev
    </title>
    <link>
        https://www.sheldonhull.com/setting-up-influx-db-chronograf-and-grafana-for-the-sql-server-dev/
    </link>
    <pubDate>
        Wed, 17 May 2017 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/setting-up-influx-db-chronograf-and-grafana-for-the-sql-server-dev/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Updated: 2020-04-29
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">broken image links removed</div>
    </div>
  </div>
<p>There are some beautiful ways to visualize time series data with the tools I&rsquo;m going to go over. This post is purely focused on the initial setup and saving you some time there. In a future post, I&rsquo;ll show how some of these tools can help you visualize your server performance in a powerful way, including taking metrics from multiple types of servers that be working with SQL Server, and combining the metrics when appropriate to give a full picture of performance.</p>
<p>A beautiful way to visualize performance across a variety of machines</p>
<p>It&rsquo;s pretty epic to combine information across a variety of sources and be able to relate the metrics to the &ldquo;big picture&rdquo; that individual machine monitoring might fail to shed light on.</p>
<h2 id="downloading" class="headerLink">
    <a href="#downloading" class="header-mark"></a>Downloading</h2><p>I started by running this quick powershell script to download the stable toolkit.
<script src="https://gist.github.com/sheldonhull/5fa33704e2599e3ddb46a8299ad3bafe.js"></script>
</p>
<p>Once extracted, I moved the influx extracted subfolder into the InfluxDB folder to keep it clean. Now all the binaries rested in <code>C:\Influx\InfluxDB</code> folder with no nesting folders.
I referenced the documentation for getting started with InfluxDB.</p>
<h2 id="setup-local-influxdb" class="headerLink">
    <a href="#setup-local-influxdb" class="header-mark"></a>Setup Local InfluxDb</h2><p>Started up the local influxdb binary.</p>
<script src="https://gist.github.com/sheldonhull/6f4e11d60244af00edac438cb9ae6ea5.js"></script>

<p>Initializing the new database was simple as documented: <code>create database statty</code></p>
<div
    class="details admonition warning
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-exclamation-triangle fa-fw"
      ></i>
      Case Sensitivity
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">InfluxDB is case sensitive. Make sure to check your case if something isn&rsquo;t working, such as use &ldquo;DatabaseName&rdquo; instead of use &ldquo;databasename&rdquo;</div>
    </div>
  </div>
<p>Also, if you get an error with access to the file, try running as admin.</p>
<h2 id="more-enviromental-variable-fun" class="headerLink">
    <a href="#more-enviromental-variable-fun" class="header-mark"></a>More Enviromental Variable Fun</h2><p>A simple fix to errors related to paths and the HOME variable these tools often need, per a Github issue, was to ensure the current path was available as a variable. I did this quickly with a simple batch file to launch the consoles as well as one option, as well as updated the Start-Process script to include a statement to set the env variable for the processes being started. This eliminated the issue. For more details see <a href="http://bit.ly/2nJib1P" target="_blank" rel="noopener noreferrer">github issues</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-batch" data-lang="batch"><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">HOME</span><span class="p">=</span><span class="nv">%~dp0</span>
</span></span><span class="line"><span class="cl"><span class="k">start</span> influxd.exe
</span></span><span class="line"><span class="cl"><span class="k">start</span> influx.exe
</span></span></code></pre></td></tr></table>
</div>
</div><p>An additional snippet for launching the console version via a bat file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-batch" data-lang="batch"><span class="line"><span class="cl"><span class="k">set</span> <span class="nv">HOME</span><span class="p">=</span>C:\influx
</span></span><span class="line"><span class="cl">cmd /k influx.exe -host <span class="s2">&#34;MyInfluxDbHost&#34;</span> -database <span class="s2">&#34;statty&#34;</span> -precision <span class="s2">&#34;s&#34;</span> -format column
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="quick-start-for-telegraf" class="headerLink">
    <a href="#quick-start-for-telegraf" class="header-mark"></a>Quick Start for Telegraf</h2><p>Once you have this running you can take the telegraf binaries and run them on any other server to start capturing some default preset metrics. I launched with the following script and placed this in <code>C:\Influx</code> directory to make it easy to access for future runs.</p>
<script src="https://gist.github.com/sheldonhull/1a9641ce607569dde912f996137debae.js"></script>

<p>Edit the conf file to add some tags, change default sampling interval and more. I&rsquo;ll post another article about setting up telegraf to run as a service in the future so search for more info</p>
<p>You can also apply the same bat file in the startup directory such as:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-batch" data-lang="batch"><span class="line"><span class="cl"><span class="p">@</span><span class="c1">REM alternative is using variable</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="c1">REM set TELEGRAF_CONFIG_PATH=C:\telegraf\telegraf.conf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">start</span> <span class="nv">%~dp0</span>telegraf.exe -config <span class="nv">%~dp0</span>telegraf.conf
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="run-chronograf" class="headerLink">
    <a href="#run-chronograf" class="header-mark"></a>Run Chronograf</h2><p>One these metrics began to run, I ran Chronograf. This is Influx&rsquo;s alternative to Grafana, another more mature product.</p>
<script src="https://gist.github.com/sheldonhull/958094675f6ab53897616755dd130144.js"></script>

<p>Upon loading and opening up the instance monitor, I found immediately that I was able to get some metrics from the defaults.</p>
<h2 id="get-grafana" class="headerLink">
    <a href="#get-grafana" class="header-mark"></a>Get Grafana</h2><p>My preferred visualization tool, this was far more robust and well documented than Chronograf which has promise, but is a relatively new project.</p>
<p>When starting Grafana, you can run the following script. It creates a copy of the default ini to copy for the user to edit if not already there.</p>
<script src="https://gist.github.com/sheldonhull/3cff34cf9029bd99cd1e888e755c307c.js"></script>

<p>Once you open the localhost page, if you don&rsquo;t see datasources in the left hand drop down, create an organization and ensure you are an admin, you&rsquo;ll then see the option to add datasources. I simple pointed the page to InfluxDB console running on the server I had setup previously.</p>
<h2 id="summary" class="headerLink">
    <a href="#summary" class="header-mark"></a>summary</h2><p>This is just a quick guide on getting started as I found a lot of little bumps in the road since the projects are written in <code>GO</code> and not an easily run .NET project. Getting through this will hopefully give you a way to get started. I&rsquo;ll blog a bit more soon on visualization of the metrics captured, some custom annotations to help make metrics come alive with real-time event notifications (like &ldquo;load test started&rdquo; and &ldquo;build ended&rdquo; etc). It&rsquo;s a really promising solution for those who want some really nice flexibility in using perfmon and related metrics to visualize Windows and SQL Server performance.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        SQL Sentry Pro Explorer is worth it...
    </title>
    <link>
        https://www.sheldonhull.com/sql-sentry-pro-explorer-is-worth-it/
    </link>
    <pubDate>
        Tue, 28 Apr 2015 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/sql-sentry-pro-explorer-is-worth-it/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Updated: 2017-04-21
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">Another great bit of news from reviewing this older post I wrote&hellip; SQL Sentry Pro is now a free tool thanks to the generosity of the Sentry One team! It&rsquo;s a must have. Go download it for sure.</div>
    </div>
  </div>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Updated: 2015-04-28
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">I created a few autohotkey scripts and solved the problem of collapsing panes and a few other annoyances. This has improved my experience a little. - Also noted one major improvement that would help with tuning is aggregating the total IO, and stats, rather than only each individual statement. I&rsquo;ve found the need to compare two very different plans to see the total writes/reads variation and the impact on IO, but I&rsquo;ve having to utilize another tool for statistics IO parsing to run totals, and then come back to the SQL Sentry Plan explorer for other details. The SQL Sentry plan explorer tool could be improved by enhancing with totals/sums to better compare various runs of plans. I can make do without it, but it makes me have to do a lot of workarounds for now.</div>
    </div>
  </div>
<p>I&rsquo;ll post more later, but after a full day of query tuning on a difficult view, I&rsquo;d definitely say the cost for PRO is worth it. I&rsquo;m a fan of sql sentry (free), and decided recently to push for a license at work on this tool. Turns out it was well worth it. The ability to measure variance in plans with small changes without cluttering up SSMS without 20 versions was incredibly helpful and time saving. There are a few quirks that really bother me, but not enough to negate the benefits of this tool. Perks - Save a continual session on troubleshooting a query - Evaluate Logical IO easily in the same view - Save comments on each plan version run to identify the changes you made and what impact it had Negatives - Not integrated with SSMS or preferred text editor so the text editor extremely sparse on features. - No ability to easily sum logical IO and COMPARE to another plan, really you have to open two tabs and eyeball them. That is the biggest frustration, no easy comparison side by side without opening the same session and eyeballing. - NO KEYBOARD SHORTCUTS. GEEZ is that frustrating as you are trying to power through some changes, copy cells/io, and more. Overall: Love the product. Hope they enhance the producivity and efficient aspect more as that&rsquo;s the only area I&rsquo;m seeing it&rsquo;s short in. Here are some screenshots from my work with it today. I additionally compared the final IO with <a href="http://statisticsparser.com/index.html" target="_blank" rel="noopener noreferrer">http://statisticsparser.com/index.html</a>
<figure><a class="lightgallery" href="/images/Microsoft_SQL_Server_Management_Studio-2015-04-22_17_00_36_x9rdtc.png" title="Image SQL Tuning Session 1" data-thumbnail="/images/Microsoft_SQL_Server_Management_Studio-2015-04-22_17_00_36_x9rdtc.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-22_17_03_44_mgscfz.png" title="Image SQL Tuning Session 2" data-thumbnail="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-22_17_03_44_mgscfz.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-22_17_05_06_gef52g.png" title="Image SQL Tuning Session 3" data-thumbnail="/images/SQL_Sentry_Plan_Explorer_PRO-2015-04-22_17_05_06_gef52g.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/Statistics_Parser-2015-04-22_16_32_34-2015-04-22_17_08_21_CLEANED_ntkowe.png" title="Image SQL Tuning Session 4" data-thumbnail="/images/Statistics_Parser-2015-04-22_16_32_34-2015-04-22_17_08_21_CLEANED_ntkowe.png">
        
    </a></figure>
<figure><a class="lightgallery" href="/images/new_version-2015-04-22_16_35_36-2015-04-22_17_08_48_CLEANED_zejqww.png" title="Image SQL Tuning Session 5" data-thumbnail="/images/new_version-2015-04-22_16_35_36-2015-04-22_17_08_48_CLEANED_zejqww.png">
        
    </a></figure></p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

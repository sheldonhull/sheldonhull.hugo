<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Infrastructure-as-Code - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/infrastructure-as-code/</link>
        <description>Infrastructure-as-Code - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 12 Apr 2022 16:55:16 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/infrastructure-as-code/" rel="self" type="application/rss+xml" />

<item>
    <title>
        The Pulumi Verdict So Far
    </title>
    <link>
        https://www.sheldonhull.com/the-pulumi-verdict-so-far/
    </link>
    <pubDate>
        Tue, 12 Apr 2022 16:55:16 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/the-pulumi-verdict-so-far/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="what-pulumi-is" class="headerLink">
    <a href="#what-pulumi-is" class="header-mark"></a>What Pulumi Is</h2><ul>
<li>Pulumi is like a muscle car.
Great if you want full control, power, and flexibility.</li>
<li>Pulumi is fast.</li>
<li>Has actual loops.
Sorry <code>HCL</code>&hellip; Your loops are just confusing.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ul>
<h2 id="what-pulumi-is-not" class="headerLink">
    <a href="#what-pulumi-is-not" class="header-mark"></a>What Pulumi Is Not</h2><ul>
<li>Pulumi is like a rally car.
You will be traveling a gravel road that might result in a few bumps and potholes.
It can handle it.
However, there are things (just like <code>HCL</code> had/has over time) you&rsquo;ll run into that don&rsquo;t make sense or are bugs, but since it&rsquo;s younger there might not be immediate fixes.</li>
</ul>
<h2 id="when-would-i-choose-terraform-over-pulumi" class="headerLink">
    <a href="#when-would-i-choose-terraform-over-pulumi" class="header-mark"></a>When Would I Choose Terraform Over Pulumi?</h2><ul>
<li>If you prefer minivans over rally cars. (j/k)</li>
<li>If I want to leverage a prebuilt complex module, like those from the Terraform registry made by CloudPosse, Terraform could provide a better value for the time.
<ul>
<li>I hope that Pulumi eventually has a full &ldquo;Crosswalk&rdquo; support where folks begin sharing prebuilt stacks with best practices, but I feel it&rsquo;s an uphill road as a latecomer from Terraform.</li>
</ul>
</li>
<li>When there is a module that provides the functionality you want, it might make sense to use it over rebuilding in Pulumi.</li>
<li>If you expect no one in your org will support Pulumi, you might use it for a few things here and there, but it&rsquo;s a tough road unless others are interested and willing to try it out.</li>
</ul>
<h2 id="when-would-i-choose-pulumi-over-terraform" class="headerLink">
    <a href="#when-would-i-choose-pulumi-over-terraform" class="header-mark"></a>When Would I choose Pulumi over Terraform?</h2><ul>
<li>If you lean towards &ldquo;developer&rdquo; over &ldquo;infrastructure&rdquo; engineering in your skillset, meaning you are comfortable writing in the primary languages Pulumi supports. I feel it requires a bit more coding (esp with Typed languages) understanding upfront, while <code>HCL</code> is something you can pick up without requiring general-purpose coding knowledge.</li>
<li>If you are solid with Go, Python, C#, or Typescript, but not quite as advanced as <code>HCL</code>.</li>
<li>If you understand infrastructure. This is key. Terraform modules tend to hold your hand and do a lot of good things for you out of the box. Pulumi is like giving you the lego pieces to build whatever you want, but not a step-by-step assembly guide.</li>
<li>When you have the autonomy to select a combination of tools in your role.</li>
<li>When you want to use looping constructs and other language functions without dealing with the limits of confusion of <code>HCL</code>.</li>
<li>If you want to deviate from very basic <code>yaml</code> and <code>tfvar</code> inputs, then Pulumi can be more flexible with the range of libraries and built-in configuration functionality Pulumi offers.</li>
<li>If you want to store encrypted secrets in your <code>yaml</code> for simplicity and velocity, Pulumi does this very elegantly.</li>
<li>If you want to manage complex naming conventions, then using a struct with methods is fantastic, allowing you to enforce naming and self-document using Go&rsquo;s documentation functionality (and IntelliSense).</li>
</ul>
<h2 id="other-notes" class="headerLink">
    <a href="#other-notes" class="header-mark"></a>Other Notes</h2><h3 id="support" class="headerLink">
    <a href="#support" class="header-mark"></a>Support</h3><ul>
<li>Pulumi: Expect delays. I believe many of those helping are not doing support in Slack or GitHub full-time. This can make the unique challenges faced in edge cases difficult to allocate time to support. I believe this would change if the enterprise support tier was engaged, so if it&rsquo;s an org-wide rollout, then consider this.</li>
<li>Terraform: In contrast, I&rsquo;ve had <em>absymally</em> low engagement from Terraform in forums and GitHub. I think both prioritize (rightly) the Enterprise clients, which leaves the lower tier subscribers a bit on their own/crowdsourced support at times. They should close their forums down and rely on GitHub unless engagement changes. The best part about Terraform, is you often don&rsquo;t need support since so many community members use it.</li>
</ul>
<h2 id="components" class="headerLink">
    <a href="#components" class="header-mark"></a>Components</h2><p>Components allow you to provide similar functionality to the org as Terraform modules.
If you are rolling this out to an org, consider becoming familiar with this and simplify other development teams&rsquo; usage by having the core components provided with all the best practices, tagging, and naming convention preset.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>My top post of all time to this day is a post on using terraform <code>for_each</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Using Randomization for Pulumi Kubernetes Resources
    </title>
    <link>
        https://www.sheldonhull.com/using-randomization-for-pulumi-kubernetes-resources/
    </link>
    <pubDate>
        Thu, 24 Mar 2022 21:15:37 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/using-randomization-for-pulumi-kubernetes-resources/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="logical-names" class="headerLink">
    <a href="#logical-names" class="header-mark"></a>Logical Names</h2><p>Pulumi requires unique logical names (URN) for tracking the state of resources.
I ran into an issue with this once I expanded to a multi-cluster deployment since Pulumi began erroring on the logical name not being unique.
Let&rsquo;s say you are defining a service:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">corev1</span><span class="p">.</span><span class="nf">NewService</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;myservice&#34;</span><span class="p">,</span> <span class="c1">// 👈👈👈👈 this is the logical name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">ServiceArgs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ApiVersion</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;v1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Kind</span><span class="p">:</span>       <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;Service&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Metadata</span><span class="p">:</span>	<span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMetaArgs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Namespace</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">myNamespace</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Name</span><span class="p">:</span>      <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">myAppName</span><span class="p">),</span> <span class="c1">// 👈👈👈👈 This is the physical name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can normally omit the <code>Metadata.Name</code> and Pulumi will autogenerate this with a randomized suffix for you.
This allows a style of &ldquo;create before destroy&rdquo; deployments you don&rsquo;t get with native kubectl apply style commands.
Things get a little messy here as overriding the logical name requires a normal <code>String</code>.</p>
<p>To allow maximum uniqueness, you can concatenate values in the logical name so that it&rsquo;s unique as you desire, such as <code>resourcename + cluster</code> for example.</p>
<h2 id="using-random" class="headerLink">
    <a href="#using-random" class="header-mark"></a>Using Random</h2><p>Having used Terraform&rsquo;s random provider in the past, and found it incredibly helpful to stop relying on the uniqueness of names that I have to manage, I tried initially to do this with the Pulumi terraform version of random.
It didn&rsquo;t work out too well.
In the end, I realized this is where just having the power of the language itself makes perfect sense.
I had a pointer from someone in this <a href="https://github.com/pulumi/pulumi/discussions/9207#discussioncomment-2372172" target="_blank" rel="noopener noreferrer">github discussion</a> about using the <code>petname</code> package itself, but I didn&rsquo;t like that idea as it was a bit unwieldy and not designed for importing as a package.
Trying to use the resource results in a problem as <code>pulumi.StringOutput</code> can&rsquo;t be used with string concantenation.
Instead, you have to use the <code>ApplyT</code> and pass around the string output to other inputs accepting <code>pulumi.StringPtr</code> type.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">petname</span><span class="p">.</span><span class="nf">ID</span><span class="p">().</span><span class="nf">ApplyT</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">id</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nx">ID</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%v&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}).(</span><span class="nx">pulumi</span><span class="p">.</span><span class="nx">StringOutput</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This doesn&rsquo;t work because the output is still a <code>pulumi.StringOutput</code> and not a <code>string</code>.</p>
<p>This would work for things like the physical name, but you can&rsquo;t get the string output as it&rsquo;s to be considered like a &ldquo;promise&rdquo; and not resolved till the end of the plan.
Logical names require strings, not <code>pulumi.String</code>.</p>
<h2 id="go-makes-it-simple" class="headerLink">
    <a href="#go-makes-it-simple" class="header-mark"></a>Go Makes it Simple</h2><p>I did a little searching for correctly converting strings into int hashes, and with the volume of deployments, a collision risk is ridiculously low (something like 1 in 1 billion?).</p>
<p>Here&rsquo;s how I went about it.
You can adapt this for your Pulumi plan.
I went back to one of my favorites, <a href="https://github.com/brianvoe/gofakeit" target="_blank" rel="noopener noreferrer">gofakeit</a> which provides a fantastic package for generating data.
What&rsquo;s cool about this is that the generators offer a global <code>Seed</code> option so you can reliably regenerate the same random data.</p>
<h3 id="setup" class="headerLink">
    <a href="#setup" class="header-mark"></a>Setup</h3><p><a href="https://github.com/brianvoe" target="_blank" rel="noopener noreferrer">@brianvoe on github</a> did a great job with this <code>gofakeit</code> package.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go get <span class="s2">&#34;github.com/brianvoe/gofakeit/v6&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Add this to your imports</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/brianvoe/gofakeit/v6&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now for the hashing, I found a great MIT licensed library I grabbed two functions from here: <a href="https://github.com/shomali11/util/blob/master/xhashes/xhashes.go" target="_blank" rel="noopener noreferrer">util</a> by <a href="https://github.com/shomali11" target="_blank" rel="noopener noreferrer">@shomali11 on github</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// FNV64a hashes using fnv64a algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Sourced from: https://github.com/shomali11/util/blob/master/xhashes/xhashes.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">FNV64a</span><span class="p">(</span><span class="nx">text</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">algorithm</span> <span class="o">:=</span> <span class="nx">fnv</span><span class="p">.</span><span class="nf">New64a</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">uint64Hasher</span><span class="p">(</span><span class="nx">algorithm</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// uint64Hasher returns a uint64
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// Sourced from: https://github.com/shomali11/util/blob/master/xhashes/xhashes.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">uint64Hasher</span><span class="p">(</span><span class="nx">algorithm</span> <span class="nx">hash</span><span class="p">.</span><span class="nx">Hash64</span><span class="p">,</span> <span class="nx">text</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">uint64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">algorithm</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">algorithm</span><span class="p">.</span><span class="nf">Sum64</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I set up a few methods on a configuration struct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Clusters returns a list of clusters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Clusters</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// setSeed sets the gofakeit global state to a specific
</span></span></span><span class="line"><span class="cl"><span class="c1">// seed value based on the string input.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">setSeed</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">calcSeed</span> <span class="o">:=</span> <span class="nf">FNV64a</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">v</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">calcSeed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// animalString returns a string formatted with `{DescriptiveAdjective}-{Animal}`.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">animalString</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">animal</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Animal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">adjective</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">AdjectiveDescriptive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">adjective</span><span class="p">,</span> <span class="nx">animal</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now, once you load a configuration into the struct using the Pulumi configuration package, you can obtain a randomized petname on demand, that will be repeatable and only change if the cluster name is different.</p>
<div
    class="details admonition Tip
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      If your uniqueness requirements change...
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">If your business requirements for uniqueness change, such as a combination of <code>resource+cluster</code> now needing to be deployed in duplication across another namespace (for example for provisioning development environments on demand)&hellip; you can just change the input seed from cluster to a combination of other values and you&rsquo;ll generate new unique seeds from there.</div>
    </div>
  </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// PetName returns a unique petname for logical resources to be uniquely named in the Pulumi state file.
</span></span></span><span class="line"><span class="cl"><span class="c1">// This is formatted as `adjective-animal`.
</span></span></span><span class="line"><span class="cl"><span class="c1">// For logical name purposes, use the PetNameSuffix method instead.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Clusters</span><span class="p">)</span> <span class="nf">PetName</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Calculate a seed value based on cluster name and then generate a random petname for the reosurces so that the logical names stay truly unique even in multi-cluster environments.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">setSeed</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">randomPet</span> <span class="o">:=</span> <span class="nf">animalString</span><span class="p">()</span> <span class="c1">// Random based on seed, so should be repeatable for different deploys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">randomPet</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// PetName returns a unique petname suffix for easy string concantenation for logical resources.
</span></span></span><span class="line"><span class="cl"><span class="c1">// This is formatted as `-adjective-animal` with a preceding.
</span></span></span><span class="line"><span class="cl"><span class="c1">// You&#39;d join like `_, err = appsv1.NewDeployment(ctx, &#34;myapp&#34; + config.PetNameSuffix(), nil)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Clusters</span><span class="p">)</span> <span class="nf">PetNameSuffix</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Calculate a seed value based on cluster name and then generate a random petname for the reosurces so that the logical names stay truly unique even in multi-cluster environments.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">setSeed</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s">&#34;-&#34;</span> <span class="o">+</span> <span class="nf">animalString</span><span class="p">()</span> <span class="c1">// Random based on seed, so should be repeatable for different deploys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="quick-and-dirty-option" class="headerLink">
    <a href="#quick-and-dirty-option" class="header-mark"></a>Quick and Dirty Option</h2><p>If you just want to do it all in <code>main()</code> and ignore the frowning of the &ldquo;best practice police&rdquo; just inline it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">calcSeed</span> <span class="o">:=</span> <span class="nf">FNV64a</span><span class="p">(</span><span class="nx">cluster</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">v</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">calcSeed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">animal</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">Animal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">adjective</span> <span class="o">:=</span> <span class="nx">gofakeit</span><span class="p">.</span><span class="nf">AdjectiveDescriptive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">randomPetCalc</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">adjective</span><span class="p">,</span> <span class="nx">animal</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Random Pet Calculated at Runtime: %s\n&#34;</span><span class="p">,</span> <span class="nx">randomPetCalc</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="using-in-loop" class="headerLink">
    <a href="#using-in-loop" class="header-mark"></a>Using in Loop</h2><p>Note that this would probably have issues if you were trying to update the seed in goroutines as I believe it&rsquo;s a global variable.
However, it works great when you need to do something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cluster</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">clusterList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">suffix</span> <span class="o">:=</span> <span class="nx">cluster</span><span class="p">.</span><span class="nf">PetNameSuffix</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="p">=</span> <span class="nx">ingress</span><span class="p">.</span><span class="nf">NetworkingIngress</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">suffix</span><span class="p">)</span> <span class="c1">// ... etc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap-Up</h2><p>I got here thanks to the help of folks in the Pulumi slack + Github discussions.
I&rsquo;ve found it&rsquo;s a common question.
I recommended they beef up some good examples of using the random provider like this.
However, I&rsquo;m not certain it fits Pulumi&rsquo;s &ldquo;promise&rdquo; model quite the same as it was with Terraform.
I&rsquo;m not versed enough in the architecture to understand why it worked for Terraform but not with Pulumi, but this &ldquo;workaround&rdquo; using normal Go code seems to work fine.
I&rsquo;m really appreciating the value of having access to a full fledged programming language in my infrastructure work, including Kubernetes, even if this entails a little more complexity up front.</p>
<h2 id="further-reading" class="headerLink">
    <a href="#further-reading" class="header-mark"></a>Further Reading</h2><ul>
<li><a href="https://github.com/pulumi/pulumi/discussions/9207" target="_blank" rel="noopener noreferrer">Using random resource in plans with Go? · Discussion #9207 · pulumi/pulumi · GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/discussions/9205" target="_blank" rel="noopener noreferrer">How do you approach passing around ID&rsquo;s for resources without it becoming a hot mess? · Discussion #9205 · pulumi/pulumi · GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/discussions/9216" target="_blank" rel="noopener noreferrer">Unique ComponentResource Names With Random Suffix · Discussion #9216 · pulumi/pulumi · GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/discussions/9250" target="_blank" rel="noopener noreferrer">Using ComponentResource as logical namespace · Discussion #9250 · pulumi/pulumi · GitHub</a></li>
<li><a href="https://github.com/pulumi/pulumi/issues/5234#issuecomment-697966379" target="_blank" rel="noopener noreferrer">Cannot use Output as logical resource name · Issue #5234 · pulumi/pulumi · GitHub</a></li>
<li><a href="https://www.pulumi.com/docs/intro/concepts/inputs-outputs/" target="_blank" rel="noopener noreferrer">Inputs and Outputs | Pulumi Docs</a></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Remove Pending Operations From Pulumi State
    </title>
    <link>
        https://www.sheldonhull.com/remove-pending-operations-from-pulumi-state/
    </link>
    <pubDate>
        Thu, 24 Mar 2022 18:39:42 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/remove-pending-operations-from-pulumi-state/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>If you need to work through some issues with a deployment and remove a pending operation in Pulumi state file, you can do this pretty easily manually, or save a quick bit of scrolling and use <code>gojq</code> (or <code>jq</code> if you want).</p>
<ul>
<li>Export: <code>pulumi stack export --file state.json</code></li>
<li>Align formatting: <code>cat state.json | gojq &gt; stateFormatted.json</code></li>
<li>Remove pending operation: <code>cat stateFormatted.json | gojq '.deployment.pending_operations = []' &gt; stateNew.json</code></li>
<li>Now you can compare the results without any whitespace variance.</li>
<li>Import: <code>pulumi stack import --file stateNew.json</code></li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        First Pass With Pulumi
    </title>
    <link>
        https://www.sheldonhull.com/first-pass-with-pulumi/
    </link>
    <pubDate>
        Tue, 10 Aug 2021 20:43:06 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/first-pass-with-pulumi/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="why" class="headerLink">
    <a href="#why" class="header-mark"></a>Why</h2><p>Instead of learning a new domain specific language that wraps up cloud provider API&rsquo;s, this let&rsquo;s the developer use their preferred programming language, while solving several problems that using the API&rsquo;s directly don&rsquo;t solve.</p>
<ul>
<li>Ensure the deployment captures a state file of the changes made.</li>
<li>Workflow around the previews and deployments.</li>
<li>Easily automated policy checks and tests.</li>
</ul>
<p>This can be a really useful tool to bring infrastructure code maintainability directly into the the lifecycle of the application.</p>
<p>It&rsquo;s subjective to those in DevOps whether this would also apply for &ldquo;Day 0-2&rdquo; type operations, which are typically less frequently changed resources such as account settings, VPC, and other more static resources.</p>
<p>However, with a team experienced with Go or other tooling, I could see that this would provide a way to have much more programmatic control, loops, and other external libraries used, without resorting to the HCL DSL way of doing resource looping and inputs.</p>
<h2 id="first-pass" class="headerLink">
    <a href="#first-pass" class="header-mark"></a>First Pass</h2><p>First impression was very positive!</p>
<p>Basic steps:</p>
<ul>
<li><code>brew install pulumi</code></li>
<li><code>pulumi new aws-go</code></li>
<li>Entered name of test stack such as <code>aws-vpc</code>.</li>
<li>Copied the VPC snippet from their docs and then plugged in my own tag for naming, which by default wasn&rsquo;t included.</li>
<li>Reproduced the example for <code>pulumi.String()</code>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">petname</span> <span class="s">&#34;github.com/dustinkirkland/golang-petname&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ec2&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;github.com/pulumi/pulumi/sdk/v3/go/pulumi/config&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">words</span>     <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">Int</span><span class="p">(</span><span class="s">&#34;words&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;The number of words in the pet name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">separator</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;separator&#34;</span><span class="p">,</span> <span class="s">&#34;-&#34;</span><span class="p">,</span> <span class="s">&#34;The separator between words in the pet name&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pulumi</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="o">*</span><span class="nx">pulumi</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conf</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stage</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Require</span><span class="p">(</span><span class="s">&#34;stage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">petname</span> <span class="o">:=</span> <span class="nx">petname</span><span class="p">.</span><span class="nf">Generate</span><span class="p">(</span><span class="o">*</span><span class="nx">words</span><span class="p">,</span> <span class="o">*</span><span class="nx">separator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ec2</span><span class="p">.</span><span class="nf">NewVpc</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">stage</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">ec2</span><span class="p">.</span><span class="nx">VpcArgs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">CidrBlock</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;10.0.0.0/16&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Tags</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nx">StringMap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="s">&#34;Name&#34;</span><span class="p">:</span> <span class="nx">pulumi</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">stage</span><span class="p">,</span> <span class="nx">petname</span><span class="p">},</span> <span class="s">&#34;-&#34;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="positive-observations" class="headerLink">
    <a href="#positive-observations" class="header-mark"></a>Positive Observations</h2><ul>
<li>Running <code>pulumi destroy</code> left the stack in the console for full plan history and auditing.
To remove the stack from the web you&rsquo;d run: <code>pulumi stack rm dev</code>.
This is similar to how terraform cloud workspaces work and gives confidence of easier auditing by default.</li>
<li>The console experience and browser integration was beautifully done.</li>
<li><code>pulumi preview --emoji</code> provided a very clean and succint summary of changes.</li>
<li><code>pulumi up</code> also was very clean, and allowed a selection to expand the details as well.</li>
<li>Browser for stack provides full metadata detail, resource breakdown, audit history, and more.</li>
</ul>
<p><figure><a class="lightgallery" href="/images/2021-08-10-15.47.41-pulumi-preview.png" title="Great Console Preview &amp;amp; Interaction Experience" data-thumbnail="/images/2021-08-10-15.47.41-pulumi-preview.png" data-sub-html="<h2>Great Console Preview &amp; Interaction Experience</h2><p>Great Console Preview &amp;amp; Interaction Experience</p>">
        
    </a><figcaption class="image-caption">Great Console Preview & Interaction Experience</figcaption>
    </figure></p>
<ul>
<li>
<p>The Pulumi docs for Azure DevOps were pretty solid!
Full detail and walk through.
As an experienced PowerShell developer, I was pleasantly suprised by quality PowerShell code that overall was structured well.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
</li>
<li>
<p>Set some values via yaml easily by: <code>'pulumi config set --path 'stage' 'dev'</code> which results in:</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mystack:stage</span><span class="p">:</span><span class="w"> </span><span class="l">dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">aws:region</span><span class="p">:</span><span class="w"> </span><span class="l">myregion</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This is then read via:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">conf</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">stage</span> <span class="o">:=</span> <span class="nx">conf</span><span class="p">.</span><span class="nf">Require</span><span class="p">(</span><span class="s">&#34;stage&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="things-to-improve" class="headerLink">
    <a href="#things-to-improve" class="header-mark"></a>Things To Improve</h2><ul>
<li>Missing the benefit of Terraform module registry.</li>
<li>Pulumi Crosswalk sounds pretty awesome to help with this.
However, I wasn&rsquo;t able to find the equivalent of a &ldquo;crosswalk module library&rdquo; to browse so that part might be a future improvement.</li>
</ul>
<p>This document link: <a href="https://www.pulumi.com/docs/guides/crosswalk/aws/vpc/" target="_blank" rel="noopener noreferrer">AWS Virtual Private Cloud (VPC) | Pulumi</a> seemed great as a tutorial, but wasn&rsquo;t clear immediately on how I could use with Go.</p>
<p>I looked at the <a href="https://pkg.go.dev/github.com/pulumi/pulumi-aws/sdk/v4@v4.15.0/go/aws" target="_blank" rel="noopener noreferrer">aws · pkg.go.dev</a> but didn&rsquo;t see any equivalent to the documented <code>awsx</code> package shown from nodejs library.</p>
<p>Finally, found my answer.</p>
<blockquote>
<p>Pulumi Crosswalk for AWS is currently supported only in Node.js (JavaScript or TypeScript) languages. Support for other languages, including Python, is on the future roadmap. <a href="https://www.pulumi.com/docs/guides/crosswalk/aws/#what-languages-are-supported" target="_blank" rel="noopener noreferrer">Pulumi Crosswalk for AWS | Pulumi</a></p>
</blockquote>
<p>I wish this was put as a big disclaimer right up at the top of the crosswalk section to ensure it was very clear.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>This feels very similar in style to the AWS SDK which doesn&rsquo;t allow just string values, but requires pointers to strings and thus wraps up the strings with expressions such as <code>aws.String(</code>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Subjective, but I noticed boolean values instead of switches, which would slightly simplify the build scripts, but is more of a &ldquo;nit&rdquo; than a critical issue. Using if blocks instead of switch might also clean things up, but overall the script was pretty well written, which seems rare in vendor provided PowerShell examples. 👏&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Use Driftctl to Detect Infra Drift
    </title>
    <link>
        https://www.sheldonhull.com/use-driftctl-to-detect-infra-drift/
    </link>
    <pubDate>
        Mon, 12 Jul 2021 15:08:30 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/use-driftctl-to-detect-infra-drift/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Use <a href="https://github.com/cloudskiff/driftctl" target="_blank" rel="noopener noreferrer">Driftctl</a> to detect drift in your your infrastructure.
This snippet generates a <a href="https://driftctl.com/html-reports/" target="_blank" rel="noopener noreferrer">html report</a> to show coverage and drift figures of the target.</p>
<p>For multiple states, you&rsquo;ll need to adapt this to provide more <code>--from</code> paths to ensure all state files are used to identify coverage.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$S3BucketUri</span> <span class="p">=</span> <span class="s2">&#34;terraform-states-</span><span class="nv">$AWS_ACCOUNT_NUMBER</span><span class="s2">/</span><span class="nv">$AWS_REGION</span><span class="s2">/</span><span class="nv">$TERRAFORMMODULE</span><span class="s2">/terraform.tfstate&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Date</span> <span class="p">=</span> <span class="vm">$</span><span class="p">(</span><span class="nb">Get-Date</span> <span class="n">-Format</span> <span class="s1">&#39;yyyy-MM-dd-HHmmss&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ArtifactDirectory</span> <span class="p">=</span> <span class="p">(</span><span class="nb">New-Item</span> <span class="s1">&#39;artifacts&#39;</span> <span class="n">-ItemType</span> <span class="n">Directory</span> <span class="n">-Force</span><span class="p">).</span><span class="py">FullName</span>
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span><span class="n">docker</span> <span class="n">run</span> <span class="n">-t</span> <span class="p">-</span><span class="n">-rm</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="p">${</span><span class="n">PWD</span><span class="p">}</span><span class="err">:</span><span class="p">/</span><span class="n">app</span><span class="err">:</span><span class="n">rw</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.driftctl:/root/.driftctl&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-v</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.aws:/root/.aws:ro&#34;</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl">    <span class="n">-e</span> <span class="s2">&#34;AWS_PROFILE=default&#34;</span> <span class="p">`</span> <span class="c"># Replace this with your aws profile name if you have multiple profiles</span>
</span></span><span class="line"><span class="cl">    <span class="n">cloudskiff</span><span class="p">/</span><span class="n">driftctl</span> <span class="n">scan</span> <span class="p">-</span><span class="n">-from</span> <span class="s2">&#34;tfstate+s3://</span><span class="nv">$S3BucketUri</span><span class="s2">&#34;</span> <span class="p">-</span><span class="n">-output</span> <span class="s2">&#34;html://</span><span class="nv">$ArtifactDirectory</span><span class="s2">/driftctl-report-</span><span class="nv">$Date</span><span class="s2">.html&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Optionally, you can adjust to recursively scan the state file of an entire bucket (say if using Terragrunt to store in special key prefixes).</p>
<ul>
<li>Change to <code>--from &quot;tfstate+s3://mybucket/myprefix&quot;</code> without requiring the full path to a single tfstate file.</li>
<li>Recursively search if in many subfolders with: <code>**/*.tfstate</code>.</li>
</ul>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Getting Started With Terraform
    </title>
    <link>
        https://www.sheldonhull.com/getting-started-with-terraform/
    </link>
    <pubDate>
        Thu, 07 Nov 2019 07:30:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/getting-started-with-terraform/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Updated 2020-07
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><ul>
<li>Added comments about brand new Terraform users ignoring Terraform Cloud for first time tests.</li>
<li>Added comment about pulling credentials using data source instead of environment variables for AWS as a more advanced option to consider in the future.</li>
<li>Replaced details on creating terraform credential file with the new <code>tf login</code> command</li>
</ul>
</div>
    </div>
  </div>
<p>Getting started with using Terraform for infrastructure can be a bit daunting if you&rsquo;ve not dived into this stuff before.
I put this together as a write up for those looking to get their feet wet and have a better idea of where to go for getting some momentum in starting.
There are some assumptions in this, such as basic familiarity with git for source control automation, basic command line usage, and basic cloud familiarity.</p>
<p>If time permits, I plan on writing up some more detailed walk through in future posts on Terraform iteration methods, object types, dynamic data inputs, and other things I&rsquo;ve explored.
However, what I&rsquo;ve found is just getting the initial start seems to be a blocker for many people interested in trying it.
Hopefully, this will give someone a head start on getting a basic plan going so they can understand how this works a little better and the other more detailed tutorials that abound will make more sense then.
Give this post a clap or leave a comment if it helps you or you have any feedback. Cheers! :cheers:</p>
<h2 id="purpose-of-this-post" class="headerLink">
    <a href="#purpose-of-this-post" class="header-mark"></a>Purpose of This Post</h2><div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Using Terraform Cloud 2020-07
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">If you are brand new to Terraform, then consider ignoring the &ldquo;backend&rdquo; section.
This will have all the artifacts that Terraform produces (such as the state file) just sit in your local directory.
In retrospect, Terraform Cloud intermixed with getting up and running as a new user might add more complication than required.</div>
    </div>
  </div>
<p>In technical documentation, there is a difference between a tutorial and a getting started. The getting started here is going to focus just on getting up and running, not on all the concepts about infrastructure as code.
I found that just doing it the first time was the hardest thing.
Terminology about modules and re-usability at the beginning of my efforts with Terraform went straight over my head as I couldn&rsquo;t fully wrap my understanding around how it would work.
Now that I&rsquo;ve gotten a lot more experience with Terraform for various projects, I&rsquo;ve got some personal &ldquo;best-practices&rdquo; that I&rsquo;ve found as well as insight from the community.</p>
<p>That&rsquo;s for another day &#x1f601;</p>
<p>Let&rsquo;s just make sure you can get up and running with a basic deployment Terraform deployment from the scratch.</p>
<p>I had minimal Cloudformation authoring experience, so this was new stuff to me at the time.</p>
<h2 id="what-about-cloudformation" class="headerLink">
    <a href="#what-about-cloudformation" class="header-mark"></a>What about Cloudformation?</h2><p>More knowledgeable people than me have written about this. I&rsquo;ll just say these personal subjective observations:</p>
<ol>
<li>Terraform is recognized for being a great tool in the industry, it&rsquo;s not some &ldquo;indie open source project about to fail&rdquo;. Hashicorp has some serious vision.</li>
<li>Just because you aren&rsquo;t going &ldquo;cross provider&rdquo; with Azure and AWS doesn&rsquo;t rule out Terraform. You aren&rsquo;t necessarily gaining anything special by &ldquo;sticking with native&rdquo; AWS CF, like you might think.</li>
<li>Terraform&rsquo;s much more succinct, less prone to whitespace/indentation failures.</li>
<li>IMO re-usability of Terraform provides itself to a better team collaborative experience.</li>
<li>Terraform&rsquo;s preview of changes is more intuitive to me. Less nervous to deploy stuff.</li>
<li>I just like HCL (Hashicorps DSL) better than writing YAML docs.</li>
<li>If you are writing YAML without any generator&hellip; just why!</li>
</ol>
<h2 id="resources" class="headerLink">
    <a href="#resources" class="header-mark"></a>Resources</h2><table>
<thead>
<tr>
<th>Links</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.terraform.io/docs/commands/cli-config.html" target="_blank" rel="noopener noreferrer">Terraform Documentation Reference</a></td>
<td>Terraform Documentation for CLI</td>
</tr>
<tr>
<td><a href="http://terraform.io/docs/providers/aws" target="_blank" rel="noopener noreferrer">Terraform Documentation For AWS</a></td>
<td>Terraform AWS Provider Documentation</td>
</tr>
</tbody>
</table>
<h2 id="setup" class="headerLink">
    <a href="#setup" class="header-mark"></a>Setup</h2><h3 id="installation-and-setup" class="headerLink">
    <a href="#installation-and-setup" class="header-mark"></a>Installation and setup</h3><p>Install chocolatey via command prompt as administrator</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">@</span><span class="s2">&#34;</span><span class="nv">%SystemRoot%</span><span class="s2">\System32\WindowsPowerShell\v1.0\powershell.exe&#34;</span> -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command <span class="s2">&#34;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&#34;</span> <span class="p">&amp;&amp;</span> <span class="k">SET</span> <span class="s2">&#34;PATH=</span><span class="nv">%PATH%</span><span class="s2">;</span><span class="nv">%ALLUSERSPROFILE%</span><span class="s2">\chocolatey\bin&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>For macOS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew cask install terraform
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="terraform-cloud-setup" class="headerLink">
    <a href="#terraform-cloud-setup" class="header-mark"></a>Terraform Cloud Setup</h3><div
    class="details admonition warning
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-exclamation-triangle fa-fw"
      ></i>
      Subscription
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">This will require a Terraform Cloud account.
At the time of this post they have a plan for around 5 users for free with a few features turned off.</div>
    </div>
  </div>
<p>Setup your <a href="https://app.terraform.io/signup/account" target="_blank" rel="noopener noreferrer">Terraform App Account</a> and <em>make sure to enable 2FA</em>.</p>
<p>Once you&rsquo;ve been added, create a personal access token at your user settings (this is personal, not team based)</p>
<p>If you are using Terraform Cloud, run <code>tf login</code> to generate your local credential file to allow connecting to Terraform Cloud and easily using the registry and remote state workspaces provided.</p>
<h2 id="creating-your-first-project" class="headerLink">
    <a href="#creating-your-first-project" class="header-mark"></a>Creating Your First Project</h2><p>Create <code>main.tf</code>. It will be the first file you create.
<script src="https://gist.github.com/sheldonhull/95c3f9533b2111d7d9fa40ff90a917e3.js?file=main.tf"></script>
</p>
<p>Create <code>provider.tf</code></p>
<script src="https://gist.github.com/sheldonhull/95c3f9533b2111d7d9fa40ff90a917e3.js?file=provider.tf"></script>

<p>Create <code>terraform.auto.tfvars</code></p>
<p>Note that if you try to create this file with the <code>terraform.tfvars</code> name, it won&rsquo;t work if using Terraform Cloud, as tfvars get generated dynamically from the variables setup in the Cloud workspace.</p>
<script src="https://gist.github.com/sheldonhull/95c3f9533b2111d7d9fa40ff90a917e3.js?file=terraform.auto.tfvars"></script>

<p>Create <code>variables.tf</code> which is going to house all the input variables we want to declare.</p>
<script src="https://gist.github.com/sheldonhull/95c3f9533b2111d7d9fa40ff90a917e3.js?file=variables.tf"></script>

<p>Create <code>iam.tf</code> which will provide a nice low risk resource to create that will show you how to use string interpolation for dynamic names in the most simple way, as well as the way to leverage <code>EOT</code> syntax to easily escape mutliline strings. However, if you see yourself doing this constantly, you might reevaluate your approach to ensure you are using objects and properties as much as possible and not just strings.</p>
<script src="https://gist.github.com/sheldonhull/95c3f9533b2111d7d9fa40ff90a917e3.js?file=iam.tf"></script>

<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      HCL Multiline String Syntax
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">If you use <code>&lt;&lt;-EOT</code> you get a nice little benefit that&rsquo;s not well documented. The <code>-</code> means it strings buffering whitespace for the following lines. This can allow you to keep your content indented and if you preface the first line with 6 spaces, then all the following lines trim 6 spaces as well to allow you to avoid a bunch of difficult to read string blocks.</div>
    </div>
  </div>
<p>You&rsquo;ll likely want to use a workspace with Terraform to organize this work, so instead of using the default, use the command</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-terraform" data-lang="terraform"><span class="line"><span class="cl"><span class="nx">terraform</span> <span class="nx">workspace</span> <span class="nx">new</span> <span class="nx">qa</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Terraform should select this new workspace by default. You can list the current workspaces using <code>terraform workspace list</code> and then select another one later if you wish by running <code>terraform workspace select qa</code>.</p>
<div
    class="details admonition warning
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-exclamation-triangle fa-fw"
      ></i>
      Terraform Workspace Naming
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Personally, I&rsquo;d recommend to not drive much of your naming or other configuration based on the workspace name, and instead use variables.</p>
<p>Terraform Cloud behavior with trying to use workspace names at the time of this post was not what I expected, so I ended up removing my dependency on workspace names being important for the configuration. See <a href="https://github.com/hashicorp/terraform/issues/22802#issuecomment-544499610" target="_blank" rel="noopener noreferrer">GitHub Issue</a></p>
<p>Instead, I use it as metadata only to organize the workspaces, not try to build configuration based heavily on using workspace name.</p>
</div>
    </div>
  </div>
<h2 id="deploying-infrastructure" class="headerLink">
    <a href="#deploying-infrastructure" class="header-mark"></a>Deploying Infrastructure</h2><p>Deploying is as simple as running <code>terraform apply</code>. You&rsquo;ll get a preview of the plan before apply, and then you can approve it to actually apply.</p>
<h3 id="if-you-connected-this-to-terraform-cloud" class="headerLink">
    <a href="#if-you-connected-this-to-terraform-cloud" class="header-mark"></a>If You Connected This to Terraform Cloud</h3><p>This is assuming you are running via Terraform Cloud.
To run locally, you&rsquo;ll want to go to the workspace you created in Terraform Cloud and in the General Settings set to run locally instead of remote.</p>
<p>This means you&rsquo;ll be able to run the apply directly on your machine instead of running it from the remote location.
Running remote is great, but for this to work you need to edit your Terraform remote cloud workspace and add the AWS access keys, as the job is actually running in the remote context and not using your local machine credentials.</p>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Terraform Cloud Credentials
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">My preferred solution for this is to setup another Terraform workspace to create the credentials and then call this datasource to provide me with access instead of having to configure environment variables per workspace.
This is a more advanced operation and not required on your first go-round, but keep it in mind as you scale up to managing many workspaces later on.</div>
    </div>
  </div>
<p>Connecting your git repository to your Terraform workspace can also be done for automatically planning on commit.
This forces changes to come through your git commits instead of being able to run locally, which can be great for ensuring source control truly is the equivalent of your release when working with a team.</p>
<h2 id="tearing-down-infrastructure" class="headerLink">
    <a href="#tearing-down-infrastructure" class="header-mark"></a>Tearing Down Infrastructure</h2><p>To tear down the infrastructure we just deployed, you can run: <code>terraform destroy</code> and approve the resulting preview it gives you.</p>
<p>If you are using Terraform Cloud, in order to destroy a remote workspace (by queuing the destroy then destroying the workspace fully), you&rsquo;ll need to ensure the environment variable is set in the remote workspace for <code>CONFIRM_DESTROY = 1</code></p>
<h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap up</h2><p>Terraform documentation is pretty solid on all the provider resources, so you can normally copy and paste (or use vscode extension mentioned).
Another great way to learn is to look at github and the various Terraform modules that have been published.
You can see how they structure their code a bit better and learn from that as well.</p>
<p>If you are using Visual Studio Code, also download the Hashicorp Terraform extension for extra support.</p>
<p>Good luck! If any steps were unclear or confusing please put in a comment and I&rsquo;ll do my best to improve this for an initial on-boarding experience for a new Terraform user.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>

<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Kubernetes - Tag - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/tags/kubernetes/</link>
        <description>Kubernetes - Tag - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 10 Mar 2022 19:13:52 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/tags/kubernetes/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Go Templates With Kubectl
    </title>
    <link>
        https://www.sheldonhull.com/go-templates-with-kubectl/
    </link>
    <pubDate>
        Thu, 10 Mar 2022 19:13:52 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/go-templates-with-kubectl/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>An alternative to using jsonpath with kubectl is go templates!</p>
<p>Try switching this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl get serviceaccount myserviceaccount --context supercoolcontext --namespace themagicalcloud -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.secrets[0].name}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="sb">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">To this and it should work just the same.
</span></span><span class="line"><span class="cl">Since I know go templates pretty well, this is a good alternative <span class="k">for</span> jsonpath syntax.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sb">````</span>shell
</span></span><span class="line"><span class="cl">kubectl get serviceaccount myserviceaccount --context supercoolcontext --namespace themagicalcloud -o go-template<span class="o">=</span><span class="s1">&#39;{{range .secrets }}{{.name}}{{end}}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="sb">```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Further reading:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- <span class="o">[</span>List Container images using a go-template instead of jsonpath<span class="o">](</span>https://kubernetes.io/docs/tasks/access-application-cluster/list-all-running-container-images/#list-container-images-using-a-go-template-instead-of-jsonpath<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    </description>
</item>


<item>
    <title>
        Pulumi Round 2
    </title>
    <link>
        https://www.sheldonhull.com/pulumi-round-2/
    </link>
    <pubDate>
        Fri, 28 Jan 2022 19:40:41 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/pulumi-round-2/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>This is not a comprehensive article, but more a log of the issues and wins as I work through Pulumi adoption.</p>
<h2 id="tldr" class="headerLink">
    <a href="#tldr" class="header-mark"></a>tl;dr</h2><ul>
<li>Pulumi is pretty powerful.</li>
<li>Once you get beyond the basics, it requires a lot of effort since the tooling doesn&rsquo;t have as many examples as I&rsquo;d hope.
This is especially true for Kubernetes.
It&rsquo;s a lot easier to get moving on other providers.</li>
<li>It&rsquo;s more intensive of a pilot to do complex things IMO than Terraform, because you aren&rsquo;t getting pre-built modules that just have all the stack done automatically (at least in Go).<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Certain things that were painful in Terraform just work in Pulumi.
For example, renaming the underlying org was super easy, removing stuck items from state, and other actions that with Terraform are much trickier.</li>
</ul>
<h2 id="where-i-started" class="headerLink">
    <a href="#where-i-started" class="header-mark"></a>Where I Started</h2><ul>
<li>I have replicated basically what Helm gives you for an external api template out of the box and am doing this in Pulumi.</li>
<li>This uses the Pulumi config and loads into a config struct.</li>
<li>I&rsquo;m running CICD with this to build and deploy a container, and finally run a task to run Pulumi against a Kubernetes cluster to apply an updated deployment based on that new semver tag.</li>
</ul>
<h2 id="challenge-1-authenticating-via-k8-namespace-scoped-service-account" class="headerLink">
    <a href="#challenge-1-authenticating-via-k8-namespace-scoped-service-account" class="header-mark"></a>Challenge 1: Authenticating Via K8 Namespace Scoped Service Account</h2><p>Figuring out the balance between default provider that inherits your Kubeconfig and being more explicit by configuring this myself has been a challenge.</p>
<p>I took two days to work through the proper Service account level authorization, but finally with the help of a little <a href="https://github.com/magefile/mage" target="_blank" rel="noopener noreferrer">Mage</a> I have a running login task that wraps up a sequence of steps for me to authenticate purely based on K8 Service account credentials.</p>
<ul>
<li>TODO: Also plan on checking out the Azure Key Vault integration, as this is pretty neat. You can set it as the backend provider for your secret rather than Pulumi.</li>
</ul>
<h3 id="attempting-to-embed-service-account-credentials-in-stack" class="headerLink">
    <a href="#attempting-to-embed-service-account-credentials-in-stack" class="header-mark"></a>Attempting to Embed Service Account Credentials in Stack</h3><p>Pulumi does per stack level encryption of secrets, so I thought this might be really nice to setup and try.
This would mean any of my team could run the plan with the specific service account credentials already embedded to quickly apply a development fix or test against a development enviornment.</p>
<p>This is in constrast this to building a kubeconfig locally and pointing to that.
That works, but does feel more brittle.</p>
<p>I tried this:</p>
<pre><code>pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev config set --secret --path 'kubernetes:kubeconfig' &quot;$(cat /workspaces/myproject/.cached/.kube/tmp.kube.config)&quot;
</code></pre>
<blockquote>
<p>NOTE: Optionally use without <code>--path</code>.</p>
</blockquote>
<p>This temporary configuration I generated via the kubectl commands for setup.</p>
<p>Now I see:</p>
<pre><code>config:
    kubernetes:cluster: mycluster
    kubernetes:context: mycontext
    kubernetes:kubeconfig:
        secure: mysupersecretencryptedvaluebyPulumipus
</code></pre>
<p>Next I made some changes to the Pulumi plan that checked for <code>KUBECONFIG</code> and allowed the override as usual, however if not provided it defaulted to the value stored in the configuration.
Will think on that and probably remove the extra code later.</p>
<p>Didn&rsquo;t get this to work, so I reverted back to passing in the generated kubeconfig file instead.
This was set by a command like this:</p>
<pre><code>pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev config set --path 'kubernetes:kubeconfig' /workspaces/myproject/.cached/.kube/tmp.kube.config
</code></pre>
<p>Failure.</p>
<p>I still kept getting the dreaded:</p>
<pre><code>configured Kubernetes cluster is unreachable: failed to parse kubeconfig data in kubernetes:config:kubeconfig
</code></pre>
<p>I tried <code>KUBECONFIG=/workspaces/myproject/.cached/.kube/tmp.kube.config pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev up --diff</code> and it detected the new <code>kubernetes:kubeconfig</code> and put in the state.</p>
<p>✅ BOOM! Once I did this refresh of the state, it seemed to properly allow me to connect.</p>
<p>I found that ensuring <code>KUBECONFIG=path pulumi ...</code> helped a lot, but I think the KUBECONFIG path in the state file also mattered and had to be refreshed.</p>
<p>Ok&hellip; to ensure this was the issue I did this test:</p>
<ol>
<li>Stop using my credential and point to the service account generated kubeconfig.</li>
<li>Run <code>KUBECONFIG={newkubeconfig} pulumi destroy</code>.
<ol>
<li>It detected the change when running up, I just didn&rsquo;t apply.</li>
</ol>
</li>
<li>Deletion worked.</li>
</ol>
<p>To me this points towards the <code>KUBECONFIG</code> correctly being used when passed into the provider, so I can run without refreshing the state even though a refresh/up will indicated it detected the change.</p>
<p>I probably need to trim this code, but to support KUBECONFIG explicitly being provided I did something like this:</p>
<script src="https://gist.github.com/sheldonhull/764d2702bf9e783fca0263bbabd598a7.js"></script>

<h2 id="challenge-handle-config-values-that-change" class="headerLink">
    <a href="#challenge-handle-config-values-that-change" class="header-mark"></a>Challenge: Handle config values that change</h2><p>I thought maybe I could dynamically set the kubeconfig at runtime using the <code>--config</code> flag.
I looked in the GitHub repo and couldn&rsquo;t find any examples, and the cli doesn&rsquo;t provide any I could see.</p>
<p>Here&rsquo;s a little taste of what I ran:</p>
<pre><code>    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig /workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig' '/workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig: /workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig','/workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig,/workspaces/myproject/.cached/.kube/tmp.kube.config'
    Pulumi up --diff --refresh --config 'kubernetes:kubeconfig' /workspaces/myproject/.cached/.kube/tmp.kube.config
    Pulumi up --diff --refresh --config '{ &quot;kubernetes:kubeconfig&quot;: /workspaces/myproject/.cached/.kube/tmp.kube.config
    Pulumi up --diff --refresh --config '{ &quot;kubernetes:kubeconfig&quot;: &quot;/workspaces/myproject/.cached/.kube/tmp.kube.config&quot; }'
    Pulumi up --diff --refresh --config '&quot;kubernetes:kubeconfig&quot;: &quot;/workspaces/myproject/.cached/.kube/tmp.kube.config&quot;'
    Pulumi up --diff --refresh --config kubernetes:kubeconfig /workspaces/myproject/.cached/.kube/tmp.kube.config
</code></pre>
<p>The variety of changes this made the kubeconfig were entertaining at least.
I moved on, as this didn&rsquo;t seem to be a valid way to work.</p>
<p>Pretty sure the cli was laughing at me.</p>
<pre><code>    config:
        kubernetes:cluster: mycluster
        kubernetes:context: mycluster
        kubernetes:kubeconfig,/workspaces/myproject/.cached/.kube/tmp.kube.config: &quot;&quot;
        kubernetes:namespace: mynamespace
</code></pre>
<h2 id="challenge-how-do-i-use-replace" class="headerLink">
    <a href="#challenge-how-do-i-use-replace" class="header-mark"></a>Challenge: How Do I Use Replace?</h2><p>While mostly intuitive, the darn cli docs are missing some jump start examples.
I&rsquo;m pretty sure most of us want examples, and I&rsquo;d like to see exhaustive examples on the docs page.</p>
<p>I tried to force a replacement of a deployment:</p>
<pre><code>    pulumi up --diff --replace 'myproject-dev-deployment'    ❌ NOT FOUND
    pulumi up --diff --replace 'kubernetes:apps:Deployment'  ❌ NOT FOUND
</code></pre>
<blockquote>
<p><code>--replace stringArray</code> Specify resources to replace. Multiple resources can be specified using &ndash;replace urn1 &ndash;replace urn2 <a href="https://www.pulumi.com/docs/reference/cli/pulumi_up/" target="_blank" rel="noopener noreferrer">pulumi up docs</a></p>
</blockquote>
<p>Not sure of the urn, as I couldn&rsquo;t find in the state file.
Decided to go with destroy 🔥 and redeploy to be (not)safe.
Hey it&rsquo;s a dev environment after all!</p>
<h2 id="mapping-from-yaml" class="headerLink">
    <a href="#mapping-from-yaml" class="header-mark"></a>Mapping from Yaml</h2><p>Ran into an edge case. I set config values that had a slash.</p>
<pre><code>myconfig:
    subsection:
        io/foo: 123
</code></pre>
<p>This seemed to read all the zero values and couldn&rsquo;t obtain them.
I went and replaced all of these with a command like: <code>pulumi --cwd pulumi/myproject --stack=myorg/myproject/dev config set --path 'data.podannotations.myservice.myport' 80</code>.</p>
<p>No luck.
Figured it might be something to do with maps, but I couldn&rsquo;t find anything with Go having issues with the key value having a slash or such.</p>
<p>Gave this a shot and 🎉 it worked.</p>
<pre><code>type MyConfig struct {
    Onlyyaml          bool   `yaml:&quot;onlyyaml&quot;`
    SpecialNested     struct {
        Enabled              bool   `yaml:&quot;enabled&quot;`
    } `yaml:&quot;specialnested,inline&quot;` // 👈 inline is needed
}
</code></pre>
<p>This parsed the value:</p>
<pre><code>config:
    specialnested:
        enabled: true
</code></pre>
<p>Now I know. I didn&rsquo;t see anything about using this when reading the docs, so that&rsquo;s another one that shows it requires expertise in both Pulumi + the native language to figure out what&rsquo;s wrong.</p>
<blockquote>
<p>Embedded structs are not treated as embedded in YAML by default. To do that add the &ldquo;,inline&rdquo; annotation below. <a href="https://pkg.go.dev/gopkg.in/yaml.v2#Unmarshal" target="_blank" rel="noopener noreferrer">Unmarshal for yaml.v2</a></p>
</blockquote>
<p>I couldn&rsquo;t find the exact package being used due to time, but it&rsquo;s possible that this was forked off the original package here: <a href="https://pkg.go.dev/github.com/pulumi/go-yaml" target="_blank" rel="noopener noreferrer">pulumi-go-yaml</a>.</p>
<h2 id="task-runner" class="headerLink">
    <a href="#task-runner" class="header-mark"></a>Task Runner</h2><p>I standardize all my projects, personal and work with Mage.</p>
<p>Was pretty easy to integrate with pulumi, even though their CLI is pretty awesome and easy to use..
However, I prefer all tools that aren&rsquo;t one off&rsquo;s have a simple standardized way to execute.</p>
<p>For me this entailed: <code>mage pulumi:diff myproject dev</code> and it ensured all the command line flags and such were setup.</p>
<p>I put some sample tasks on my magetools repo: <a href="https://github.com/sheldonhull/magetools/tree/main/examples/pulumi" target="_blank" rel="noopener noreferrer">Magetools - Examples - Pulumi</a>.</p>
<p>Some examples from that:</p>
<pre><code>// Pulumi namespace contains task to help with running Pulumi tools.
type Pulumi mg.Namespace

// Get returns the fully qualified Pulumi stack name, including the org, project, and stage.
// This looks like `myorg/project/stage`.
func GetPulumiStackName(project, stage string) string {
    mtu.CheckPtermDebug()
    return strings.Join([]string{PulumiOrg, project, stage}, &quot;/&quot;)
}


// 🚀 Up 👉 Parameters(project, stack string): Eg: `mage pulumi:up myproject dev`.
// Runs pulumi up/apply to target.
//
// Example: `mage pulumi:up myproject dev`.
func (Pulumi) Up(project, stage string) error {
    mtu.CheckPtermDebug()
    return sh.RunV(
        &quot;pulumi&quot;,
        &quot;--cwd&quot;,
        filepath.Join(PulumiProjectDir, project),
        &quot;--stack=&quot;+GetPulumiStackName(project, stage),
        &quot;up&quot;,
        &quot;--yes&quot;,
        &quot;--emoji&quot;,
    )
}
</code></pre>
<h2 id="my-feedback" class="headerLink">
    <a href="#my-feedback" class="header-mark"></a>My Feedback</h2><ul>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> Provide several examples for using the flags, such as <code>--config</code> as I couldn&rsquo;t figure out how to pass the string array in a way that made sense.</li>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> I&rsquo;ve seen others post on issues as well about confusion with the provider. Much of the examples rely on the default provider.
For me that was problematic when I wanted to try and work locally but then use a service account credential only for pulumi to test.
Make some more examples on how to easily do that.</li>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> Provide help on Stack Overflow, Github Discussions, or a dedicated discourse to promote visibility and knowledge resharing on solutions. Preference would be Github discussions as it&rsquo;s easy to find help inline with issues.
Slack is a terrible place to find info in comparison and responses can be erratic and slow (which I get considering how stretched everyone must be!)</li>
<li><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-6 400H54c-3.3 0-6-2.7-6-6V86c0-3.3 2.7-6 6-6h340c3.3 0 6 2.7 6 6v340c0 3.3-2.7 6-6 6z"/></svg> Maybe the logger makes sense for automation api or something else, but I&rsquo;d love to see the default logger support structured logging (say through zerolog) or something a bit less clunky.
Having to replace the string values like this made from some clunky logging code. <code>_ = ctx.Log.Error(fmt.Sprintf(&quot;Unable to read Kubeconfig override: %q, %v&quot;, kubeConfigOverride, err), nil)</code>.
I&rsquo;d like to just call: <code>pulumi.Log.Info().Str(&quot;myval&quot;,strval).Msg(&quot;this is important&quot;)</code>.</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>They are making progress on this with Crosswalk, but Go isn&rsquo;t in there at this time.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        ]]>
    </description>
</item>


<item>
    <title>
        Helm Is Like Hugo
    </title>
    <link>
        https://www.sheldonhull.com/helm-is-like-hugo/
    </link>
    <pubDate>
        Thu, 16 Dec 2021 18:04:38 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/helm-is-like-hugo/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>Turns out helm is pretty intuitive if you already have been working with something like Hugo, which is Go template driven.</p>
<p>Was able to convert an entire K8 stack to helm with a couple hours of work and render everything.</p>
<p>I have this problem of trying to avoid percieved complex tools in an attempt to reduce &ldquo;another tool&rdquo; syndrome for others I work with.
Sometimes, it&rsquo;s important to keep in mind who is editing and doing the majority of the work, and not worry as much about the long-term solution over delivery.</p>
<p>That&rsquo;s always a tough balance since I tend to think outside the scope of a single team due to the style of work I&rsquo;ve done.
I think I&rsquo;m slowly getting there. 😀</p>

        ]]>
    </description>
</item>


<item>
    <title>
        Incredible setup experience with gitpod
    </title>
    <link>
        https://www.sheldonhull.com/incredible-setup-experience-with-gitpod/
    </link>
    <pubDate>
        Thu, 27 Aug 2020 20:00:00 -0500
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/incredible-setup-experience-with-gitpod/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <p>What a polished setup experience from gitpod. Super impressed as I&rsquo;ve never seen an interactive terraform setup asking for user input.</p>
<p>This basically generated an entire setup for GitPod, and persisted the Terraform plan for the entire stack it created in a directory for management and adjustments as desired.</p>
<p>I&rsquo;m seriously impressed.</p>
<p>Check this out at: <a href="https://bit.ly/2YGACVe" target="_blank" rel="noopener noreferrer">Install on AWS</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># Setup Gitpod with self-setup docker installer</span>
</span></span><span class="line"><span class="cl"><span class="c"># https://www.gitpod.io/docs/self-hosted/latest/install/install-on-aws-script/</span>
</span></span><span class="line"><span class="cl"><span class="c"># Set-Location ./terraform/gitpod</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="n">aws</span><span class="p">.</span><span class="py">tools</span><span class="p">.</span><span class="n">common</span><span class="p">,</span> <span class="n">aws</span><span class="p">.</span><span class="py">tools</span><span class="p">.</span><span class="py">SecurityToken</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Set-AWSCredential</span> <span class="n">-ProfileName</span> <span class="s1">&#39;MyProfileName&#39;</span> <span class="n">-Scope</span> <span class="n">Global</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$ENV:AWS_ACCESS_KEY_ID</span> <span class="p">=</span> <span class="nv">$cred</span><span class="p">.</span><span class="py">GetCredentials</span><span class="p">().</span><span class="py">AccessKey</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ENV:AWS_SECRET_ACCESS_KEY</span> <span class="p">=</span> <span class="nv">$cred</span><span class="p">.</span><span class="py">GetCredentials</span><span class="p">().</span><span class="py">SecretKey</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ENV:AWS_DEFAULT_REGION</span> <span class="p">=</span> <span class="s1">&#39;eu-west-1&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># can&#39;t use STS temporary credentials to create iam resources, so use normal iam credentials</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">run</span> <span class="p">-</span><span class="n">-rm</span> <span class="n">-it</span> <span class="n">-e</span> <span class="n">AWS_ACCESS_KEY_ID</span><span class="p">=</span><span class="nv">$ENV:AWS_ACCESS_KEY_ID</span> <span class="n">-e</span> <span class="n">AWS_SECRET_ACCESS_KEY</span><span class="p">=</span><span class="nv">$ENV:AWS_SECRET_ACCESS_KEY</span> <span class="n">-e</span> <span class="n">AWS_DEFAULT_REGION</span><span class="p">=</span><span class="nv">$ENV:AWS_DEFAULT_REGION</span> <span class="p">`</span>
</span></span><span class="line"><span class="cl"><span class="n">-v</span> <span class="p">${</span><span class="n">PWD</span><span class="p">}/</span><span class="n">awsinstall</span><span class="err">:</span><span class="p">/</span><span class="n">workspace</span> <span class="n">eu</span><span class="p">.</span><span class="py">gcr</span><span class="p">.</span><span class="n">io</span><span class="p">/</span><span class="nb">gitpod-io</span><span class="p">/</span><span class="nb">self-hosted</span><span class="p">/</span><span class="n">installer</span><span class="err">:</span><span class="n">latest</span> <span class="n">aws</span>
</span></span></code></pre></td></tr></table>
</div>
</div>
        ]]>
    </description>
</item>


<item>
    <title>
        kubernetes
    </title>
    <link>
        https://www.sheldonhull.com/notes/development/kubernetes/kubernetes/
    </link>
    <pubDate>
        Mon, 01 Jan 0001 00:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/notes/development/kubernetes/kubernetes/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="deployment-tips" class="headerLink">
    <a href="#deployment-tips" class="header-mark"></a>Deployment Tips</h2><ul>
<li>What imagePullPolicy should I use?
<blockquote>
<p>Even if the imagePullPolicy property is set to Always, it&rsquo;s still efficient, provided the registry is reliably accessible, due to the caching semantics of the underlying image provider.<a href="https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy" target="_blank" rel="noopener noreferrer">image-policy</a></p>
</blockquote>
</li>
</ul>
<h2 id="troubleshooting" class="headerLink">
    <a href="#troubleshooting" class="header-mark"></a>Troubleshooting</h2><div
    class="details admonition note"
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Error: ImagePullBackOff
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>As elucidated in a <a href="https://stackoverflow.com/a/64003061/68698" target="_blank" rel="noopener noreferrer">Stack Overflow answer</a>, <a href="https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images" target="_blank" rel="noopener noreferrer">pre-pulled-images</a> were the solution to my problem.</p>
<p>Complexities can arise from using abstraction tools. The predefined image policies exert a greater influence on the behavior than initially expected.</p>
<blockquote>
<p>The kubelet, by default, tries to pull each image from the specified registry. Nevertheless, if the imagePullPolicy property of the container is set to IfNotPresent or Never, a local image is used (preferentially or exclusively, respectively).</p>
</blockquote>
<p>To load an image, execute a command like this: <code>minikube image load --profile myprofile 'image:latest'</code>.</p>
</div>
    </div>
  </div>

        ]]>
    </description>
</item>
</channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on sheldonhull.com</title>
    <link>https://www.sheldonhull.com/notes/development/go/</link>
    <description>Recent content in go on sheldonhull.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <atom:link href="https://www.sheldonhull.com/notes/development/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go</title>
      <link>https://www.sheldonhull.com/notes/development/go/go/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/go/</guid>
      <description>A cheatsheet to update with what I pickup with Go that I likely need to reference again as a new gopher.</description>
    </item>
    <item>
      <title>Code Coverage</title>
      <link>https://www.sheldonhull.com/notes/development/go/code-coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/code-coverage/</guid>
      <description> Code Coverage Report CodecovCodecov works great for Github repositories.&#xA;Use gopherbadge 1 go install github.com/jpoles1/gopherbadger@master Set ![gopherbadger-tag-do-not-edit]() in the readme. This will be replaced with a code coverage percentage badge. Generate the required code coverage reports using: 1 2 3 go test ./... -coverprofile ./artifacts/cover.out go tool cover -html=./artifacts/cover.out -o ./artifacts/coverage.html gopherbadger -md=&amp;#34;README.md,coverage.md&amp;#34; -tags &amp;#39;unit&amp;#39; </description>
    </item>
    <item>
      <title>Dagger</title>
      <link>https://www.sheldonhull.com/notes/development/go/dagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/dagger/</guid>
      <description>Containerized magic with Go and BuildKit&#xA;I will soon put some experience notes here, as I&amp;rsquo;ve successfully built Angular and Nginx containers with it, which was a great experience. With the upcoming service support, I can foresee even more use cases.&#xA;Example of Building an Angular Project Using mage, here&amp;rsquo;s a demonstration of invoking Mage to build an Angular project without any Angular tooling installed locally.&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 const AngularVersion = &amp;#34;15&amp;#34; // Build runs the Angular build via Dagger.</description>
    </item>
    <item>
      <title>Effective Go</title>
      <link>https://www.sheldonhull.com/notes/development/go/effective-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/effective-go/</guid>
      <description>Top Reference MaterialHere&amp;rsquo;s the reference material I use to help guide me on basic style, design, and general idiomatic Go practices.&#xA;Resource Description Go Style Guide A guide to writing Go code. Uber Go Styleguide A thorough stylistic guide (opinionated, but great explanations on why) Practical Go - Dave Cheney A great practical guide from a well-respected authority in the Go community Effective GoPrinciples I&amp;rsquo;ve gleaned over time and am quoting or bookmarking.</description>
    </item>
    <item>
      <title>Go Logging</title>
      <link>https://www.sheldonhull.com/notes/development/go/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/logging/</guid>
      <description>LoggingAt this stage, I&amp;rsquo;m using zerolog as I found it very easy to get started with structured logs.&#xA;The output of this demo looks pretty good!&#xA;Output From Zerolog Here&amp;rsquo;s a functional demo that can be used to bootstrap a new project with this.</description>
    </item>
    <item>
      <title>Go Modules</title>
      <link>https://www.sheldonhull.com/notes/development/go/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/modules/</guid>
      <description>What are Go Modules?Go Modules are primarily a dependency management solution.&#xA;A module:&#xA;Is primarily a dependency management tool, not a project organization tool. Is imported to get access to public exported members in your own project. One module can produce n binaries. A module can be used in a monorepo or single CLI tool. A module doesn&amp;rsquo;t:&#xA;Handle build or binary path metadata. Have any relationship to the produced artifacts.</description>
    </item>
    <item>
      <title>Go Testing</title>
      <link>https://www.sheldonhull.com/notes/development/go/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/testing/</guid>
      <description>Testing Go test will automatically ignore directories and files starting with . or _. See go command - cmd/go - pkg.go.dev for more details. GotestsumTo install gotestsum, use: go install gotest.tools/gotestsum@latest.&#xA;Then run it like this: gotestsum. Try the alternative formats like: gotestsum --format dots-v2, --format pkgname, or --format testname, based on your requirements.</description>
    </item>
    <item>
      <title>goroutines</title>
      <link>https://www.sheldonhull.com/notes/development/go/goroutines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/goroutines/</guid>
      <description>Resources Resource Notes Goroutines &amp;amp; Closures Important caveat on shadowing variable in loops included Using uiprogress Notes I wrote about trying threadsafe progress bar package Using Goroutines with CLI ToolsRunning CLI tools via goroutines can speed up slow actions like code generation. I prefer to run these types of actions with a buffered channel to throttle the requests and avoid overloading my laptop. üî•&#xA;Here&amp;rsquo;s an example using Pterm output for reporting progress (no progress bar)1.</description>
    </item>
    <item>
      <title>HTTP</title>
      <link>https://www.sheldonhull.com/notes/development/go/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/http/</guid>
      <description>Anonymous ServerMacOS will throw firewall alerts to allow connectivity every time a binary is run that doesn&amp;rsquo;t provide the server address.&#xA;‚ùå What throws the error: http.ListenAndServe(&amp;quot;:&amp;quot;+port, nil) ‚úîÔ∏è What doesn&amp;rsquo;t throw an error: http.ListenAndServe(&amp;quot;127.0.0.1:&amp;quot;+port, nil) While this might be problematic to iron out as a variable if running inside a Docker container needing to talk to the host, it works well for running the binary locally without much change.</description>
    </item>
    <item>
      <title>Mage</title>
      <link>https://www.sheldonhull.com/notes/development/go/mage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/mage/</guid>
      <description>Using Go for Task Running &amp;amp; AutomationMy preferred tool at this time is Mage.&#xA;Mage replaces the need for Bash or PowerShell scripts in your repo for core automation tasks, and provides the benefits of Go (cross-platform, error handling paradigm, readability, performance, etc).&#xA;Getting Started With Mage Use Go Run go install github.com/magefile/mage@latest Run go install github.com/iwittkau/mage-select@latest For asdf: asdf plugin-add mage &amp;amp;&amp;amp; asdf install mage latest &amp;amp;&amp;amp; asdf local mage latest Initialize a New Project Scripts-To-Rule-Them-All-Go: A repo I&amp;rsquo;ve set up as a quick start template for a Mage enabled repository with linting and core structure already in place.</description>
    </item>
    <item>
      <title>Pre-Commit</title>
      <link>https://www.sheldonhull.com/notes/development/go/pre-commit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/pre-commit/</guid>
      <description>Using Pre-Commit ToolingHere&amp;rsquo;s how to set up pre-commit for Go projects.&#xA;Install pre-commit for macOS: brew install pre-commit or see directions for curl/other options for WSL, Windows, Linux, etc. Use the template from TekWizely/pre-commit-golang: Pre-Commit hooks for Golang with support for Modules Several options are provided for fmt oriented commands. Comment out any duplicates that do not apply. Finally, initialize the pre-commit hooks in your repo by running: pre-commit install Validate that everything is working by running: pre-commit run --all-files</description>
    </item>
    <item>
      <title>Using Go Tools</title>
      <link>https://www.sheldonhull.com/notes/development/go/using-go-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/using-go-tools/</guid>
      <description>This is primarily focused on folks who don&amp;rsquo;t use Go tooling everyday, but want to use the Go tools. Maybe you need help getting up and running?&#xA;Go BinariesTools that can compile to a Go binary, such as CLI tools or a web server, can be installed from source easily by running go install.&#xA;However, you require a few things to do this.&#xA;Go installed üòÄ Using aqua makes this easy.</description>
    </item>
    <item>
      <title>VSCode Configuration for Go</title>
      <link>https://www.sheldonhull.com/notes/development/go/vscode-configuration-for-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.sheldonhull.com/notes/development/go/vscode-configuration-for-go/</guid>
      <description>VSCode Custom Tasks Default ShellsThis ensures that default behavior is processed on each OS by customizing the shell to use.&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 { &amp;#34;version&amp;#34;: &amp;#34;2.0.0&amp;#34;, &amp;#34;presentation&amp;#34;: { &amp;#34;echo&amp;#34;: false, &amp;#34;reveal&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;focus&amp;#34;: false, &amp;#34;panel&amp;#34;: &amp;#34;dedicated&amp;#34;, &amp;#34;showReuseMessage&amp;#34;: true }, &amp;#34;linux&amp;#34;: { &amp;#34;options&amp;#34;: { &amp;#34;shell&amp;#34;: { &amp;#34;executable&amp;#34;: &amp;#34;/usr/local/bin/zsh&amp;#34;, &amp;#34;args&amp;#34;: [&amp;#34;-l&amp;#34;, &amp;#34;-c&amp;#34;] } }, &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34; }, &amp;#34;windows&amp;#34;: { &amp;#34;options&amp;#34;: { &amp;#34;shell&amp;#34;: { &amp;#34;executable&amp;#34;: &amp;#34;pwsh&amp;#34; } }, &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34; }, &amp;#34;osx&amp;#34;: { &amp;#34;options&amp;#34;: { &amp;#34;shell&amp;#34;: { &amp;#34;executable&amp;#34;: &amp;#34;/usr/local/bin/zsh&amp;#34;, &amp;#34;args&amp;#34;: [&amp;#34;-l&amp;#34;, &amp;#34;-c&amp;#34;] } }, &amp;#34;type&amp;#34;: &amp;#34;shell&amp;#34; }, &amp;#34;tasks&amp;#34;: [] } Run LintAdd this to your .</description>
    </item>
  </channel>
</rss>

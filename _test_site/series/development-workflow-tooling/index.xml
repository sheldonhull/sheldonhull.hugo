<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc='http://purl.org/dc/elements/1.1/'>
    <channel>
        <title>Development Workflow Tooling - Series - sheldonhull.com</title>
        <link>https://www.sheldonhull.com/series/development-workflow-tooling/</link>
        <description>Development Workflow Tooling - Series - sheldonhull.com</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 04 Nov 2020 07:00:00 &#43;0000</lastBuildDate><atom:link href="https://www.sheldonhull.com/series/development-workflow-tooling/" rel="self" type="application/rss+xml" />

<item>
    <title>
        Consider the Benefits of Powershell for Developer Workflows
    </title>
    <link>
        https://www.sheldonhull.com/consider-the-benefits-of-powershell-for-developer-workflows/
    </link>
    <pubDate>
        Wed, 04 Nov 2020 07:00:00 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/consider-the-benefits-of-powershell-for-developer-workflows/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="who-am-i-talking-to" class="headerLink">
    <a href="#who-am-i-talking-to" class="header-mark"></a>Who Am I Talking To</h2><ul>
<li>You use bash or python.</li>
<li>PowerShell seems wordy, extra verbose, and annoying.</li>
<li>It&rsquo;s a windows thing, you say&hellip; why would I even look at it.</li>
<li>Pry bash out of my fingers if yuo dare (probably not for you üòÅ)</li>
</ul>
<h2 id="what-powershell-is" class="headerLink">
    <a href="#what-powershell-is" class="header-mark"></a>What PowerShell Is</h2><ul>
<li>The best language for automating Windows&hellip; period.</li>
<li>A great language for development tooling and productivity scripts.</li>
<li>One of the best languages for automation with interactivity.
Python is fantastic. The REPL isn&rsquo;t meant for the same interactivity you get with PowerShell.
PowerShell prompt is sorta like mixing Python &amp; fish/bash in a happy marriage.</li>
<li>A rich language (not just scripting) for interacting with AWS using AWS.Tools.</li>
<li>A rich object-oriented pipeline that can handle very complex actions in one-liners based on object-oriented pipelines.</li>
<li>Intuitive and consistent mostly for command discovery.
<ul>
<li>a common complaint from bash pros.</li>
<li>The point of the verbosity <code>Verb-Noun</code> is discoverability. <code>tar</code> for example is a bit harder to figure out than <code>Expand-Archive -Path foo -DestinationPath foo</code></li>
</ul>
</li>
<li>A language with a robust testing framework for unit, integration, infrastructure, or any other kinda testing you want! (Pester is awesome)</li>
</ul>
<h2 id="what-powershell-isnt" class="headerLink">
    <a href="#what-powershell-isnt" class="header-mark"></a>What PowerShell Isn&rsquo;t</h2><ul>
<li>Python ü§£</li>
<li>Good at datascience.</li>
<li>Succinct</li>
<li>Meant for high-concurrency</li>
<li>Good at GUI&rsquo;s&hellip; but come-on we&rsquo;re devs&hellip; guis make us weak üòú</li>
<li>A good webserver</li>
<li>Lots more.</li>
</ul>
<h2 id="the-right-tool-for-the-job" class="headerLink">
    <a href="#the-right-tool-for-the-job" class="header-mark"></a>The Right Tool for the Job</h2><p>I&rsquo;m not trying to tell you never to use bash.
It&rsquo;s what you know, great!</p>
<p>However, I&rsquo;d try to say if you haven&rsquo;t explored it, once you get past some of the paradigm differences, there is a rich robust set of modules and features that can improve most folks workflow.</p>
<h2 id="why-even-consider-powershell" class="headerLink">
    <a href="#why-even-consider-powershell" class="header-mark"></a>Why Even Consider PowerShell</h2><p>As I&rsquo;ve interacted more and more with folks coming from a mostly Linux background, I can appreciate that considering PowerShell seems odd.
It&rsquo;s only recently that it&rsquo;s cross platform in the lifecycle of things, so it&rsquo;s still a new thing to most.</p>
<p>Having been immersed in the .NET world and now working on macOS and using Docker containers running Debian and Ubuntu (sometimes Alpine Linux), I completely get that&rsquo;s not even in most folks purview.</p>
<p>Yet, I think it&rsquo;s worth considering for developer workflows that there is a lot of gain to be had with PowerShell for improving the more complex build and development workflows because of the access to .NET.</p>
<p>No, it&rsquo;s not &ldquo;superior&rdquo;. It&rsquo;s different.
Simple cli bash scripting is great for many things (thus prior article about Improving development workflow <code>Task</code> which uses shell syntax).</p>
<p>The fundemental difference in bash vs PowerShell is really text vs object, in my opinion.
This actually is where much of the value comes in for considering what to use.</p>
<div
    class="details admonition info
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-info-circle fa-fw"
      ></i>
      Go For CLI Tools
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>Go provides a robust cross-platform single binary with autocomplete features and more.</p>
<p>I&rsquo;d say that for things such as exporting pipelines to Excel, and other &ldquo;automation&rdquo; actions it&rsquo;s far more work in Go.</p>
<p>Focus Go on tooling that makes the extra plumbing and stronger typing give benefit rather than just overhead.
AWS SDK operations, serverless/lambda, apis, complex tools like Terraform, and more fit the bill perfectly and are a great use case.</p>
</div>
    </div>
  </div>
<h2 id="scenario-working-with-aws" class="headerLink">
    <a href="#scenario-working-with-aws" class="header-mark"></a>Scenario: Working with AWS</h2><p>If you are working with the AWS SDK, you are working with objects.
This is where the benefit comes in over cli usage.</p>
<p>Instead of parsing json results and using tools like <code>jq</code> to choose arrays, instead, you can interact with the object by named properties very easily.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$Filters</span> <span class="p">=</span> <span class="vm">@</span><span class="p">([</span><span class="no">Amazon.EC2.Model.Filter</span><span class="p">]::</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;tag:is_managed_by&#39;</span><span class="p">,</span><span class="s1">&#39;muppets&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$InstanceCollection</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-EC2Instance</span> <span class="n">-Filter</span> <span class="nv">$Filters</span><span class="p">)).</span><span class="py">Instances</span> <span class="p">|</span> <span class="nb">Select-PSFObject</span> <span class="n">InstanceId</span><span class="p">,</span> <span class="n">PublicIpAddress</span><span class="p">,</span><span class="n">PrivateIpAddress</span><span class="p">,</span><span class="n">Tags</span><span class="p">,</span><span class="s1">&#39;State.Code as StateCode&#39;</span><span class="p">,</span> <span class="s1">&#39;State.Name as StateName&#39;</span>  <span class="n">-ScriptProperty</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Name</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">get</span>  <span class="p">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$this</span><span class="p">.</span><span class="py">Tags</span><span class="p">.</span><span class="py">GetEnumerator</span><span class="p">().</span><span class="py">Where</span><span class="p">{</span><span class="nv">$_</span><span class="p">.</span><span class="py">Key</span> <span class="o">-eq</span> <span class="s1">&#39;Name&#39;</span><span class="p">}.</span><span class="py">Value</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>With this <code>$InstanceCollection</code> variable, we now have access to an easily used object that can be used with named properties.</p>
<ul>
<li>Give me all the names of the EC2 instances: <code>$InstanceCollection.Name</code></li>
<li>Sort those: <code>$InstanceCollection.Name | Sort-Object</code> (or use alias shorthand such as <code>sort</code>)</li>
<li>For each of this results start the instances: <code>$InstanceCollection | Start-EC2Instance</code></li>
</ul>
<h2 id="practical-examples" class="headerLink">
    <a href="#practical-examples" class="header-mark"></a>Practical Examples</h2><p>Beyond that, we can do many things with the rich eco-system of prebuilt modules.</p>
<p>Here are some example of some rich one-liners using the power of the object based pipeline.</p>
<ul>
<li>Export To Json: <code>$InstanceCollection | ConvertTo-Json -Depth 10 | Out-File ./instance-collection.json</code></li>
<li>Toast notification on results: <code>Send-OSNotification -Title 'Instance Collection Results' -Body &quot;Total results returned: $($InstanceCollection.Count)&quot;</code></li>
<li>Export To Excel with Table:  <code>$InstanceCollection | Export-Excel -Path ./instance-collection.json -TableStyle Light8 -TableName 'FooBar'</code></li>
<li>Send a rich pagerduty event to flag an issue: <code>Send-PagerDutyEvent -Trigger -ServiceKey foo -Description 'Issues with instance status list' -IncidentKey 'foo' -Details $HashObjectFromCollection</code></li>
<li>Use a cli tool to flip to yaml (you can use native tooling often without much issue!): <code>$InstanceCollection | ConvertTo-Json -Depth 10 | cfn-flip | Out-File ./instance-collection.yml</code></li>
</ul>
<p>Now build a test (mock syntax), that passes or fails based on the status of the instances</p>
<div
    class="details admonition Note
      open
    "
  >
    <div class="details-summary admonition-title">
      <i
        class="icon fas fa-pencil-alt fa-fw"
      ></i>
      Disclaimer
      <i class="details-icon fas fa-angle-right fa-fw"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>I&rsquo;m sure there&rsquo;s great tooling with <code>jq</code>, <code>yq</code>, excel clis and other libraries that can do similar work.</p>
<p>My point is that it&rsquo;s pretty straight forward to explore this in PowerShell as object-based pipelines are a lot less work with complex objects than text based parsing.</p>
</div>
    </div>
  </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">Describe</span> <span class="s2">&#34;Instance Status Check&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Context</span> <span class="s2">&#34;Instances That Should Be Running&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">foreach</span><span class="p">(</span><span class="nv">$Instance</span> <span class="k">in</span> <span class="nv">$InstanceCollection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">It</span> <span class="s2">&#34;should be running&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Instance</span><span class="p">.</span><span class="py">StatusName</span> <span class="p">|</span> <span class="n">Should</span> <span class="n">-Be</span> <span class="s1">&#39;Running&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now you have a test framework that you could validate operational issues across hundreds of instances, or just unit test the output of a function.</p>
<h2 id="exploring-the-object" class="headerLink">
    <a href="#exploring-the-object" class="header-mark"></a>Exploring the Object</h2><p>I did this comparison once for a coworker, maybe you&rsquo;ll find it useful too!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="s2">&#34;Test Content&#34;</span> <span class="p">|</span> <span class="nb">Out-File</span> <span class="p">./</span><span class="n">foo</span><span class="p">.</span><span class="py">txt</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Item</span> <span class="p">=</span> <span class="nb">Get-Item</span> <span class="p">./</span><span class="n">foo</span><span class="p">.</span><span class="py">txt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">## Examine all the properties and methods available. It&#39;s an object</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Item</span> <span class="p">|</span> <span class="nb">Get-Member</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This gives you an example of the objects behind the scene.
Even though your console will only return a small set of properties back, the actual object is a .NET object with all the associated methods and properties.</p>
<p>This means that <code>Get-Item</code> has access to properties such as the base name, full path, directory name and more.</p>
<p>You can access the actual <code>datetime</code> type of the <code>CreationTime</code>, allowing you to do something like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">$item</span><span class="p">.</span><span class="py">LastAccessTime</span> <span class="p">-</span> <span class="nv">$Item</span><span class="p">.</span><span class="n">CreationTime</span><span class="p">).</span><span class="py">TotalDays</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This would use two date objects, and allow you to use the relevant <code>Duration</code> methods due to performing math on these.</p>
<p>The methods available could be anything such as <code>$Item.Encrypt(); $Item.Delete; $Item.MoveTo</code> and more all provided by the .NET namespace <code>System.IO.FileInfo</code>.</p>
<p>I know many of these things you can do in bash as well, but the object pipeline here I&rsquo;d wager provides a very solid experience for more complex operations based on the .NET framework types available.</p>
<h2 id="wrap-up" class="headerLink">
    <a href="#wrap-up" class="header-mark"></a>Wrap Up</h2><p>This was meant to give a fresh perspective on why some folks have benefited from PowerShell over using shell scripting.
It&rsquo;s a robust language that for automation/build/cloud automation can give a rich reward if you invest some time to investigate.</p>
<p>For me the basic &ldquo;right tool for the job&rdquo; would like like this:</p>
<ul>
<li>data: python</li>
<li>serverless: go &amp; python (powershell can do it too, but prefer the others)</li>
<li>web: go &amp; python</li>
<li>basic cli stuff: shell (using <code>Task</code> which uses shell syntax)</li>
<li>complex cli project tasks: powershell &amp; go</li>
<li>automation/transformation: powershell &amp; python</li>
<li>high concurrency, systems programming: go</li>
</ul>
<p>Maybe this provided a fresh perspective for why PowerShell might benefit even those diehard shell scripters of you out there and maybe help convince you to take the plunge and give it a shot.</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>


<item>
    <title>
        Improving Local Development Workflow With Go Task
    </title>
    <link>
        https://www.sheldonhull.com/improving-local-development-workflow-with-go-task/
    </link>
    <pubDate>
        Tue, 03 Nov 2020 22:24:28 &#43;0000
    </pubDate>
    
    
    <guid>
        https://www.sheldonhull.com/improving-local-development-workflow-with-go-task/
    </guid>
    <description>
        <![CDATA[
        
        
        
            
        
        <h2 id="workflow-tooling" class="headerLink">
    <a href="#workflow-tooling" class="header-mark"></a>Workflow Tooling</h2><p>Development workflow, especially outside of a full-fledged IDE, is often a disjointed affair.
DevOps oriented workflows that often combine cli tools such as terraform, PowerShell, bash, and more all provide more complexity to getting up to speed and productive.</p>
<p>Currently, there is a variety of frameworks to solve this problem.
The &ldquo;gold standard&rdquo; most are familiar with in the open-source community would be <a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noopener noreferrer">Make</a>.</p>
<h2 id="considering-cross-platform-tooling" class="headerLink">
    <a href="#considering-cross-platform-tooling" class="header-mark"></a>Considering Cross-Platform Tooling</h2><p>This is not an exhaustive list, it&rsquo;s focused more on my journey, not saying that your workflow is wrong.</p>
<p>I&rsquo;ve looked at a variety of tooling, and the challenge has typically that most are very unintuitive and difficult to remember.</p>
<p>Make&hellip;it&rsquo;s everywhere. I&rsquo;m not going to argue the merits of each tool as I mentioned, but just bring up that while cMake is cross platform, I&rsquo;ve never considered Make a truly cross platform tool that is first class in both environments.</p>
<h2 id="invokebuild--psake" class="headerLink">
    <a href="#invokebuild--psake" class="header-mark"></a>InvokeBuild &amp; Psake</h2><p>In the Windows world, my preferred framework would be <a href="https://github.com/nightroman/Invoke-Build" target="_blank" rel="noopener noreferrer">InvokeBuild</a> or <a href="https://github.com/psake/psake" target="_blank" rel="noopener noreferrer">PSake</a>.</p>
<p>The thing is, not every environment will always have PowerShell, so I&rsquo;ve wanted to experiment with minimalistic task framework for intuitive local usage in a project when the tooling doesn&rsquo;t need to be complex.
While <code>InvokeBuild</code> is incredibly flexible and intuitive, there is an expectation of familarity with PowerShell to fully leverage.</p>
<p>If you want a robust framework, I haven&rsquo;t found anything better.
Highly recommend examining if you are comfortable with PowerShell.
You can generate VSCode tasks from your defined scripts and more.</p>
<p><code>InvokeBuild</code> &amp; <code>Psake</code> aren&rsquo;t great for beginners just needing to run some tooling quickly in my experience.
The power comes with additional load for those not experienced in PowerShell.</p>
<p>If you are needing to interact with AWS.Tools SDK, complete complex tasks such as generating objects from parsing AST (Abstract Syntax Trees) and other, then I&rsquo;d lead towards <code>InvokeBuild</code>.</p>
<p>However, if you need to initialize some local dependencies, run a linting check, format your code, get the latest from main branch and rebase, and other tasks that are common what option do you have to get up and running more quickly on this?</p>
<h2 id="task" class="headerLink">
    <a href="#task" class="header-mark"></a>Task</h2><p><a href="https://taskfile.dev/#/" target="_blank" rel="noopener noreferrer">Go Task</a></p>
<p>I&rsquo;ve been pleasantly surprised by this cross-platform tool based on a simple <code>yaml</code> schema.
It&rsquo;s written in go, and as a result it&rsquo;s normally just a single line or two to immediately install in your system.</p>
<p>Here&rsquo;s why you might find some value in examining this.</p>
<ol>
<li>Cross-platform syntax using this go interpreter <a href="https://github.com/mvdan/sh" target="_blank" rel="noopener noreferrer">sh</a></li>
<li>Very simple <code>yaml</code> schema to learn.</li>
<li>Some very nice features that make it easy to ignore already built assets, setup task dependencies (that run in parallel too!), and simple cli interactivity.</li>
</ol>
<p>My experience has been very positive as I&rsquo;ve found it very intuitive to build out basic commands as I work, rather than having to deal with more more complex schemas.</p>
<h2 id="get-started" class="headerLink">
    <a href="#get-started" class="header-mark"></a>Get Started</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">task --list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">task --list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fmt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">Apply terraform formatting</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform fmt -recursive=true</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The <a href="https://taskfile.dev/#/usage" target="_blank" rel="noopener noreferrer">docs</a> are great for this project, so I&rsquo;m not going to try and educate you on how to use this, just point out some great features.</p>
<p>First, with a quick VSCodee snippet, this provides you a quick way to bootstrap a new project with a common interface to run basic commands.</p>
<p>Let&rsquo;s give you a scenario&hellip; assuming you aren&rsquo;t using an already built Docker workspace.</p>
<ol>
<li>I need to initialize my 2 terraform directories.</li>
<li>I want to also ensure I get a few go dependencies for a project.</li>
<li>Finally, I want to validate my syntax is valid among my various directories, without using pre-commit.</li>
</ol>
<p>This gets us started&hellip;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Next, I threw together some examples here.</p>
<ul>
<li>Initialize commands for two separate directories.</li>
<li>A <code>fmt</code> command to apply standardized formatting across all <code>tf</code> files.</li>
<li>Finally, wrap up those commands with a <code>dep: []</code> value that will run the <code>init</code> commands in parallel, and once that is finished it will run <code>fmt</code> to ensure consistent formatting.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">TF_IN_AUTOMATION</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tasks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init-workspace-foo</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dir</span><span class="p">:</span><span class="w"> </span><span class="l">terraform/foo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform init</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init-workspace-bar</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dir</span><span class="p">:</span><span class="w"> </span><span class="l">terraform/bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform init</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fmt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">Recursively apply terraform fmt to all directories in project.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">terraform fmt -recursive=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">init</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">Initialize the terraform workspaces in each directory in parallel.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">deps</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">init-workspace-foo,init-workspace-bar]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">task</span><span class="p">:</span><span class="w"> </span><span class="l">fmt</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>You can even add a task in that would give you a structured git interaction, and not rely on git aliases.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sync</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">desc</span><span class="p">:</span><span class="w"> </span><span class="l">In GitHub flow, I should be getting lastest from main and rebasing on it so I don&#39;t fall behind</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">cmds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">git town sync</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="why-not-just-run-manually" class="headerLink">
    <a href="#why-not-just-run-manually" class="header-mark"></a>Why not just run manually</h2><p>I&rsquo;ve seen many folks online comments about why even bother?
Can&rsquo;t the dev just run the commands in the directory when working through it and be done with it?</p>
<p>I believe tasks like this should be thrown into a task runner from the start.
Yes, it&rsquo;s very easy to just type <code>terraform fmt</code>, <code>go fmt</code>, or other simple commands&hellip; if you are the builder of that project.</p>
<p>However:</p>
<ul>
<li>it increases the cognitive load for tedious tasks that no one should have to remember each time the project grows.</li>
<li>It makes your project more accessible to new contributors/teammates.</li>
<li>It allows you to simply moving to automation by wrapping up some of these automation actions in GitHub Actions or equivalent, but simply having the CICD tooling chosen run the same task you can run locally.</li>
</ul>
<p>Minimal effort to move it to automation from that point!</p>
<p>I think wrapping up things with a good task runner tools considers the person behind you, and prioritizes thinking of others in the course of development.
It&rsquo;s an act of consideration.</p>
<h2 id="choose-the-right-tooling" class="headerLink">
    <a href="#choose-the-right-tooling" class="header-mark"></a>Choose the Right Tooling</h2><p>Here&rsquo;s how I&rsquo;d look at the choices:</p>
<ul>
<li>Run as much in Docker as you can.</li>
<li>If simple actions, driven easily on cli such as build, formatting, validation, and other then start with <code>Task</code> from the beginning and make your project more accessible.</li>
<li>If requirements grow more complex, with interactions with AWS, custom builds for Lambda, combined with other more complex interactions that can&rsquo;t easily be wrapped up in a few lines of shell scripting&hellip; use <code>InvokeBuild</code> or equivalent. This gives you access to the power of <code>.NET</code> and the large module collection provided.</li>
</ul>
<p>Even if you don&rsquo;t really need it, think of the folks maintaining or enabling others to succeed with contributions more easily, and perhaps you&rsquo;ll find some positive wins there. üéâ</p>

        ]]>
    <a href="https://brid.gy/publish/twitter"></a>
    <data class="p-bridgy-omit-link" value="false"></data>
    </description>
</item>
</channel>
</rss>
